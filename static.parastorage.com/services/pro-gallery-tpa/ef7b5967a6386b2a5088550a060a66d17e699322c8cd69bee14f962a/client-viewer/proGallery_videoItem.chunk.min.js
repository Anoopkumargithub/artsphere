"use strict";
(("undefined" != typeof self ? self : this).webpackJsonp__wix_pro_gallery_tpa = ("undefined" != typeof self ? self : this).webpackJsonp__wix_pro_gallery_tpa || []).push([
    [158], {
        2268: (e, t, i) => {
            i.r(t), i.d(t, {
                default: () => h
            });
            var o = i(2712),
                s = i(7762),
                r = i.n(s),
                n = i(6219),
                a = i(3812),
                p = i(4928),
                d = i(8557);

            function l(e, t) {
                var i = "calc(100% + 1px)";
                return e ? {
                    height: t ? i : "auto",
                    width: t ? "auto" : i,
                    position: "absolute",
                    margin: "auto",
                    minHeight: "100%",
                    minWidth: "100%",
                    left: "-100%",
                    right: "-100%",
                    top: "-100%",
                    bottom: "-100%"
                } : {
                    width: t ? i : "auto",
                    height: t ? "100%" : i
                }
            }
            const h = function(e) {
                function t(t) {
                    var i = e.call(this, t) || this;
                    return i.pause = i.pause.bind(i), i.play = i.play.bind(i), i.playVideoIfNeeded = i.playVideoIfNeeded.bind(i), i.state = {
                        playedOnce: !1,
                        loadVideo: t.loadVideo || t.shouldPlay,
                        isPlaying: !1,
                        shouldPlay: t.shouldPlay,
                        reactPlayerLoaded: !1,
                        vimeoPlayerLoaded: !1,
                        hlsPlayerLoaded: !1
                    }, i
                }
                return (0, o.ZT)(t, e), t.prototype.componentDidMount = function() {
                    this.dynamiclyImportVideoPlayers()
                }, t.prototype.dynamiclyImportVideoPlayers = function() {
                    var e = this;
                    n.Z && n.Z.ReactPlayer || i.e(205).then(i.bind(i, 4140)).then((function(t) {
                        n.Z.ReactPlayer = t.default, e.setState({
                            reactPlayerLoaded: !0
                        }), e.playVideoIfNeeded()
                    })), n.Z && n.Z.Vimeo || !this.props.videoUrl || !this.props.videoUrl.includes("vimeo.com") || i.e(877).then(i.bind(i, 807)).then((function(t) {
                        n.Z.Vimeo = {
                            Player: t.default
                        }, e.setState({
                            vimeoPlayerLoaded: !0
                        }), e.playVideoIfNeeded()
                    })), n.Z && n.Z.Hls || !this.isHLSVideo() || i.e(164).then(i.t.bind(i, 5076, 23)).then((function(t) {
                        n.Z.Hls = t.default, e.setState({
                            hlsPlayerLoaded: !0
                        }), e.playVideoIfNeeded()
                    }))
                }, t.prototype.isHLSVideo = function() {
                    return this.props.videoUrl && (this.props.videoUrl.includes("/hls") || this.props.videoUrl.includes(".m3u8"))
                }, t.prototype.shouldUseHlsPlayer = function() {
                    return this.isHLSVideo() && !a.Z.isiOS()
                }, t.prototype.shouldForceVideoForHLS = function() {
                    return this.isHLSVideo() && a.Z.isiOS()
                }, t.prototype.UNSAFE_componentWillReceiveProps = function(e) {
                    (e.shouldPlay || e.firstUserInteractionExecuted) && this.setState({
                        loadVideo: !0
                    }), e.shouldPlay && this.setState({
                        shouldPlay: !0
                    }), this.playVideoIfNeeded(e)
                }, t.prototype.componentDidUpdate = function(e) {
                    e.activeIndex !== this.props.activeIndex && this.fixIFrameTabIndexIfNeeded(), "image" === e.type && "video" === this.props.type && this.dynamiclyImportVideoPlayers(), this.playVideoIfNeeded()
                }, t.prototype.play = function() {
                    this.props.playVideo(this.props.idx)
                }, t.prototype.pause = function() {
                    this.props.pauseVideo()
                }, t.prototype.playVideoIfNeeded = function(e) {
                    void 0 === e && (e = this.props);
                    try {
                        e.playingVideoIdx !== this.props.idx || this.isPlaying || (this.videoElement = this.videoElement || n.Z.document.querySelector("#video-" + this.props.id + " video"), this.videoElement && (this.isPlaying = !0, this.videoElement.play(), a.Z.isVerbose() && console.log("[VIDEO] Playing video #" + this.props.idx, this.videoElement)))
                    } catch (e) {
                        console.error("[VIDEO] Could not play video #" + this.props.idx, this.videoElement, e)
                    }
                }, t.prototype.createPlayerElement = function() {
                    var e = this;
                    if (!n.Z || !n.Z.ReactPlayer || !this.state.loadVideo && !this.props.playing) return null;
                    var t = n.Z.ReactPlayer,
                        i = this.props.style.ratio >= this.props.cropRatio,
                        s = this.props.options.cubeImages && "fill" === this.props.options.cubeType,
                        a = this.props.videoUrl ? this.props.videoUrl : this.props.createUrl(p.Z.urlSizes.RESIZED, p.Z.urlTypes.VIDEO),
                        h = {
                            controlsList: "nodownload",
                            disablePictureInPicture: !0,
                            muted: !this.props.options.videoSound,
                            preload: "metadata",
                            style: l(s, i),
                            type: "video/mp4"
                        };
                    return (0, d.WT)(this.props.options) && (h.poster = this.props.createUrl(p.Z.urlSizes.SCALED, p.Z.urlTypes.HIGH_RES)), r().createElement(t, {
                        playsinline: !0,
                        className: "gallery-item-visible video gallery-item",
                        id: "video-" + this.props.id,
                        width: "100%",
                        height: "100%",
                        url: a,
                        alt: "string" == typeof this.props.alt ? this.props.alt : "untitled video",
                        loop: !!this.props.options.videoLoop,
                        ref: function(t) {
                            return e.video = t
                        },
                        volume: this.props.options.videoSound ? .8 : 0,
                        playing: this.state.shouldPlay,
                        onEnded: function() {
                            e.setState({
                                isPlaying: !1
                            }), e.props.actions.eventsListener(p.Z.events.VIDEO_ENDED, e.props)
                        },
                        onPause: function() {
                            e.setState({
                                isPlaying: !1
                            })
                        },
                        onError: function(t) {
                            e.props.actions.eventsListener(p.Z.events.VIDEO_ERROR, (0, o.pi)((0, o.pi)({}, e.props), {
                                videoError: t
                            }))
                        },
                        playbackRate: Number(this.props.options.videoSpeed) || 1,
                        onStart: function() {
                            e.state.playedOnce || e.setState({
                                playedOnce: !0
                            })
                        },
                        onPlay: function() {
                            e.props.actions.eventsListener(p.Z.events.VIDEO_PLAYED, e.props), e.setState({
                                isPlaying: !0
                            })
                        },
                        onReady: function() {
                            e.playVideoIfNeeded(), e.fixIFrameTabIndexIfNeeded(), e.props.actions.setItemLoaded(), e.setState({
                                ready: !0
                            })
                        },
                        onProgress: function() {
                            e.props.shouldPlay || e.setState({
                                shouldPlay: !1
                            })
                        },
                        controls: this.props.options.showVideoControls,
                        config: {
                            file: {
                                attributes: h,
                                forceHLS: this.shouldUseHlsPlayer(),
                                forceVideo: this.shouldForceVideoForHLS()
                            }
                        },
                        key: "video-" + this.props.id
                    })
                }, t.prototype.fixIFrameTabIndexIfNeeded = function() {
                    if (this.props.isExternalVideo) {
                        var e = n.Z.document && n.Z.document.getElementById("video-" + this.props.id),
                            t = e && e.getElementsByTagName("iframe"),
                            i = t && t[0];
                        i && (this.props.activeIndex === this.props.idx ? i.setAttribute("tabIndex", "0") : i.setAttribute("tabIndex", "-1"))
                    }
                }, t.prototype.getVideoContainerStyles = function() {
                    var e = (0, o.pi)({}, this.props.imageDimensions);
                    return a.Z.deviceHasMemoryIssues() || this.state.ready || !(0, d.WT)(this.props.options) || (e.backgroundImage = "url(" + this.props.createUrl(p.Z.urlSizes.RESIZED, p.Z.urlTypes.HIGH_RES) + ")"), e
                }, t.prototype.render = function() {
                    var e = this.props,
                        t = e.videoPlaceholder,
                        i = e.hover,
                        o = ["gallery-item-content", "gallery-item-visible", "gallery-item-preloaded", "gallery-item-video", "gallery-item", "video-item"];
                    a.Z.isiPhone() && o.push("ios"), this.state.isPlaying && o.push("playing"), this.state.playedOnce && this.state.ready && o.push("playedOnce"), this.props.isCurrentHover ? o.push("item-content-hover") : o.push("item-content-regular");
                    var s = r().createElement("div", {
                        className: o.join(" "),
                        "data-hook": "video_container-video-player-element",
                        key: "video_container-" + this.props.id,
                        style: this.getVideoContainerStyles()
                    }, this.createPlayerElement(), this.props.videoPlayButton);
                    return r().createElement("div", {
                        key: "video-and-hover-container" + this.props.idx
                    }, s, (0, d.WT)(this.props.options) && t, i)
                }, t
            }(r().Component)
        },
        6721: (e, t, i) => {
            i.d(t, {
                VD: () => p,
                WT: () => h,
                sq: () => l
            });
            var o = i(8422),
                s = i(3812),
                r = i(6219),
                n = i(4928);

            function a() {
                return ((0, o.bK)() || (0, o.Vg)()) && !s.Z.isMobile() && r.Z.document
            }

            function p(e) {
                var t = e.itemContainer,
                    i = e.enableExperimentalFeatures,
                    o = e.itemAnchor;
                a() && i && (r.Z.document.activeElement === o && t.focus())
            }

            function d(e, t) {
                var i = r.Z.document.activeElement;
                return String(i.className).includes(e) && !!r.Z.document.querySelector("#pro-gallery-" + t + " #" + String(i.id))
            }

            function l(e) {
                var t = e.prevProps,
                    i = e.currentProps,
                    o = e.itemContainer;
                try {
                    if (a() && r.Z.document.activeElement.className) {
                        var s = d("gallery-item-container", i.galleryId),
                            n = d("show-more", i.galleryId);
                        (s || n) && (i.thumbnailHighlightId !== t.thumbnailHighlightId && i.thumbnailHighlightId === i.id || i.activeIndex !== t.activeIndex && i.activeIndex === i.idx) && o.focus()
                    }
                } catch (e) {
                    console.error("Could not set focus to active element", e)
                }
            }

            function h(e) {
                return e.enableVideoPlaceholder && (!s.Z.isSingleItemHorizontalDisplay(e) || e.videoPlay !== n.Z.videoPlay.AUTO)
            }
        },
        6487: (e, t, i) => {
            i.r(t), i.d(t, {
                default: () => h
            });
            var o = i(2712),
                s = i(7762),
                r = i.n(s),
                n = i(6219),
                a = i(3812),
                p = i(4928),
                d = i(6721);

            function l(e, t) {
                var i = "calc(100% + 1px)";
                return e ? {
                    height: t ? i : "auto",
                    width: t ? "auto" : i,
                    position: "absolute",
                    margin: "auto",
                    minHeight: "100%",
                    minWidth: "100%",
                    left: "-100%",
                    right: "-100%",
                    top: "-100%",
                    bottom: "-100%"
                } : {
                    width: t ? i : "auto",
                    height: t ? "100%" : i
                }
            }
            const h = function(e) {
                function t(t) {
                    var i = e.call(this, t) || this;
                    return i.pause = i.pause.bind(i), i.play = i.play.bind(i), i.playVideoIfNeeded = i.playVideoIfNeeded.bind(i), i.state = {
                        playedOnce: !1,
                        loadVideo: t.loadVideo || t.shouldPlay,
                        isPlaying: !1,
                        shouldPlay: t.shouldPlay,
                        reactPlayerLoaded: !1,
                        vimeoPlayerLoaded: !1,
                        hlsPlayerLoaded: !1
                    }, i
                }
                return (0, o.ZT)(t, e), t.prototype.componentDidMount = function() {
                    this.dynamiclyImportVideoPlayers()
                }, t.prototype.dynamiclyImportVideoPlayers = function() {
                    var e = this;
                    n.Z && n.Z.ReactPlayer || i.e(205).then(i.bind(i, 8398)).then((function(t) {
                        n.Z.ReactPlayer = t.default, e.setState({
                            reactPlayerLoaded: !0
                        }), e.playVideoIfNeeded()
                    })), n.Z && n.Z.Vimeo || !this.props.videoUrl || !this.props.videoUrl.includes("vimeo.com") || i.e(877).then(i.bind(i, 807)).then((function(t) {
                        n.Z.Vimeo = {
                            Player: t.default
                        }, e.setState({
                            vimeoPlayerLoaded: !0
                        }), e.playVideoIfNeeded()
                    })), n.Z && n.Z.Hls || !this.isHLSVideo() || i.e(164).then(i.t.bind(i, 9972, 23)).then((function(t) {
                        n.Z.Hls = t.default, e.setState({
                            hlsPlayerLoaded: !0
                        }), e.playVideoIfNeeded()
                    }))
                }, t.prototype.isHLSVideo = function() {
                    return this.props.videoUrl && (this.props.videoUrl.includes("/hls") || this.props.videoUrl.includes(".m3u8"))
                }, t.prototype.shouldUseHlsPlayer = function() {
                    return this.isHLSVideo() && !a.Z.isiOS()
                }, t.prototype.shouldForceVideoForHLS = function() {
                    return this.isHLSVideo() && a.Z.isiOS()
                }, t.prototype.UNSAFE_componentWillReceiveProps = function(e) {
                    (e.shouldPlay || e.firstUserInteractionExecuted) && this.setState({
                        loadVideo: !0
                    }), e.shouldPlay && this.setState({
                        shouldPlay: !0
                    }), this.playVideoIfNeeded(e)
                }, t.prototype.componentDidUpdate = function(e) {
                    e.activeIndex !== this.props.activeIndex && this.fixIFrameTabIndexIfNeeded(), "image" === e.type && "video" === this.props.type && this.dynamiclyImportVideoPlayers(), this.playVideoIfNeeded()
                }, t.prototype.play = function() {
                    this.props.playVideo(this.props.idx)
                }, t.prototype.pause = function() {
                    this.props.pauseVideo()
                }, t.prototype.playVideoIfNeeded = function(e) {
                    void 0 === e && (e = this.props);
                    try {
                        e.playingVideoIdx !== this.props.idx || this.isPlaying || (this.videoElement = this.videoElement || n.Z.document.querySelector("#video-" + this.props.id + " video"), this.videoElement && (this.isPlaying = !0, this.videoElement.play(), a.Z.isVerbose() && console.log("[VIDEO] Playing video #" + this.props.idx, this.videoElement)))
                    } catch (e) {
                        console.error("[VIDEO] Could not play video #" + this.props.idx, this.videoElement, e)
                    }
                }, t.prototype.createPlayerElement = function() {
                    var e = this;
                    if (!n.Z || !n.Z.ReactPlayer || !this.state.loadVideo && !this.props.playing) return null;
                    var t = n.Z.ReactPlayer,
                        i = this.props.style.ratio >= this.props.cropRatio,
                        s = this.props.options.cubeImages && "fill" === this.props.options.cubeType,
                        a = this.props.videoUrl ? this.props.videoUrl : this.props.createUrl(p.Z.urlSizes.RESIZED, p.Z.urlTypes.VIDEO),
                        h = {
                            controlsList: "nodownload",
                            disablePictureInPicture: !0,
                            muted: !this.props.options.videoSound,
                            preload: "metadata",
                            style: l(s, i),
                            type: "video/mp4"
                        };
                    return (0, d.WT)(this.props.options) && (h.poster = this.props.createUrl(p.Z.urlSizes.SCALED, p.Z.urlTypes.HIGH_RES)), r().createElement(t, {
                        playsinline: !0,
                        className: "gallery-item-visible video gallery-item",
                        id: "video-" + this.props.id,
                        width: "100%",
                        height: "100%",
                        url: a,
                        alt: "string" == typeof this.props.alt ? this.props.alt : "untitled video",
                        loop: !!this.props.options.videoLoop,
                        ref: function(t) {
                            return e.video = t
                        },
                        volume: this.props.options.videoSound ? .8 : 0,
                        playing: this.state.shouldPlay,
                        onEnded: function() {
                            e.setState({
                                isPlaying: !1
                            }), e.props.actions.eventsListener(p.Z.events.VIDEO_ENDED, e.props)
                        },
                        onPause: function() {
                            e.setState({
                                isPlaying: !1
                            })
                        },
                        onError: function(t) {
                            e.props.actions.eventsListener(p.Z.events.VIDEO_ERROR, (0, o.pi)((0, o.pi)({}, e.props), {
                                videoError: t
                            }))
                        },
                        playbackRate: Number(this.props.options.videoSpeed) || 1,
                        onStart: function() {
                            e.state.playedOnce || e.setState({
                                playedOnce: !0
                            })
                        },
                        onPlay: function() {
                            e.props.actions.eventsListener(p.Z.events.VIDEO_PLAYED, e.props), e.setState({
                                isPlaying: !0
                            })
                        },
                        onReady: function() {
                            e.playVideoIfNeeded(), e.fixIFrameTabIndexIfNeeded(), e.props.actions.setItemLoaded(), e.setState({
                                ready: !0
                            })
                        },
                        onProgress: function() {
                            e.props.shouldPlay || e.setState({
                                shouldPlay: !1
                            })
                        },
                        controls: this.props.options.showVideoControls,
                        config: {
                            file: {
                                attributes: h,
                                forceHLS: this.shouldUseHlsPlayer(),
                                forceVideo: this.shouldForceVideoForHLS()
                            }
                        },
                        key: "video-" + this.props.id
                    })
                }, t.prototype.fixIFrameTabIndexIfNeeded = function() {
                    if (this.props.isExternalVideo) {
                        var e = n.Z.document && n.Z.document.getElementById("video-" + this.props.id),
                            t = e && e.getElementsByTagName("iframe"),
                            i = t && t[0];
                        i && (this.props.activeIndex === this.props.idx ? i.setAttribute("tabIndex", "0") : i.setAttribute("tabIndex", "-1"))
                    }
                }, t.prototype.getVideoContainerStyles = function() {
                    var e = (0, o.pi)({}, this.props.imageDimensions);
                    return a.Z.deviceHasMemoryIssues() || this.state.ready || !(0, d.WT)(this.props.options) || (e.backgroundImage = "url(" + this.props.createUrl(p.Z.urlSizes.RESIZED, p.Z.urlTypes.HIGH_RES) + ")"), e
                }, t.prototype.render = function() {
                    var e = this.props,
                        t = e.videoPlaceholder,
                        i = e.hover,
                        o = ["gallery-item-content", "gallery-item-visible", "gallery-item-preloaded", "gallery-item-video", "gallery-item", "video-item"];
                    a.Z.isiPhone() && o.push("ios"), this.state.isPlaying && o.push("playing"), this.state.playedOnce && this.state.ready && o.push("playedOnce"), this.props.isCurrentHover ? o.push("item-content-hover") : o.push("item-content-regular");
                    var s = r().createElement("div", {
                        className: o.join(" "),
                        "data-hook": "video_container-video-player-element",
                        key: "video_container-" + this.props.id,
                        style: this.getVideoContainerStyles()
                    }, this.createPlayerElement(), this.props.videoPlayButton);
                    return r().createElement("div", {
                        key: "video-and-hover-container" + this.props.idx
                    }, s, (0, d.WT)(this.props.options) && t, i)
                }, t
            }(r().Component)
        }
    }
]);
//# sourceMappingURL=proGallery_videoItem.chunk.min.js.map