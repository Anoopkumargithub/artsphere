import {
    configureForWorker
} from './configureForWorker';
import {
    isLocalhost
} from '@wix/wix-data-client-common-standalone';
const getSantaVersionFromWorkerUrl = (workerUrl) => {
    const santaVersionMatch = workerUrl.match(/santa\/([^/]*)/);
    return santaVersionMatch ? santaVersionMatch[1] : 'unknown';
};
const tryOrGetUnknown = (callback) => {
    try {
        return callback();
    } catch {
        return 'unknown';
    }
};
const tryOrGetError = (callback) => {
    try {
        return callback();
    } catch (e) {
        return typeof e === 'object' && e !== null && 'message' in e ?
            e.message :
            undefined;
    }
};
const getExtraDebugData = (globalScope) => ({
    referrer: tryOrGetError(() => globalScope ? .['wix-window'] ? .referrer),
    workerUrl: tryOrGetError(() => globalScope ? .location ? .href),
});
const getTags = (globalScope) => ({
    renderMode: tryOrGetUnknown(() => globalScope ? .['wix-window'] ? .rendering ? .env),
    viewMode: tryOrGetUnknown(() => globalScope ? .['wix-window'] ? .viewMode),
    santaVersion: tryOrGetUnknown(() => getSantaVersionFromWorkerUrl(globalScope ? .location ? .href || '')),
});
export const configureForViewerWorker = ({
    Raven,
    globalScope,
    dsn,
    params = {},
    appName,
}) => {
    if (isLocalhost()) {
        return;
    }
    configureForWorker({
        Raven,
        appName,
        browserUrlGetter: () => tryOrGetUnknown(() => globalScope ? .['wix-location'] ? .url),
        dsn,
        params,
    });
    Raven.setDataCallback((data, originalCallback = x => x) => {
        data.extra = Object.assign(data.extra || {}, getExtraDebugData(globalScope));
        data.tags = Object.assign(data.tags || {}, params.tags || {}, getTags(globalScope));
        return originalCallback(data);
    });
};
//# sourceMappingURL=configureForViewerWorker.js.map