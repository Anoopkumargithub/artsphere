var __assign = (this && this.__assign) || function() {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new(P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }

        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }

        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function(thisArg, body) {
    var _ = {
            label: 0,
            sent: function() {
                if (t[0] & 1) throw t[1];
                return t[1];
            },
            trys: [],
            ops: []
        },
        f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;

    function verb(n) {
        return function(v) {
            return step([n, v]);
        };
    }

    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];
            y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
import {
    schemaNotFoundError,
    FailedRequestException,
    UnsuccessfulResponseException
} from '../errors';
import {
    convertV1SchemaToV2
} from './v1-to-v2-converter';
import {
    convertV2SchemaToV1
} from './v2-to-v1-converter';
var V2Client = /** @class */ (function() {
    function V2Client(transport) {
        this.transport = transport;
    }
    V2Client.prototype.get = function(collectionId, options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function() {
            var response, e_1;
            return __generator(this, function(_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 2, , 3]);
                        return [4 /*yield*/ , mapErrors(this.transport.get({
                            dataCollectionId: collectionId,
                            consistentRead: options === null || options === void 0 ? void 0 : options.consistentRead
                        }))];
                    case 1:
                        response = _d.sent();
                        return [2 /*return*/ , convertV2SchemaToV1(response.collection)];
                    case 2:
                        e_1 = _d.sent();
                        if (((_c = (_b = (_a = e_1 === null || e_1 === void 0 ? void 0 : e_1.responseText) === null || _a === void 0 ? void 0 : _a.details) === null || _b === void 0 ? void 0 : _b.applicationError) === null || _c === void 0 ? void 0 : _c.code) === 'WDE0025') {
                            throw schemaNotFoundError(collectionId);
                        }
                        throw e_1;
                    case 3:
                        return [2 /*return*/ ];
                }
            });
        });
    };
    V2Client.prototype.bulkGet = function(collectionIds, options) {
        if (options === void 0) {
            options = {
                referencedCollectionsDepth: 0
            };
        }
        return __awaiter(this, void 0, void 0, function() {
            var schemas;
            var _this = this;
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/ , batchTraverse(collectionIds, 100, function(collectionIds) {
                            return __awaiter(_this, void 0, void 0, function() {
                                var request, response, activeCollections, deletedCollections;
                                var _a;
                                return __generator(this, function(_b) {
                                    switch (_b.label) {
                                        case 0:
                                            request = {
                                                dataCollectionIds: collectionIds,
                                                includeReferencedCollections: ((_a = options.referencedCollectionsDepth) !== null && _a !== void 0 ? _a : 0) > 0,
                                                showDeletedCollections: options.includeDeletedCollections,
                                                consistentRead: options === null || options === void 0 ? void 0 : options.consistentRead
                                            };
                                            return [4 /*yield*/ , mapErrors(this.transport.getBulk(request))];
                                        case 1:
                                            response = _b.sent();
                                            activeCollections = (response.activeCollections || []).map(convertV2SchemaToV1);
                                            deletedCollections = (response.deletedCollections || []).map(convertV2SchemaToV1);
                                            deletedCollections.forEach(function(c) {
                                                return c.isDeleted = true;
                                            });
                                            return [2 /*return*/ , activeCollections.concat(deletedCollections)];
                                    }
                                });
                            });
                        })];
                    case 1:
                        schemas = _a.sent();
                        return [2 /*return*/ , _schemasById(schemas)];
                }
            });
        });
    };
    V2Client.prototype.listCollections = function(options) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function() {
            var collections, paging, response, page, fetched, total;
            return __generator(this, function(_e) {
                switch (_e.label) {
                    case 0:
                        collections = [];
                        paging = {
                            offset: 0
                        };
                        _e.label = 1;
                    case 1:
                        if (!true) return [3 /*break*/ , 3];
                        return [4 /*yield*/ , mapErrors(this.transport.list({
                            paging: paging,
                            consistentRead: options === null || options === void 0 ? void 0 : options.consistentRead
                        }))];
                    case 2:
                        response = _e.sent();
                        collections = collections.concat((_a = response.collections) !== null && _a !== void 0 ? _a : []);
                        page = response.pagingMetadata;
                        fetched = ((_b = page === null || page === void 0 ? void 0 : page.offset) !== null && _b !== void 0 ? _b : 0) + ((_c = page === null || page === void 0 ? void 0 : page.count) !== null && _c !== void 0 ? _c : 0);
                        total = (_d = page === null || page === void 0 ? void 0 : page.total) !== null && _d !== void 0 ? _d : 0;
                        if (fetched < total) {
                            paging.offset = fetched;
                        } else {
                            return [2 /*return*/ , collections];
                        }
                        return [3 /*break*/ , 1];
                    case 3:
                        return [2 /*return*/ ];
                }
            });
        });
    };
    V2Client.prototype.list = function(options) {
        return __awaiter(this, void 0, void 0, function() {
            var collections;
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/ , this.listCollections(options)];
                    case 1:
                        collections = _a.sent();
                        return [2 /*return*/ , _schemasById(collections.map(convertV2SchemaToV1))];
                }
            });
        });
    };
    V2Client.prototype.save = function(collectionName, schema) {
        return __awaiter(this, void 0, void 0, function() {
            var collection, response;
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        collection = convertV1SchemaToV2(schema);
                        collection.id = collectionName || collection.id;
                        return [4 /*yield*/ , mapErrors(schema.version > 0 ?
                            this.transport.update({
                                collection: collection
                            }) :
                            this.transport.create({
                                collection: collection
                            }))];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/ , [convertV2SchemaToV1(response.collection)]];
                }
            });
        });
    };
    V2Client.prototype.remove = function(collectionName) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/ , mapErrors(this.transport.delete({
                                dataCollectionId: collectionName
                            }))
                            // Original API would return list of updated schemas, new API instead returns empty response.
                            // For compatibility, returning object with id field, in case clients use the result.
                        ];
                    case 1:
                        _a.sent();
                        // Original API would return list of updated schemas, new API instead returns empty response.
                        // For compatibility, returning object with id field, in case clients use the result.
                        return [2 /*return*/ , [{
                            id: collectionName,
                            isDeleted: true
                        }]];
                }
            });
        });
    };
    V2Client.prototype.restore = function() {
        return Promise.reject(new Error('Collection restoring is not supported.'));
    };
    return V2Client;
}());
export default V2Client;

function mapErrors(action) {
    return action.catch(function(error) {
        if (!error.response)
            return Promise.reject(new FailedRequestException(_extractErrorMessage(error)));
        var response = error.response;
        var requestId = response.headers && response.headers['x-wix-request-id'];
        return Promise.reject(new UnsuccessfulResponseException(response.status, response.data, _extractErrorMessage(response.data), requestId));
    });
}

function _schemasById(schemas) {
    return schemas.reduce(function(schemaById, schema) {
        var _a;
        return (__assign(__assign({}, schemaById), (_a = {}, _a[schema.id] = schema, _a)));
    }, {});
}

function _extractErrorMessage(error) {
    if (typeof error === 'object' && error.message) {
        return error.message;
    }
    if (typeof error === 'string') {
        return error;
    }
    return JSON.stringify(error);
}

function batchTraverse(xs, batch, f) {
    return __awaiter(this, void 0, void 0, function() {
        var promises, offset, result;
        return __generator(this, function(_a) {
            switch (_a.label) {
                case 0:
                    promises = [];
                    for (offset = 0; offset < xs.length; offset += batch) {
                        promises.push(f(xs.slice(offset, offset + batch)));
                    }
                    return [4 /*yield*/ , Promise.all(promises)];
                case 1:
                    result = _a.sent();
                    return [2 /*return*/ , result.reduce(function(a, b) {
                        return a.concat(b);
                    }, [])];
            }
        });
    });
}
//# sourceMappingURL=v2-client.js.map