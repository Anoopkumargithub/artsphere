var __assign = (this && this.__assign) || function() {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var _a;
import * as v1 from '@wix/wix-data-schema-types';
import * as v2 from '@wix/ambassador-data-v2-data-collection/types';
import {
    flip,
    mapIfDefined
} from './utils';
export var roleToV1 = {
    'ADMIN': v1.PermissionRole.admin,
    'SITE_MEMBER_AUTHOR': v1.PermissionRole.siteMemberAuthor,
    'SITE_MEMBER': v1.PermissionRole.siteMember,
    'ANYONE': v1.PermissionRole.anyone,
    'UNKNOWN_ROLE': undefined
};
export var roleToV2 = flip(roleToV1);
export var fieldTypeToV1 = {
    'TEXT': v1.FieldType.text,
    'NUMBER': v1.FieldType.number,
    'DATE': v1.FieldType.date,
    'DATETIME': v1.FieldType.dateTime,
    'IMAGE': v1.FieldType.image,
    'BOOLEAN': v1.FieldType.boolean,
    'DOCUMENT': v1.FieldType.document,
    'URL': v1.FieldType.url,
    'RICH_TEXT': v1.FieldType.richText,
    'VIDEO': v1.FieldType.video,
    'ANY': v1.FieldType.any,
    'ARRAY_STRING': v1.FieldType.stringArray,
    'ARRAY_DOCUMENT': v1.FieldType.documentArray,
    'AUDIO': v1.FieldType.audio,
    'TIME': v1.FieldType.time,
    'LANGUAGE': v1.FieldType.language,
    'RICH_CONTENT': v1.FieldType.richContent,
    'MEDIA_GALLERY': v1.FieldType.mediaGallery,
    'ADDRESS': v1.FieldType.address,
    'PAGE_LINK': v1.FieldType.pageLink,
    'REFERENCE': v1.FieldType.reference,
    'MULTI_REFERENCE': v1.FieldType.multiReference,
    'OBJECT': v1.FieldType.object,
    'ARRAY': v1.FieldType.array,
    'LEGACY_TIME': v1.FieldType.time,
    'LEGACY_BOOK': v1.FieldType.legacyBook,
    'LEGACY_EXTERNAL_URL': v1.FieldType.legacyExternalUrl,
    'LEGACY_BROKEN_REFERENCE': v1.FieldType.legacyBrokenRef,
    'LEGACY_IMAGE': v1.FieldType.legacyImage,
    'LEGACY_COLOR': v1.FieldType.color,
    'LEGACY_EXTERNAL_VIDEO': v1.FieldType.legacyExternalVideo,
    'UNKNOWN_FIELD_TYPE': undefined
};
export var fieldTypeToV2 = __assign(__assign({}, flip(fieldTypeToV1)), (_a = {}, _a[v1.FieldType.time] = v2.FieldType.TIME, _a));
var pluginMappings = [{
        v1Type: v1.MULTILINGUAL_PLUGIN_ID,
        v2Type: v2.Type.MULTILINGUAL,
        toV2: function(plugin) {
            return ({
                multilingualOptions: {
                    translatableFieldKeys: plugin.translatable
                }
            });
        },
        toV1: function(plugin) {
            var _a, _b;
            return ({
                translatable: (_b = (_a = plugin.multilingualOptions) === null || _a === void 0 ? void 0 : _a.translatableFieldKeys) !== null && _b !== void 0 ? _b : []
            });
        }
    },
    {
        v1Type: v1.PUBLISHING_PLUGIN_ID,
        v2Type: v2.Type.PUBLISH,
        toV2: function(plugin) {
            return ({
                publishOptions: {
                    defaultStatus: plugin.defaultStatus
                }
            });
        },
        toV1: function(plugin) {
            var _a;
            return ({
                defaultStatus: (_a = plugin.publishOptions) === null || _a === void 0 ? void 0 : _a.defaultStatus
            });
        }
    },
    {
        v1Type: v1.SINGLES_PLUGIN_ID,
        v2Type: v2.Type.SINGLE_ITEM,
        toV2: function(plugin) {
            return ({
                singleItemOptions: {
                    singleItemId: plugin.singleItemId
                }
            });
        },
        toV1: function(plugin) {
            var _a, _b;
            return ({
                singleItemId: (_b = (_a = plugin.singleItemOptions) === null || _a === void 0 ? void 0 : _a.singleItemId) !== null && _b !== void 0 ? _b : 'SINGLE_ITEM_ID'
            });
        }
    },
    {
        v1Type: v1.URLIZED_PLUGIN_ID,
        v2Type: v2.Type.URLIZED,
        toV2: function(plugin) {
            return ({
                urlizedOptions: {
                    format: plugin.format.toUpperCase()
                }
            });
        },
        toV1: function(plugin) {
            var _a;
            return ({
                format: ((_a = plugin.urlizedOptions) === null || _a === void 0 ? void 0 : _a.format) === v2.Format.ORIGINAL ?
                    v1.UrlizedFormat.ORIGINAL : v1.UrlizedFormat.PLAIN
            });
        }
    },
    {
        v1Type: v1.GRID_APPLESS_PLUGIN_ID,
        v2Type: v2.Type.GRIDAPPLESS,
        toV2: function(plugin) {
            return ({
                gridapplessOptions: {
                    migrated: plugin.isMigrated
                }
            });
        },
        toV1: function(plugin) {
            var _a, _b;
            return ({
                isMigrated: (_b = (_a = plugin.gridapplessOptions) === null || _a === void 0 ? void 0 : _a.migrated) !== null && _b !== void 0 ? _b : false
            });
        }
    },
    {
        v1Type: v1.SHARED_PLUGIN_ID,
        v2Type: v2.Type.SHARED,
        toV2: function(plugin) {
            return ({});
        },
        toV1: function(plugin) {
            return ({});
        }
    },
    {
        v1Type: v1.PAGE_LINK_PLUGIN_ID,
        v2Type: v2.Type.EDITABLE_PAGE_LINK,
        toV2: function(plugin) {
            return ({
                editablePageLinkOptions: {
                    isPersisted: plugin.isPersisted,
                    isMutable: plugin.isUpdatable
                }
            });
        },
        toV1: function(plugin) {
            var _a, _b, _c, _d;
            return ({
                isPersisted: (_b = (_a = plugin.editablePageLinkOptions) === null || _a === void 0 ? void 0 : _a.isPersisted) !== null && _b !== void 0 ? _b : false,
                isUpdatable: (_d = (_c = plugin.editablePageLinkOptions) === null || _c === void 0 ? void 0 : _c.isMutable) !== null && _d !== void 0 ? _d : false
            });
        }
    },
    {
        v1Type: v1.CMS_PLUGIN_ID,
        v2Type: v2.Type.CMS,
        toV1: function(plugin) {
            var _a, _b;
            return (__assign(__assign({}, ((_a = plugin.cmsOptions) !== null && _a !== void 0 ? _a : {})), {
                siteSort: mapIfDefined((_b = plugin.cmsOptions) === null || _b === void 0 ? void 0 : _b.siteSort, function(siteSort) {
                    var _a;
                    return ({
                        sort: ((_a = siteSort.sort) !== null && _a !== void 0 ? _a : []).map(function(sort) {
                            var _a;
                            return ({
                                fieldName: sort.fieldKey,
                                direction: (_a = sort.direction) === null || _a === void 0 ? void 0 : _a.toLowerCase()
                            });
                        })
                    });
                })
            }));
        },
        toV2: function(plugin) {
            return ({
                cmsOptions: __assign(__assign({}, plugin), {
                    siteSort: mapIfDefined(plugin.siteSort, function(siteSort) {
                        return ({
                            sort: siteSort.sort.map(function(sort) {
                                var _a;
                                return ({
                                    fieldKey: sort.fieldName,
                                    direction: (_a = sort.direction) === null || _a === void 0 ? void 0 : _a.toUpperCase()
                                });
                            })
                        });
                    })
                })
            });
        }
    }
];
export function pluginsToV1(plugins) {
    var result = {};
    var _loop_1 = function(plugin) {
        var mapping = pluginMappings.find(function(mapping) {
            return mapping.v2Type === plugin.type;
        });
        if (mapping !== undefined) {
            result[mapping.v1Type] = mapping.toV1(plugin);
        } else {
            // to retain future plugins before mapping is added
            result[plugin.type] = plugin;
        }
    };
    for (var _i = 0, plugins_1 = plugins; _i < plugins_1.length; _i++) {
        var plugin = plugins_1[_i];
        _loop_1(plugin);
    }
    return result;
}
export function pluginsToV2(plugins) {
    var result = [];
    var _loop_2 = function(pluginId, plugin) {
        var mapping = pluginMappings.find(function(mapping) {
            return mapping.v1Type === pluginId;
        });
        if (mapping !== undefined) {
            result.push(__assign({
                type: mapping.v2Type
            }, mapping.toV2(plugin)));
        } else {
            // to retain future plugins before mapping is added
            result.push(plugin);
        }
    };
    for (var _i = 0, _a = Object.entries(plugins); _i < _a.length; _i++) {
        var _b = _a[_i],
            pluginId = _b[0],
            plugin = _b[1];
        _loop_2(pluginId, plugin);
    }
    return result;
}
var fieldPluginMappings = [{
    v1Type: v1.CMS_FIELD_PLUGIN_ID,
    v2Type: v2.FieldPluginType.CMS,
    toV1: function(plugin) {
        var _a, _b;
        return ({
            internal: (_b = (_a = plugin.cmsOptions) === null || _a === void 0 ? void 0 : _a.internal) !== null && _b !== void 0 ? _b : false
        });
    },
    toV2: function(plugin) {
        return ({
            cmsOptions: {
                internal: plugin.internal
            }
        });
    }
}];
export function fieldPluginsToV1(plugins) {
    var result = {};
    var _loop_3 = function(plugin) {
        var mapping = fieldPluginMappings.find(function(mapping) {
            return mapping.v2Type === plugin.type;
        });
        if (mapping !== undefined) {
            result[mapping.v1Type] = mapping.toV1(plugin);
        } else {
            // to retain future plugins before mapping is added
            result[plugin.type] = plugin;
        }
    };
    for (var _i = 0, plugins_2 = plugins; _i < plugins_2.length; _i++) {
        var plugin = plugins_2[_i];
        _loop_3(plugin);
    }
    return result;
}
export function fieldPluginsToV2(plugins) {
    var result = [];
    var _loop_4 = function(pluginId, plugin) {
        var mapping = fieldPluginMappings.find(function(mapping) {
            return mapping.v1Type === pluginId;
        });
        if (mapping !== undefined) {
            result.push(__assign({
                type: mapping.v2Type
            }, mapping.toV2(plugin)));
        } else {
            // to retain future plugins before mapping is added
            result.push(plugin);
        }
    };
    for (var _i = 0, _a = Object.entries(plugins); _i < _a.length; _i++) {
        var _b = _a[_i],
            pluginId = _b[0],
            plugin = _b[1];
        _loop_4(pluginId, plugin);
    }
    return result;
}
//# sourceMappingURL=mappings.js.map