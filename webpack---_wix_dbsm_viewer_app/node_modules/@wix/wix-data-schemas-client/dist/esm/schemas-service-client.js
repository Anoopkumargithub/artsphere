import * as queryString from 'query-string';
import {
    FailedRequestException,
    UnsuccessfulResponseException,
    rejectWithCollectionDeleted,
    schemaNotFoundError
} from './errors';
var extractErrorMessage = function(error) {
    if (typeof error === 'object' && error.message) {
        return error.message;
    }
    if (typeof error === 'string') {
        return error;
    }
    return JSON.stringify(error);
};
var indexSchemasById = function(schemas) {
    return schemas.reduce(function(schemaById, schema) {
        var _a;
        return Object.assign({}, schemaById, (_a = {}, _a[schema.id] = schema, _a));
    }, {});
};
var trimEnd = function(str, suffix) {
    return str.endsWith(suffix) ? str.substring(0, str.length - suffix.length) : str;
};
var getBaseUrl = function(baseUrl) {
    // frontend has places where it gives '/_api/cloud-data/v1/schemas' as baseUrl
    baseUrl = trimEnd(baseUrl, '/');
    baseUrl = trimEnd(baseUrl, '/v1/schemas');
    return baseUrl;
};
var SchemasServiceClient = /** @class */ (function() {
    function SchemasServiceClient(httpRequest, signedInstance, gridAppId, options) {
        var _this = this;
        var baseUrl = getBaseUrl((options && options.baseUrl) || 'https://cloud-data.wix-code.com');
        this.signedInstance = signedInstance;
        this.gridAppId = gridAppId;
        this.mutate = function(method, url, data) {
            return httpRequest[method](baseUrl + url, data, _this._setHeaders())
                .then(function(response) {
                    return response.data;
                })
                .catch(_this._handleError);
        };
        this.retrieve = function(url) {
            return httpRequest.get(baseUrl + url, _this._setHeaders())
                .then(function(response) {
                    return response.data;
                })
                .catch(_this._handleError);
        };
    }
    SchemasServiceClient.prototype.wrapWithDefaultOptions = function(options) {
        return Object.assign({}, options, {
            appId: this.gridAppId
        });
    };
    SchemasServiceClient.prototype.formRequestUrl = function(query) {
        return '/v1/schemas' + '?' + queryString.stringify(query);
    };
    SchemasServiceClient.prototype.get = function(collectionName, options) {
        if (options === void 0) {
            options = {
                includeDeletedCollections: false
            };
        }
        var query = this.wrapWithDefaultOptions({
            includeDeleted: true,
            schemaIds: collectionName
        });
        return this.retrieve(this.formRequestUrl(query))
            .then(function(_a) {
                var schema = _a.schemas[0];
                if (schema && schema.isDeleted && !options.includeDeletedCollections) {
                    return rejectWithCollectionDeleted(collectionName);
                }
                if (!schema) {
                    return Promise.reject(schemaNotFoundError(collectionName));
                } else {
                    return schema;
                }
            });
    };
    SchemasServiceClient.prototype.bulkGet = function(collectionIds, options) {
        if (options === void 0) {
            options = {
                includeDeletedCollections: false,
                referencedCollectionsDepth: 0
            };
        }
        var query = this.wrapWithDefaultOptions({
            depth: options.referencedCollectionsDepth || 0,
            includeDeleted: options.includeDeletedCollections || false,
            schemaIds: collectionIds
        });
        return this.retrieve(this.formRequestUrl(query))
            .then(function(_a) {
                var schemas = _a.schemas;
                return indexSchemasById(schemas);
            });
    };
    SchemasServiceClient.prototype.list = function(options) {
        if (options === void 0) {
            options = {
                includeDeletedCollections: false
            };
        }
        var query = this.wrapWithDefaultOptions({
            schemaIds: [],
            depth: 0,
            includeDeleted: options.includeDeletedCollections || false
        });
        return this.retrieve(this.formRequestUrl(query))
            .then(function(_a) {
                var schemas = _a.schemas;
                return indexSchemasById(schemas);
            });
    };
    SchemasServiceClient.prototype.save = function(collectionName, schema) {
        var body = this.wrapWithDefaultOptions({
            schemaId: collectionName,
            schema: schema
        });
        return this.mutate('post', '/v1/schemas', body)
            .then(function(_a) {
                var schemas = _a.schemas;
                return schemas;
            });
    };
    SchemasServiceClient.prototype.setIsDeletedFlag = function(collectionName, isDeleted) {
        var body = this.wrapWithDefaultOptions({
            schemaId: collectionName,
            partialSchema: {
                isDeleted: isDeleted
            }
        });
        return this.mutate('patch', '/v1/schemas', body)
            .then(function(_a) {
                var schemas = _a.schemas;
                return schemas;
            });
    };
    SchemasServiceClient.prototype.remove = function(collectionName) {
        return this.setIsDeletedFlag(collectionName, true);
    };
    SchemasServiceClient.prototype.restore = function(collectionName) {
        return this.setIsDeletedFlag(collectionName, false);
    };
    SchemasServiceClient.prototype._setHeaders = function() {
        return {
            headers: {
                authorization: this.signedInstance
            }
        };
    };
    SchemasServiceClient.prototype._handleError = function(error) {
        if (!error.response) {
            return Promise.reject(new FailedRequestException(extractErrorMessage(error)));
        }
        var response = error.response;
        var requestId = response.headers && response.headers['x-wix-request-id'];
        return Promise.reject(new UnsuccessfulResponseException(response.status, response.data, extractErrorMessage(response.data), requestId));
    };
    return SchemasServiceClient;
}());
export default SchemasServiceClient;
//# sourceMappingURL=schemas-service-client.js.map