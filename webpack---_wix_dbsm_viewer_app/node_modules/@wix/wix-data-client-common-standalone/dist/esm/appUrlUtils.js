export const UNKNOWN_VERSION = 'unknown';
const isValidVersionString = (version) => /^\d+\.\d+\.\d+$/.test(version);
const parseAppUrl = (url) => {
    const split = url.split('/');
    const possibleArtifact = split[split.length - 3];
    const possibleVersion = split[split.length - 2];
    if (!isValidVersionString(possibleVersion)) {
        throw new Error(`Invalid version string ${possibleVersion}`);
    }
    return {
        appName: possibleArtifact,
        version: possibleVersion,
    };
};
export const getAppNameWithVersion = (url) => {
    try {
        const {
            appName,
            version
        } = parseAppUrl(url);
        return `${appName}@${version}`;
    } catch {
        return UNKNOWN_VERSION;
    }
};
export const getAppVersion = (url) => {
    try {
        const {
            version
        } = parseAppUrl(url);
        return version;
    } catch {
        return UNKNOWN_VERSION;
    }
};
const getStackTrace = () => {
    const dummyError = new Error();
    return dummyError.stack ? dummyError.stack.toString() : '';
};
export const getAppUrl = (appName) => {
    const urlMatches = getStackTrace().match(new RegExp(`https?://.*?${appName}.*?.js`));
    return urlMatches ? urlMatches[0] : '';
};
export const isLocalhost = () => /https?:\/\/localhost/.test(getStackTrace());
//# sourceMappingURL=appUrlUtils.js.map