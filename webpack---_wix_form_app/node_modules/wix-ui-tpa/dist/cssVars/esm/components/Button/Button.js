import * as React from 'react';
import classnames from 'classnames';
import {
    st,
    classes
} from './Button.st.css';
import {
    CoreButtonNext as ButtonNext
} from '../internal/WixUiCoreComponents/components/CoreButtonNext';
import {
    TPAComponentsContext,
    TPAComponentsConsumer,
} from '../../../../esm/components/TPAComponentsConfig';
import {
    deprecationLog
} from '../../common/deprecationLog';
class ButtonComponent extends React.Component {
    constructor() {
        super(...arguments);
        this._wrapAffix = (icon, type) => {
            return (React.createElement("span", {
                className: classnames(classes[`${type}-icon`], classes.affixIcon)
            }, icon));
        };
        this._getAffixes = () => {
            const {
                prefixIcon,
                suffixIcon
            } = this.props;
            const hasIcons = prefixIcon || suffixIcon;
            return hasIcons ?
                {
                    prefixIcon: prefixIcon ?
                        this._wrapAffix(prefixIcon, 'prefix') :
                        undefined,
                    suffixIcon: suffixIcon ?
                        this._wrapAffix(suffixIcon, 'suffix') :
                        undefined,
                } :
                null;
        };
    }
    componentDidMount() {
        if (!this.props.upgrade) {
            deprecationLog('Button', 'The current `Button` component API will be deprecated in a future version. Please use the `upgrade` prop in order to use the new API.');
        }
    }
    _getDataAttributes(mobile) {
        const {
            fullWidth
        } = this.props;
        return {
            'data-fullwidth': fullWidth,
            'data-mobile': mobile,
        };
    }
    render() {
        const {
            priority,
            size,
            fullWidth,
            innerRef,
            upgrade,
            wrapContent,
            children,
            className,
            ...rest
        } = this.props;
        const affixes = this._getAffixes();
        return (React.createElement(TPAComponentsConsumer, null, ({
            mobile
        }) => (React.createElement(ButtonNext, { ...this._getDataAttributes(mobile),
            ref: innerRef,
            children: children,
            "data-hook": this.props['data-hook'],
            className: st(classes.root, {
                priority,
                size,
                fullWidth,
                mobile,
                upgrade,
                wrapContent,
            }, classnames(className, {
                [classes.hasIcon]: !!affixes
            })),
            ...rest,
            ...affixes
        }))));
    }
}
ButtonComponent.contextType = TPAComponentsContext;
ButtonComponent.displayName = 'Button';
ButtonComponent.defaultProps = {
    fullWidth: false,
    upgrade: false,
    wrapContent: false,
};
export const Button = React.forwardRef((props, ref) => (React.createElement(ButtonComponent, { ...props,
    innerRef: ref
})));
//# sourceMappingURL=Button.js.map