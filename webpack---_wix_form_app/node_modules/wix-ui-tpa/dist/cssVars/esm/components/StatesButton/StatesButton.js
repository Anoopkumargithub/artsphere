import * as React from 'react';
import {
    st,
    classes
} from './StatesButton.st.css';
import {
    Button
} from '../Button';
import {
    deprecationLog,
    wrap,
    unwrap
} from '../../common/deprecationLog';
import {
    Check
} from '@wix/wix-ui-icons-common/on-stage';
import {
    StatesButtonStates
} from './types';
export class StatesButton extends React.Component {
    constructor(props) {
        super(props);
        this.componentDidUpdate = ({
            state: prevState
        }) => {
            const {
                state: currentState,
                onNotificationEnd
            } = this.props;
            if (currentState !== prevState) {
                clearTimeout(this.timer);
            }
            if ((currentState === StatesButtonStates.SUCCESS &&
                    prevState !== StatesButtonStates.SUCCESS) ||
                (currentState === StatesButtonStates.FAILURE &&
                    prevState !== StatesButtonStates.FAILURE)) {
                this.timer = setTimeout(() => onNotificationEnd && onNotificationEnd(), 2000);
            }
        };
        this.buttonRef = React.createRef();
        this.focus = () => {
            this.buttonRef.current.focus();
        };
        this.debounceOnClick = (e) => {
            const {
                state,
                onClick
            } = this.props;
            if (state === StatesButtonStates.IDLE) {
                onClick(e);
            }
        };
        wrap('Button');
    }
    componentDidMount() {
        if (!this.props.upgrade) {
            deprecationLog('StatesButton', 'The current `StatesButton` component API will be deprecated in a future version. Please use the `upgrade` prop in order to use the new API.');
            unwrap('Button');
        }
    }
    renderCheck() {
        return (React.createElement("div", {
                className: classes.successIconWrapper
            },
            React.createElement(Check, {
                className: classes.successIcon,
                "data-hook": "checkIcon"
            })));
    }
    renderContent() {
        const {
            state,
            idleContent,
            inProgressContent,
            failureContent,
            successContent,
        } = this.props;
        switch (state) {
            case StatesButtonStates.IDLE:
                return idleContent;
            case StatesButtonStates.IN_PROGRESS:
                return inProgressContent;
            case StatesButtonStates.FAILURE:
                return failureContent;
            case StatesButtonStates.SUCCESS:
                return successContent ? successContent : this.renderCheck();
            default:
                return idleContent;
        }
    }
    render() {
        const {
            state,
            disabled,
            onClick,
            idleContent,
            inProgressContent,
            failureContent,
            successContent,
            onNotificationEnd,
            upgrade,
            className,
            ...rest
        } = this.props;
        const inProgress = state === StatesButtonStates.IN_PROGRESS;
        return (React.createElement(Button, {
            className: st(classes.root, {
                upgrade
            }, className),
            upgrade: upgrade,
            disabled: disabled,
            onClick: this.debounceOnClick,
            ref: this.buttonRef,
            "aria-live": "assertive",
            ...(inProgress && {
                'aria-busy': true
            }),
            ...rest
        }, this.renderContent()));
    }
}
//# sourceMappingURL=StatesButton.js.map