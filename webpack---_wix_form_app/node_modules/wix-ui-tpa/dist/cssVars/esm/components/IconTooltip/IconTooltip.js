import * as React from 'react';
import {
    classes,
    st
} from './IconTooltip.st.css';
import {
    CoreButtonNext as ButtonNext
} from '../internal/WixUiCoreComponents/components/CoreButtonNext';
import {
    uid
} from 'react-uid';
import {
    Tooltip
} from '../Tooltip';
import {
    TooltipSkin
} from '../Tooltip/types';
/** An icon that shows a tooltip on focus and on hover. */
export class IconTooltip extends React.Component {
    render() {
        const generatedTooltipId = `${uid(IconTooltip.displayName)}-${Math.random()
            .toString(36)
            .substring(2)}`;
        const {
            message,
            icon,
            tooltipId = generatedTooltipId,
            tooltipSkin,
            showTooltip,
            onClickOutside,
            tooltipProps,
            'data-hook': dataHook,
            className,
            ...rest
        } = this.props;
        const content = React.createElement("span", {
            id: tooltipId
        }, message);
        return (React.createElement(Tooltip, {
                className: st(classes.root, {}, className),
                "data-hook": dataHook,
                "aria-live": "polite",
                disabled: !showTooltip,
                content: content,
                appendTo: "scrollParent",
                skin: tooltipSkin,
                shown: showTooltip,
                onClickOutside: onClickOutside,
                disableClickOutsideWhenClosed: true,
                ...tooltipProps
            },
            React.createElement(React.Fragment, null,
                React.createElement(ButtonNext, {
                        className: classes.button,
                        "aria-pressed": showTooltip,
                        "aria-labelledby": tooltipId,
                        ...rest
                    },
                    React.createElement("div", {
                        className: classes.icon
                    }, icon)), !showTooltip ? (React.createElement("span", {
                    id: tooltipId,
                    className: classes.tooltipMessage
                }, message)) : null)));
    }
}
IconTooltip.displayName = 'IconTooltip';
IconTooltip.defaultProps = {
    message: '',
    icon: undefined,
    tooltipId: undefined,
    tooltipSkin: TooltipSkin.Standard,
    showTooltip: false,
};
//# sourceMappingURL=IconTooltip.js.map