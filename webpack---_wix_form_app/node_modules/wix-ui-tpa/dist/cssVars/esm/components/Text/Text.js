import * as React from 'react';
import {
    st,
    classes
} from './Text.st.css';
import {
    TPAComponentsConsumer
} from '../../../../esm/components/TPAComponentsConfig';
import {
    TextPriority,
    TextTypography
} from './types';
const Text = (props) => {
    const {
        typography = TextTypography.runningText, priority = TextPriority.primary, tagName, children, className, role, id, 'aria-label': ariaLabel, 'aria-hidden': ariaHidden, ...rest
    } = props;
    const isAriaHidden = !!ariaHidden && ariaHidden !== 'false';
    return (React.createElement(TPAComponentsConsumer, null, ({
        mobile
    }) => (React.createElement(React.Fragment, null,
        React.createElement(tagName || 'span', {
            className: st(classes.root, {
                typography,
                priority,
                mobile,
            }, className),
            'aria-hidden': isAriaHidden || !!ariaLabel,
            'aria-label': ariaLabel,
            'data-hook': props['data-hook'],
            'data-mobile': mobile || null,
            role,
            id,
            ...rest,
        }, children), !isAriaHidden && !!ariaLabel ? (React.createElement("span", {
            className: classes['sr-only'],
            "data-sr-only": "true",
            "data-hook": `${props['data-hook'] || 'wut-text'}-aria-label`
        }, ariaLabel)) : null))));
};
Text.displayName = 'Text';
export {
    Text
};
//# sourceMappingURL=Text.js.map