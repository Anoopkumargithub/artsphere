import * as React from 'react';
import classNames from 'classnames';
import {
    st,
    classes
} from './CoreButtonNext.st.css';
import {
    dataHooks
} from './constants';
import {
    isStatelessComponent
} from './utils/isStatelessComponent';
const _addAffix = (Affix, styleClass, dataHook) => Affix &&
    React.cloneElement(Affix, {
        className: classNames(classes[styleClass], Affix.props.className),
        'data-hook': Affix.props['data-hook'] || Affix.props.dataHook || dataHook,
    });
/**
 * CoreButtonNext
 */
class CoreButtonNextComponent extends React.Component {
    focus() {
        if (this.innerComponentRef && this.innerComponentRef.focus) {
            this.innerComponentRef.focus();
        }
    }
    render() {
        const {
            as: Component,
            suffixIcon,
            prefixIcon,
            children,
            disabled,
            focusableOnFocus,
            focusableOnBlur,
            href,
            contentClassName,
            contentRef,
            ...rest
        } = this.props;
        const htmlTabIndex = disabled ? -1 : rest.tabIndex || 0;
        const htmlHref = disabled ? undefined : href;
        const reference = isStatelessComponent(Component) && typeof Component !== 'string' ?
            undefined :
            (ref) => (this.innerComponentRef = ref);
        return (React.createElement(Component, { ...rest,
                onFocus: focusableOnFocus,
                onBlur: focusableOnBlur,
                disabled: href ? undefined : disabled,
                href: htmlHref,
                ref: reference,
                tabIndex: htmlTabIndex,
                "aria-disabled": disabled,
                className: st(classes.root, {
                    disabled
                }, this.props.className)
            },
            _addAffix(prefixIcon, 'prefix', dataHooks.prefixIcon),
            React.createElement("span", {
                className: st(classes.content, contentClassName),
                ref: contentRef
            }, children),
            _addAffix(suffixIcon, 'suffix', dataHooks.suffixIcon)));
    }
}
CoreButtonNextComponent.defaultProps = {
    as: 'button',
    type: 'button'
};
CoreButtonNextComponent.displayName = 'ButtonNext';
export const CoreButtonNext = CoreButtonNextComponent;
//# sourceMappingURL=CoreButtonNext.js.map