import * as React from 'react';
import {
    st,
    classes
} from './CoreTooltip.st.css';
import {
    CorePopover
} from '../CorePopover';
import {
    filterDataProps
} from '../../utils/FilterDataProps';
/**
 * Tooltip
 */
export class CoreTooltip extends React.PureComponent {
    constructor() {
        super(...arguments);
        this.state = {
            isOpen: false
        };
        this._handleClickOutside = () => {
            const {
                onClickOutside,
                shouldCloseOnClickOutside
            } = this.props;
            if (shouldCloseOnClickOutside) {
                this.props.onHide();
                this.setState({
                    isOpen: false
                });
            }
            return onClickOutside ? onClickOutside() : null;
        };
        this._renderElement = () => {
            const {
                children,
                disabled,
                'aria-describedby': ariaDescribedBy,
            } = this.props;
            if (typeof children === 'string' || !children) {
                return children || '';
            }
            return React.cloneElement(children, {
                onFocus: disabled ? undefined : this._onFocus,
                onBlur: disabled ? undefined : this._onBlur,
                'aria-describedby': ariaDescribedBy,
            });
        };
        this.open = () => {
            this.props.onShow();
            this.setState({
                isOpen: true
            });
        };
        this.close = () => {
            const {
                shouldCloseOnClickOutside
            } = this.props;
            if (!shouldCloseOnClickOutside) {
                this.props.onHide();
                this.setState({
                    isOpen: false
                });
            }
        };
        this._onFocus = (handlers) => {
            const focusableHOC = handlers && handlers.focus;
            this.open();
            return focusableHOC ? handlers.focus() : null;
        };
        this._onBlur = (handlers) => {
            const focusableHOC = handlers && handlers.blur;
            this.close();
            return focusableHOC ? handlers.blur() : null;
        };
        this.isShown = () => {
            const {
                disabled,
                shown
            } = this.props;
            if (shown) {
                return shown;
            }
            return disabled ? false : this.state.isOpen;
        };
    }
    render() {
        const {
            placement,
            content,
            moveBy,
            timeout,
            showArrow,
            moveArrowTo,
            appendTo,
            flip,
            fixed,
            hideDelay,
            showDelay,
            disabled,
            customArrow,
            zIndex,
            minWidth,
            maxWidth,
            'aria-describedby': ariaDescribedBy,
            className,
            contentClassName,
            disableClickOutsideWhenClosed,
            fluid,
        } = this.props;
        return (React.createElement(CorePopover, {
                className: st(classes.root, className),
                placement: placement,
                shown: this.isShown(),
                showArrow: showArrow,
                onMouseEnter: disabled ? undefined : this.open,
                onMouseLeave: this.close,
                timeout: timeout,
                hideDelay: hideDelay,
                showDelay: showDelay,
                moveBy: moveBy,
                moveArrowTo: moveArrowTo,
                appendTo: appendTo,
                flip: flip,
                fixed: fixed,
                onClickOutside: this._handleClickOutside,
                customArrow: customArrow,
                id: ariaDescribedBy,
                role: "tooltip",
                zIndex: zIndex,
                minWidth: minWidth,
                maxWidth: maxWidth,
                contentClassName: contentClassName,
                disableClickOutsideWhenClosed: disableClickOutsideWhenClosed,
                fluid: fluid,
                ...filterDataProps(this.props)
            },
            React.createElement(CorePopover.Element, null, this._renderElement()),
            React.createElement(CorePopover.Content, null, content)));
    }
}
CoreTooltip.displayName = 'CoreTooltip';
CoreTooltip.defaultProps = {
    placement: 'top',
    appendTo: 'parent',
    onShow: () => ({}),
    onHide: () => ({}),
    timeout: 150,
    showDelay: 0,
    hideDelay: 0,
    showArrow: true,
};
//# sourceMappingURL=CoreTooltip.js.map