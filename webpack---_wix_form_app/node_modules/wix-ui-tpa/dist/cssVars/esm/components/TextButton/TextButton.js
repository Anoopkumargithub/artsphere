import * as React from 'react';
import classnames from 'classnames';
import {
    st,
    classes
} from './TextButton.st.css';
import {
    TPAComponentsConsumer
} from '../../../../esm/components/TPAComponentsConfig';
import {
    CoreButtonNext as ButtonNext
} from '../internal/WixUiCoreComponents/components/CoreButtonNext';
import {
    TextButtonPriority
} from './types';
/** An implementation of link-like button */
export class TextButton extends React.Component {
    constructor() {
        super(...arguments);
        this._textButtonRef = React.createRef();
        this.focus = () => {
            this._textButtonRef.current.focus();
        };
        this.blur = () => {
            this._textButtonRef.current.blur();
        };
        this._wrapAffix = (icon, type) => {
            return (React.createElement("span", {
                className: classnames(classes[`${type}-icon`], classes.affixIcon)
            }, icon));
        };
        this._getAffixes = () => {
            const {
                prefixIcon,
                suffixIcon
            } = this.props;
            const hasIcons = prefixIcon || suffixIcon;
            return hasIcons ?
                {
                    prefixIcon: prefixIcon ?
                        this._wrapAffix(prefixIcon, 'prefix') :
                        undefined,
                    suffixIcon: suffixIcon ?
                        this._wrapAffix(suffixIcon, 'suffix') :
                        undefined,
                } :
                null;
        };
    }
    render() {
        const {
            priority,
            className,
            ...rest
        } = this.props;
        const affixes = this._getAffixes();
        return (React.createElement(TPAComponentsConsumer, null, ({
            mobile
        }) => (React.createElement(ButtonNext, {
            ref: this._textButtonRef,
            ...rest,
            className: st(classes.root, {
                priority,
                mobile
            }, className),
            "data-mobile": mobile,
            "data-priority": priority,
            ...affixes
        }))));
    }
}
TextButton.displayName = 'TextButton';
TextButton.defaultProps = {
    priority: TextButtonPriority.link,
};
//# sourceMappingURL=TextButton.js.map