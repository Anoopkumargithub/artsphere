import React from 'react';
import {
    Decoration_Type
} from 'ricos-schema';

const decorator$3 = (boldDecoration, element) => {
    const {
        fontWeightValue
    } = boldDecoration;
    return /* @__PURE__ */ React.createElement("strong", {
        key: `bold-${element == null ? void 0 : element.key}`,
        style: {
            fontWeight: fontWeightValue || 700
        }
    }, element);
};
const BoldDecorator = {
    rule: (node) => {
        var _a, _b;
        return !!((_b = (_a = node.textData) == null ? void 0 : _a.decorations) == null ? void 0 : _b.some(({
            type
        }) => type === Decoration_Type.BOLD));
    },
    decorate: ({
        element,
        node
    }) => {
        var _a, _b;
        const boldDecoration = (_b = (_a = node.textData) == null ? void 0 : _a.decorations) == null ? void 0 : _b.find(
            ({
                type
            }) => type === Decoration_Type.BOLD
        );
        return decorator$3(boldDecoration, element);
    }
};

const decorator$2 = (element, fontSizeDecoration) => {
    const {
        unit,
        value
    } = fontSizeDecoration.fontSizeData || {};
    return /* @__PURE__ */ React.createElement("span", {
        key: `fontsize-${element.key}`,
        style: {
            fontSize: `${value}${unit.toLowerCase()}`
        }
    }, element);
};
const FontSizeDecorator = {
    rule: (node) => {
        var _a, _b;
        return !!((_b = (_a = node.textData) == null ? void 0 : _a.decorations) == null ? void 0 : _b.some(({
            type
        }) => type === Decoration_Type.FONT_SIZE));
    },
    decorate: ({
        element,
        node
    }) => {
        var _a, _b;
        const fontSizeDecoration = (_b = (_a = node.textData) == null ? void 0 : _a.decorations) == null ? void 0 : _b.find(
            ({
                type
            }) => type === Decoration_Type.FONT_SIZE
        );
        return decorator$2(element, fontSizeDecoration);
    }
};

const decorator$1 = (element, italicDecoration) => {
    const {
        italicData
    } = italicDecoration;
    const isItalic = typeof italicData === "undefined" || italicData;
    return /* @__PURE__ */ React.createElement("em", {
        key: `italic-${element.key}`,
        style: {
            fontStyle: isItalic ? "italic" : "normal"
        }
    }, element);
};
const ItalicDecorator = {
    rule: (node) => {
        var _a, _b;
        return !!((_b = (_a = node.textData) == null ? void 0 : _a.decorations) == null ? void 0 : _b.some(({
            type
        }) => type === Decoration_Type.ITALIC));
    },
    decorate: ({
        element,
        node
    }) => {
        var _a, _b;
        const italicDecoration = (_b = (_a = node.textData) == null ? void 0 : _a.decorations) == null ? void 0 : _b.find(
            ({
                type
            }) => type === Decoration_Type.ITALIC
        );
        return decorator$1(element, italicDecoration);
    }
};

const decorator = (element, underlineDecoration) => {
    const {
        underlineData
    } = underlineDecoration;
    const isUnderline = typeof underlineData === "undefined" || underlineData;
    return /* @__PURE__ */ React.createElement("u", {
        key: element.key,
        style: {
            textDecoration: isUnderline ? "underline" : "none"
        }
    }, element);
};
const UnderlineDecorator = {
    rule: (node) => {
        var _a, _b;
        return !!((_b = (_a = node.textData) == null ? void 0 : _a.decorations) == null ? void 0 : _b.some(({
            type
        }) => type === Decoration_Type.UNDERLINE));
    },
    decorate: ({
        element,
        node
    }) => {
        var _a, _b;
        const underlineDecoration = (_b = (_a = node.textData) == null ? void 0 : _a.decorations) == null ? void 0 : _b.find(
            ({
                type
            }) => type === Decoration_Type.UNDERLINE
        );
        return decorator(element, underlineDecoration);
    },
    priority: 2
};

const nodeViewDecorators = [
    BoldDecorator,
    ItalicDecorator,
    UnderlineDecorator,
    FontSizeDecorator
];

export {
    nodeViewDecorators
};
//# sourceMappingURL=viewer.js.map