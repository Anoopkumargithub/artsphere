var __spreadArray$1 = (undefined && undefined.__spreadArray) || function(to, from, pack) {
    if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
    return to.concat(ar || Array.prototype.slice.call(from));
};
/**
 * @since 2.0.0
 */
function identity(a) {
    return a;
}
/**
 * @since 2.0.0
 */
var unsafeCoerce = identity;
/**
 * @since 2.0.0
 */
function constant(a) {
    return function() {
        return a;
    };
}
/**
 * A thunk that returns always `true`.
 *
 * @since 2.0.0
 */
var constTrue = /*#__PURE__*/ constant(true);
/**
 * A thunk that returns always `false`.
 *
 * @since 2.0.0
 */
var constFalse = /*#__PURE__*/ constant(false);

function flow(ab, bc, cd, de, ef, fg, gh, hi, ij) {
    switch (arguments.length) {
        case 1:
            return ab;
        case 2:
            return function() {
                return bc(ab.apply(this, arguments));
            };
        case 3:
            return function() {
                return cd(bc(ab.apply(this, arguments)));
            };
        case 4:
            return function() {
                return de(cd(bc(ab.apply(this, arguments))));
            };
        case 5:
            return function() {
                return ef(de(cd(bc(ab.apply(this, arguments)))));
            };
        case 6:
            return function() {
                return fg(ef(de(cd(bc(ab.apply(this, arguments))))));
            };
        case 7:
            return function() {
                return gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))));
            };
        case 8:
            return function() {
                return hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments))))))));
            };
        case 9:
            return function() {
                return ij(hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))))));
            };
    }
    return;
}

function pipe(a, ab, bc, cd, de, ef, fg, gh, hi) {
    switch (arguments.length) {
        case 1:
            return a;
        case 2:
            return ab(a);
        case 3:
            return bc(ab(a));
        case 4:
            return cd(bc(ab(a)));
        case 5:
            return de(cd(bc(ab(a))));
        case 6:
            return ef(de(cd(bc(ab(a)))));
        case 7:
            return fg(ef(de(cd(bc(ab(a))))));
        case 8:
            return gh(fg(ef(de(cd(bc(ab(a)))))));
        case 9:
            return hi(gh(fg(ef(de(cd(bc(ab(a))))))));
        default:
            {
                var ret = arguments[0];
                for (var i = 1; i < arguments.length; i++) {
                    ret = arguments[i](ret);
                }
                return ret;
            }
    }
}
/** @internal */
var dual = function(arity, body) {
    var isDataFirst = typeof arity === 'number' ? function(args) {
        return args.length >= arity;
    } : arity;
    return function() {
        var args = Array.from(arguments);
        if (isDataFirst(arguments)) {
            return body.apply(this, args);
        }
        return function(self) {
            return body.apply(void 0, __spreadArray$1([self], args, false));
        };
    };
};

var __spreadArray = (undefined && undefined.__spreadArray) || function(to, from, pack) {
    if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
    return to.concat(ar || Array.prototype.slice.call(from));
};
// -------------------------------------------------------------------------------------
// Option
// -------------------------------------------------------------------------------------
/** @internal */
var isNone = function(fa) {
    return fa._tag === 'None';
};
/** @internal */
var isSome = function(fa) {
    return fa._tag === 'Some';
};
/** @internal */
var none = {
    _tag: 'None'
};
/** @internal */
var some = function(a) {
    return ({
        _tag: 'Some',
        value: a
    });
};
// -------------------------------------------------------------------------------------
// Either
// -------------------------------------------------------------------------------------
/** @internal */
var isLeft = function(ma) {
    return ma._tag === 'Left';
};
/** @internal */
var left = function(e) {
    return ({
        _tag: 'Left',
        left: e
    });
};
/** @internal */
var right = function(a) {
    return ({
        _tag: 'Right',
        right: a
    });
};
// -------------------------------------------------------------------------------------
// ReadonlyNonEmptyArray
// -------------------------------------------------------------------------------------
/** @internal */
var singleton = function(a) {
    return [a];
};
/** @internal */
var isNonEmpty$1 = function(as) {
    return as.length > 0;
};
/** @internal */
var head$1 = function(as) {
    return as[0];
};
// -------------------------------------------------------------------------------------
// Record
// -------------------------------------------------------------------------------------
/** @internal */
var has = Object.prototype.hasOwnProperty;
// -------------------------------------------------------------------------------------
// NonEmptyArray
// -------------------------------------------------------------------------------------
/** @internal */
var fromReadonlyNonEmptyArray = function(as) {
    return __spreadArray([as[0]], as.slice(1), true);
};

(undefined && undefined.__spreadArray) || function(to, from, pack) {
    if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
    return to.concat(ar || Array.prototype.slice.call(from));
};
/**
 * @internal
 */
var isNonEmpty = isNonEmpty$1;
/**
 * @internal
 */
var isOutOfBound = function(i, as) {
    return i < 0 || i >= as.length;
};
/**
 * @internal
 */
var unsafeUpdateAt = function(i, a, as) {
    if (as[i] === a) {
        return as;
    } else {
        var xs = fromReadonlyNonEmptyArray(as);
        xs[i] = a;
        return xs;
    }
};
// -------------------------------------------------------------------------------------
// constructors
// -------------------------------------------------------------------------------------
/**
 * Return a `ReadonlyNonEmptyArray` from a `ReadonlyArray` returning `none` if the input is empty.
 *
 * @category conversions
 * @since 2.5.0
 */
var fromReadonlyArray = function(as) {
    return isNonEmpty(as) ? some(as) : none;
};
/**
 * @category constructors
 * @since 2.5.0
 */
var of = singleton;
/**
 * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types
 * use the type constructor `F` to represent some computational context.
 *
 * @category mapping
 * @since 2.5.0
 */
var map = function(f) {
    return mapWithIndex(function(_, a) {
        return f(a);
    });
};
/**
 * @category mapping
 * @since 2.5.0
 */
var mapWithIndex = function(f) {
    return function(as) {
        var out = [f(0, head(as))];
        for (var i = 1; i < as.length; i++) {
            out.push(f(i, as[i]));
        }
        return out;
    };
};
/**
 * @category folding
 * @since 2.5.0
 */
var reduce = function(b, f) {
    return reduceWithIndex(b, function(_, b, a) {
        return f(b, a);
    });
};
/**
 * @category folding
 * @since 2.5.0
 */
var reduceWithIndex = function(b, f) {
    return function(as) {
        return as.reduce(function(b, a, i) {
            return f(i, b, a);
        }, b);
    };
};
/**
 * @category Comonad
 * @since 2.6.3
 */
var extract = head$1;
// -------------------------------------------------------------------------------------
// utils
// -------------------------------------------------------------------------------------
/**
 * @since 2.5.0
 */
var head = extract;

function filter(predicate) {
    return filterWithIndex(function(_, a) {
        return predicate(a);
    });
}
/**
 * Use [`filterWithIndex`](./ReadonlyArray.ts.html#filterwithindex) instead.
 *
 * @category zone of death
 * @since 2.5.0
 * @deprecated
 */
var filterWithIndex = function(predicate) {
    return function(as) {
        return fromReadonlyArray(as.filter(function(a, i) {
            return predicate(i, a);
        }));
    };
};

export {
    isNonEmpty as a, head as b, filter as c, constTrue as d, constFalse as e, flow as f, dual as g, has as h, identity as i, constant as j, isNone as k, left as l, unsafeUpdateAt as m, none as n, isOutOfBound as o, pipe as p, isSome as q, right as r, some as s, isLeft as t, unsafeCoerce as u, map as v, reduce as w, of as x
};
//# sourceMappingURL=ReadonlyNonEmptyArray-3599e877.js.map