import {
    c as concatAll,
    m as map,
    f as first
} from '../../../Option-87dfe66c.js';
import {
    p as pipe,
    i as identity
} from '../../../ReadonlyNonEmptyArray-3599e877.js';
import {
    g as getMonoid
} from '../../../Record-28bf195d.js';
import {
    b as bimap
} from '../../../Tuple-cda9b213.js';
import {
    f as firstRight
} from '../../../fp-utils-57808465.js';
import {
    isBoolValue,
    isNumberValue,
    isStringValue,
    isNullValue,
    isArrayValue,
    isStructValue
} from '../struct-refined-types.js';
import '../../../ReadonlyRecord-da7aaead.js';
import '../../../string-04247af1.js';
import 'lodash';
import 'ricos-schema';

const mergeJsonMap = getMonoid(first());
const toRecord = ([k, v]) => ({
    [k]: v
});
const convertStructToJson = (message) => pipe(
    message.fields,
    Object.entries,
    map(bimap(convertValueToJson, identity)),
    map(toRecord),
    concatAll(mergeJsonMap)
);
const convertValueToJson = (message) => firstRight(message, null, [
    [isBoolValue, ({
        boolValue
    }) => boolValue],
    [isNumberValue, ({
        numberValue
    }) => numberValue],
    [isStringValue, ({
        stringValue
    }) => stringValue],
    [isNullValue, () => null],
    [isArrayValue, (m) => convertListToJson(m.listValue || {
        values: []
    })],
    [isStructValue, (m) => convertStructToJson(m.structValue || {
        fields: {}
    })]
]);
const convertListToJson = (message) => pipe(message.values, map(convertValueToJson));

export {
    convertStructToJson
};
//# sourceMappingURL=convertStructToJson.js.map