import {
    linkify
} from './linkify.js';

const HttpUrlPattern = new RegExp(
    "^(https?:\\/\\/)?((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|((\\d{1,3}\\.){3}\\d{1,3}))(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*(\\?[;&a-z\\d%_.~+=-]*)?(\\#[-a-z\\d_]*)?$",
    "i"
);
const isValidEmail = (email) => {
    return !!String(email).toLowerCase().match(
        // eslint-disable-next-line max-len
        /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
    );
};
const isValidExactUrl = (str) => HttpUrlPattern.test(str);
const isValidTelUrl = (str) => /^tel:[0-9-()+#*]+$/.test(str);
const containsUrl = (url) => url && url[0] !== "#" && linkify.test(url);
const isValidHref = (value) => containsUrl(value) || isValidEmail(value) || isValidTelUrl(value);
const normalizeHref = (value) => {
    var _a, _b;
    if (isValidTelUrl(value)) {
        return value;
    }
    const [urlValue, anchor] = value.split("#");
    const normalizedUrl = urlValue && linkify.match(urlValue) && ((_b = (_a = linkify.match(urlValue)) == null ? void 0 : _a[0]) == null ? void 0 : _b.url);
    if (normalizedUrl === null) {
        return void 0;
    }
    return anchor ? `${normalizedUrl}#${anchor}` : normalizedUrl;
};
const getUrlMatches = (text) => linkify.match(text) || [];
const normalizeUrl = (url) => {
    var _a;
    const result = url && linkify.match(url) && ((_a = linkify.match(url)) == null ? void 0 : _a[0]);
    if (result && ["http:", "https:", ""].includes(result.schema)) {
        return result.url;
    }
    return null;
};
const startsWithHttps = (url) => /^https:/.test(url);
const startsWithHttp = (url) => /^http:/.test(url);
const getHost = (url) => url && !startsWithHttps(url) && !startsWithHttp(url) ? new URL(`http://${url}`).host : new URL(url).host;
const hasProtocol = (url) => /^[a-z]+:/i.test(url);

export {
    containsUrl,
    getHost,
    getUrlMatches,
    hasProtocol,
    isValidExactUrl,
    isValidHref,
    isValidTelUrl,
    normalizeHref,
    normalizeUrl,
    startsWithHttps
};
//# sourceMappingURL=urlValidators.js.map