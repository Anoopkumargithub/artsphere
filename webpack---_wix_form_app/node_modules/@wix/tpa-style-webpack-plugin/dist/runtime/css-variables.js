var __assign = (this && this.__assign) || function() {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import {
    StyleParamType
} from '@wix/tpa-settings';
import {
    generateTPAParams
} from './generateTPAParams';
import {
    getProcessor
} from './processor';
import {
    cssFunctions,
    toRgbParts
} from './cssFunctions';
import {
    defaultOptions,
    plugins
} from './common';
import {
    wixStylesFontUtils
} from './utils/wixStyleFontUtils';
import {
    withDefaultPxUnit
} from './utils/utils';
var prefixes = {
    siteColors: 'wix',
    textPresets: 'wix-font', // --wix-font-{name}
};
var isTextPreset = function(siteTextPresets, key) {
    return siteTextPresets[key];
};
var isFontWeight = function(key) {
    return ['LIGHT', 'MEDIUM', 'STRONG'].includes(key);
};
var isGlobalFont = function(siteTextPresets, key) {
    return isTextPreset(siteTextPresets, key) || isFontWeight(key);
};
var isGlobalColor = function(key) {
    return key.startsWith('color-');
};
var emitCssVariable = function(paramKey, paramValue, prefix) {
    if (prefix === void 0) {
        prefix = '';
    }
    var normalizedKey = paramKey.replace(/:/g, '-');
    var key = "--".concat(prefix ? "".concat(prefix, "-") : '').concat(normalizedKey);
    return {
        key: key,
        value: paramValue,
    };
};
var toStylesheet = function(definitions) {
    return Object.entries(definitions)
        .map(function(_a) {
            var key = _a[0],
                value = _a[1];
            return "".concat(key, ": ").concat(value, ";");
        })
        .join('\n');
};
export function getComponentCssVariables(styles, customExpressions, cssVars, customOptions, defaults, customCssVars) {
    var cssVariables = {};
    var options = __assign(__assign({}, defaultOptions), (customOptions || {}));
    var tpaParams = generateTPAParams(styles.siteColors, styles.siteTextPresets, styles.styleParams, options, defaults);
    // globals
    cssVariables['--wix-direction'] = options.isRTL ? 'rtl' : 'ltr';
    // numbers
    Object.entries(tpaParams.numbers).forEach(function(_a) {
        var key = _a[0],
            value = _a[1];
        var cssVariable = emitCssVariable(key, cssFunctions.number(value));
        cssVariables[cssVariable.key] = cssVariable.value;
    });
    // strings
    Object.entries(tpaParams.strings).forEach(function(_a) {
        var key = _a[0],
            font = _a[1];
        var cssVariable = emitCssVariable(key, font.value);
        cssVariables[cssVariable.key] = cssVariable.value;
    });
    // colors
    var colorKeys = Object.keys(defaults !== null && defaults !== void 0 ? defaults : {})
        .filter(function(key) {
            return defaults[key].type === StyleParamType.Color;
        })
        .map(function(key) {
            return defaults[key].key || key;
        });
    Object.entries(tpaParams.colors)
        .filter(function(_a) {
            var key = _a[0];
            return styles.styleParams.colors[key] || colorKeys.includes(key);
        })
        .forEach(function(_a) {
            var key = _a[0],
                color = _a[1];
            try {
                var rgbParts = toRgbParts(cssFunctions.color(color, tpaParams));
                var cssVariable = emitCssVariable(key, rgbParts.full);
                cssVariables[cssVariable.key] = cssVariable.value;
                cssVariables["".concat(cssVariable.key, "-rgb")] = rgbParts.rgb;
                cssVariables["".concat(cssVariable.key, "-opacity")] = rgbParts.opacity;
            } catch (e) {
                // swallow
            }
        });
    // fonts
    Object.entries(tpaParams.fonts)
        .filter(function(_a) {
            var key = _a[0];
            return !isGlobalFont(styles.siteTextPresets, key);
        })
        .forEach(function(_a) {
            var key = _a[0],
                font = _a[1];
            try {
                var cssVariable = emitCssVariable(key, cssFunctions.font(font, tpaParams));
                cssVariables[cssVariable.key] = cssVariable.value;
                cssVariables["".concat(cssVariable.key, "-style")] = font.style;
                cssVariables["".concat(cssVariable.key, "-variant")] = font.variant;
                cssVariables["".concat(cssVariable.key, "-weight")] = font.weight;
                cssVariables["".concat(cssVariable.key, "-size")] = withDefaultPxUnit(font.size);
                cssVariables["".concat(cssVariable.key, "-line-height")] = withDefaultPxUnit(font.lineHeight);
                cssVariables["".concat(cssVariable.key, "-family")] = wixStylesFontUtils.stringifyFontFamily(font.family);
                cssVariables["".concat(cssVariable.key, "-text-decoration")] = font.underline ? 'underline' : 'none';
            } catch (e) {
                // swallow
            }
        });
    // custom expressions
    var processor = getProcessor({
        cssVars: cssVars,
        plugins: plugins
    });
    Object.entries(customExpressions).forEach(function(_a) {
        var key = _a[0],
            expression = _a[1];
        try {
            var value = processor.process({
                part: expression,
                tpaParams: tpaParams,
            });
            var cssVariable = emitCssVariable(key, value);
            cssVariables[cssVariable.key] = cssVariable.value;
        } catch (e) {
            // swallow
        }
    });
    if (typeof customCssVars === 'function') {
        var customCssVarsValue = customCssVars({
            styleParams: tpaParams,
            isMobile: options.isMobile,
            isRTL: options.isRTL,
        });
        Object.entries(customCssVarsValue).forEach(function(_a) {
            var key = _a[0],
                value = _a[1];
            var cssVariable = emitCssVariable(key, String(value));
            cssVariables[cssVariable.key] = cssVariable.value;
        });
    }
    return {
        variables: cssVariables,
        stylesheet: toStylesheet(cssVariables),
    };
}
export function getSiteCssVariables(siteColors, siteTextPresets) {
    var cssVariables = {};
    var emptyStyleParams = {
        booleans: {},
        colors: {},
        fonts: {},
        numbers: {},
        googleFontsCssUrl: '',
    };
    var tpaParams = generateTPAParams(siteColors, siteTextPresets, emptyStyleParams, defaultOptions, {});
    // colors
    Object.entries(tpaParams.colors)
        .filter(function(_a) {
            var key = _a[0];
            return isGlobalColor(key);
        })
        .forEach(function(_a) {
            var key = _a[0],
                color = _a[1];
            var rgbParts = toRgbParts(cssFunctions.color(color, tpaParams));
            var cssVariable = emitCssVariable(key, rgbParts.full, prefixes.siteColors);
            cssVariables[cssVariable.key] = cssVariable.value;
        });
    // fonts
    Object.entries(tpaParams.fonts)
        .filter(function(_a) {
            var key = _a[0];
            return isGlobalFont(siteTextPresets, key);
        })
        .forEach(function(_a) {
            var key = _a[0],
                font = _a[1];
            var cssVariable = emitCssVariable(key, cssFunctions.font(font, tpaParams), prefixes.textPresets);
            cssVariables[cssVariable.key] = cssVariable.value;
            cssVariables["".concat(cssVariable.key, "-style")] = font.style;
            cssVariables["".concat(cssVariable.key, "-variant")] = font.variant;
            cssVariables["".concat(cssVariable.key, "-weight")] = font.weight;
            cssVariables["".concat(cssVariable.key, "-size")] = withDefaultPxUnit(font.size);
            cssVariables["".concat(cssVariable.key, "-line-height")] = withDefaultPxUnit(font.lineHeight);
            cssVariables["".concat(cssVariable.key, "-family")] = wixStylesFontUtils.stringifyFontFamily(font.family);
            cssVariables["".concat(cssVariable.key, "-text-decoration")] = font.underline ? 'underline' : 'none';
        });
    return {
        variables: cssVariables,
        stylesheet: toStylesheet(cssVariables),
    };
}
//# sourceMappingURL=css-variables.js.map