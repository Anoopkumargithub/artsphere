export function applyNestedForms(form, nestedFormsById) {
    if (!form.nestedForms && !nestedFormsById) {
        return form;
    }
    const nestedFormsByTarget = getNestedFormsByTarget(form);
    return {
        ...form,
        fields: form.fields ? .map((field) => {
            const fieldTarget = field.target;
            if (!fieldTarget) {
                return field;
            }
            const nestedFormId = field.nestedFormId;
            if (!nestedFormId) {
                return field;
            }
            const nestedForm = nestedFormsByTarget ? .[fieldTarget] ? ? nestedFormsById ? .[nestedFormId];
            if (nestedForm) {
                return { ...field,
                    view: { ...field.view,
                        form: nestedForm
                    }
                };
            }
            return field;
        }),
    };
}
export function getNestedFormsByTarget(form) {
    return form.nestedForms ? .reduce((byTarget, {
        targets,
        form: nestedForm
    }) => {
        if (!nestedForm || !targets) {
            return byTarget;
        }
        for (const target of targets) {
            byTarget[target] = nestedForm;
        }
        return byTarget;
    }, {});
}
export function getNestedFormArray(formsByTarget) {
    return Object.keys(formsByTarget).map((target) => {
        return {
            targets: [target],
            form: formsByTarget[target]
        };
    });
}
//# sourceMappingURL=apply-nested-forms.js.map