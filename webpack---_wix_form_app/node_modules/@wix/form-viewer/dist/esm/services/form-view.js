import {
    GRID_DEFAULTS
} from '../constants/grid';
export function createFormView({
    form,
    path = '',
    stepId,
    recursive = true,
    styleParams,
    includeHiddenFields = false,
    isMobile = false,
}) {
    const step = stepId ?
        form.steps ? .find(({
            id
        }) => id === stepId) :
        form.steps ? .[0];
    const layout = step ? .layout ? ? {};
    const fields = form.fields ? ? [];
    const nameView = form.properties ? .name ? ? '';
    const fieldViews = fields
        .filter((field) => includeHiddenFields || !field.hidden)
        .filter((field) => layout ? .large ? .items ? .find((item) => field.id === item.fieldId))
        .reduce((result, field) => {
            const fieldView = createFieldView(field, layout, path, recursive, styleParams, isMobile);
            if (fieldView) {
                result.push(fieldView);
            }
            return result;
        }, [])
        .sort(sortFieldViewsByColumn)
        .sort(sortFieldViewsByRow);
    const gridView = createGridView(layout, styleParams, isMobile);
    let formView = {
        name: nameView,
        grid: gridView,
        fields: fieldViews,
    };
    if (isMobile) {
        formView = applyMobileLayout(formView);
    }
    return formView;
}

function applyMobileLayout(form) {
    const {
        fields
    } = form.fields.reduce((state, field) => {
        const layout = {
            width: form.grid.columns,
            height: field.layout.height,
            column: 0,
            row: state.row,
        };
        state.fields.push({ ...field,
            layout
        });
        state.row += field.layout.height;
        return state;
    }, {
        row: 0,
        fields: []
    });
    return { ...form,
        fields
    };
}
export function createFieldView(field, layout, path, recursive, styleParams, isMobile) {
    if (!(field.id && field.view ? .fieldType)) {
        return;
    }
    const breakpoint = layout ? .large ? ? {};
    const items = breakpoint.items ? ? [];
    const item = items.find(({
        fieldId
    }) => fieldId === field.id);
    if (!item) {
        return;
    }
    const layoutView = createLayoutView(item);
    if (!layoutView) {
        return;
    }
    const fieldTarget = field.target || '';
    const fieldPath = path ? `${path}/${fieldTarget}` : fieldTarget;
    const propertiesView = createPropertiesView(field, fieldPath, recursive, styleParams, isMobile);
    return {
        id: field.id,
        fieldType: field.view.fieldType,
        properties: propertiesView,
        layout: layoutView,
        target: fieldTarget,
        path: fieldPath,
    };
}
export function createPropertiesView(field, path, recursive, styleParams, isMobile) {
    const {
        hidden,
        pii,
        nestedFormId
    } = field;
    const {
        label,
        disabled,
        defaultValue,
        fieldType,
        form,
        ...rest
    } = field.view ? ? {};
    const {
        required
    } = field.validation ? ? {};
    const formView = form && recursive ?
        createFormView({
            form,
            path,
            recursive: false,
            styleParams,
            isMobile,
        }) :
        undefined;
    return {
        label: label ? ? undefined,
        disabled: disabled ? ? false,
        hidden: hidden ? ? false,
        required: required ? ? false,
        pii: pii ? ? false,
        defaultValue: defaultValue ? ? undefined,
        validation: field.validation ? ? {},
        nestedFormId: nestedFormId ? ? undefined,
        form: formView,
        ...rest,
    };
}

function createLayoutView(layout) {
    const {
        row,
        column,
        width,
        height
    } = layout;
    if (row === null ||
        row === undefined ||
        column === null ||
        column === undefined ||
        width === null ||
        width === undefined ||
        height === null ||
        height === undefined) {
        return;
    }
    return {
        row,
        column,
        width,
        height,
        static: layout.static
    };
}

function createGridView(layout, styleParams, isMobile) {
    const {
        columns,
        rowHeight,
        padding,
        margin
    } = layout ? .large ? ? {};
    let {
        vertical: marginVertical,
        horizontal: marginHorizontal
    } = margin ? ? {};
    const {
        vertical: paddingVertical,
        horizontal: paddingHorizontal
    } = padding ? ? {};
    const gridRowHeight = rowHeight ? ? GRID_DEFAULTS.rowHeight;
    if (styleParams) {
        marginVertical = styleParams ? .numbers ? .rowSpacing;
        marginHorizontal = styleParams ? .numbers ? .columnSpacing;
    }
    if (isMobile) {
        marginHorizontal = 0;
    }
    return {
        columns: columns ? ? GRID_DEFAULTS.columns,
        rowHeight: gridRowHeight,
        margin: {
            vertical: marginVertical ? ? GRID_DEFAULTS.margin.vertical,
            horizontal: marginHorizontal ? ? GRID_DEFAULTS.margin.horizontal,
        },
        padding: {
            vertical: paddingVertical ? ? GRID_DEFAULTS.padding.vertical,
            horizontal: paddingHorizontal ? ? GRID_DEFAULTS.padding.horizontal,
        },
    };
}

function sortFieldViewsByRow(fieldA, fieldB) {
    return fieldA.layout.row - fieldB.layout.row;
}

function sortFieldViewsByColumn(fieldA, fieldB) {
    return fieldA.layout.column - fieldB.layout.column;
}
//# sourceMappingURL=form-view.js.map