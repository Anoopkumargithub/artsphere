import {
    getNestedFormArray,
    getNestedFormsByTarget,
} from './apply-nested-forms';
export function applyFormOverrides(form, overrides, recursive = true) {
    const nestedFormsByTarget = getNestedFormsByTarget(form);
    const fields = (form.fields ? ? []).map((field) => {
        const override = getOverride({
            id: field.id,
            target: field.target,
            overrides,
        });
        if (!override) {
            return field;
        }
        if (field.target && field.nestedFormId && recursive) {
            const nestedForm = nestedFormsByTarget ? .[field.target];
            if (nestedForm) {
                nestedFormsByTarget[field.target] = applyFormOverrides(nestedForm, override, false);
            }
            return field;
        }
        let validation = field.validation;
        let options = {};
        if (Array.isArray(override.countries)) {
            validation = {
                ...validation,
                string: {
                    ...validation ? .string,
                    enum : override.countries,
                },
            };
            options = override.countries ?
                {
                    options: override.countries ? .map((country) => ({
                        value: country
                    })),
                } :
                {};
        }
        return {
            ...field,
            ...pick(override, 'hidden'),
            view: {
                ...field.view,
                ...pick(override, 'label'),
                ...pick(override, 'autocomplete'),
                ...options,
            },
            validation: {
                ...validation,
                ...pick(override, 'required'),
            },
        };
    });
    const nestedForms = nestedFormsByTarget ?
        getNestedFormArray(nestedFormsByTarget) :
        undefined;
    return {
        ...form,
        fields,
        ...(nestedForms ? {
            nestedForms
        } : {}),
    };
}

function pick(override, key) {
    return override.hasOwnProperty(key) ? {
        [key]: override[key]
    } : {};
}
const getOverride = ({
    target,
    id,
    overrides,
}) => {
    if (target && target in overrides) {
        return overrides[target];
    }
    if (id && id in overrides) {
        return overrides[id];
    }
    return undefined;
};
//# sourceMappingURL=form-overrides.js.map