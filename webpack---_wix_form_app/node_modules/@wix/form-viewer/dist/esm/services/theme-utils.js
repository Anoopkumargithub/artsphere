export const getTheme = ({
    useSiteTheme,
    style,
}) => {
    if (useSiteTheme && style) {
        const {
            styleParams = {}
        } = style;
        const inputBackgroundColor = styleParams.colors ? .inputBackgroundColor ? ?
            getSiteColor(style, 'color-1');
        const paragraphColor = styleParams.colors ? .paragraphColor ? ? getSiteColor(style, 'color-5');
        const linkColor = styleParams.colors ? .linkColor ? ? getSiteColor(style, 'color-8');
        const siteTextFontFamily = getSiteTextPresets(style, 'Body-M') ? .fontFamily;
        const textFontValue = getSiteTextPresets(style, 'Body-M') ? .value;
        const headerOneFontFamily = styleParams.fonts ? .headerOneFont ? .family ? ? siteTextFontFamily;
        const headerOneFontSize = styleParams.fonts ? .headerOneFont ? .size ? ? 28;
        const headerOneFontValue = styleParams.fonts ? .headerOneFont ? .value ? ? textFontValue;
        const headerTwoFontFamily = styleParams.fonts ? .headerTwoFont ? .family ? ? siteTextFontFamily;
        const headerTwoFontSize = styleParams.fonts ? .headerTwoFont ? .size ? ? 20;
        const headerTwoFontValue = styleParams.fonts ? .headerTwoFont ? .value ? ? textFontValue;
        const paragraphFontFamily = styleParams.fonts ? .paragraphFont ? .family ? ? siteTextFontFamily;
        const paragraphFontSize = styleParams.fonts ? .paragraphFont ? .size ? ? 16;
        const paragraphFontValue = styleParams.fonts ? .paragraphFont ? .value ? ? textFontValue;
        return {
            ...style,
            styleParams: {
                ...styleParams,
                colors: {
                    ...styleParams.colors,
                    inputBackgroundColor,
                    paragraphColor,
                    linkColor,
                },
                fonts: {
                    ...styleParams.fonts,
                    headerOneFont: {
                        family: headerOneFontFamily,
                        size: headerOneFontSize,
                        fontStyleParam: false,
                        value: headerOneFontValue,
                        style: {
                            bold: false,
                            italic: false,
                            underline: false
                        },
                    },
                    headerTwoFont: {
                        family: headerTwoFontFamily,
                        size: headerTwoFontSize,
                        fontStyleParam: false,
                        value: headerTwoFontValue,
                        style: {
                            bold: false,
                            italic: false,
                            underline: false
                        },
                    },
                    paragraphFont: {
                        family: paragraphFontFamily,
                        size: paragraphFontSize,
                        fontStyleParam: false,
                        value: paragraphFontValue,
                        style: {
                            bold: false,
                            italic: false,
                            underline: false
                        },
                    },
                },
            },
        };
    }
    if (style) {
        return style;
    }
    return undefined;
};
const getSiteColor = (style, colorName) => {
    return style.siteColors ? .find(({
        reference
    }) => {
        return reference === colorName;
    });
};
const getSiteTextPresets = (style, textPreset) => (style.siteTextPresets ?
    style.siteTextPresets[textPreset] :
    {});
//# sourceMappingURL=theme-utils.js.map