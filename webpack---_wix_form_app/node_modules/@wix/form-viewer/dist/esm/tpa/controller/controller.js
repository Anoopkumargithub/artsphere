import {
    createErrorMonitor
} from './error-monitor';
import {
    toError
} from '../common/error';
import {
    getSimulateWidgetError,
    simulateControllerError,
} from './simulate-error';
import {
    getIsSSR,
    getSiteLanguage
} from './wix-code-api';
import once from 'once';
import {
    getAppParams
} from './app-params';
import {
    ControllerError
} from './errors';
import {
    normalizeFormIds
} from './normalize-form-ids';
import {
    createActions
} from './create-actions';
import {
    requestCaptchaToken
} from '../../services/captcha-token';
import {
    validateForm
} from './validate-form';
import {
    hasForm
} from './has-form';
import {
    getInitialData
} from './get-initial-data';
import {
    isFormEmptyBuilder
} from './form-utils';
import {
    EXPERIMENTS
} from '../../constants/experiments';
import {
    getFieldPropertiesByTarget,
    getFormName,
    getFormSteps,
} from '@wix/form-schema';
import {
    getSerializableHttpError,
    isHttpError
} from './http-error';
export {
    Kind as FormKind
}
from '@wix/ambassador-forms-v4-form/types';
const simulateErrorOnce = once(simulateControllerError);
let appLoadStarted = false;
export const initFormController = async (flowAPI, {
    formId,
    formKind,
    namespace,
    enableMultilineAddress,
    throwWhenFormMissing = true,
    useListInsteadQuery = false,
    useWarmupData = false,
}) => {
    const {
        controllerConfig,
        environment,
        httpClient
    } = flowAPI;
    const errorMonitor = createErrorMonitor(controllerConfig);
    const {
        wixCodeApi,
        platformAPIs,
        appParams,
        essentials
    } = controllerConfig;
    const setProps = controllerConfig.setProps;
    try {
        const {
            appVersion,
            appName,
            appDefinitionId
        } = getAppParams(appParams);
        const fedopsLogger = platformAPIs ? .fedOpsLoggerFactory ? .getLoggerForWidget({
            appId: appDefinitionId,
            widgetId: 'form-viewer',
        });
        if (!appLoadStarted &&
            typeof fedopsLogger ? .interactionStarted === 'function') {
            !appLoadStarted &&
                fedopsLogger ? .interactionStarted ? .(`app-loaded-${namespace}`);
            appLoadStarted = true;
        }
        simulateErrorOnce(controllerConfig);
        const locale = getSiteLanguage(wixCodeApi);
        const formIds = toFormIds(formId, errorMonitor);
        const warmupDataKey = `form-viewer-${controllerConfig.compId}`;
        const useWarmUpAndListFormsEcom = flowAPI.experiments.enabled(EXPERIMENTS.USE_WARMUP_DATA_AND_LIST_FORMS_ECOM);
        const useWarmUpAndListFormsPPQuizzes = flowAPI.experiments.enabled(EXPERIMENTS.USE_WARMUP_DATA_AND_LIST_FORMS_PP_QUIZZES);
        const shouldUseWarmupData = getIsSSR(wixCodeApi) &&
            (useWarmupData ||
                useWarmUpAndListFormsEcom ||
                useWarmUpAndListFormsPPQuizzes);
        const shouldUseListInsteadOfQuery = useListInsteadQuery ||
            useWarmUpAndListFormsEcom ||
            useWarmUpAndListFormsPPQuizzes;
        let data;
        if (shouldUseWarmupData) {
            data = await getInitialData({
                formIds,
                formKind,
                namespace,
                enableMultilineAddress,
                throwWhenFormMissing,
                useListInsteadQuery: shouldUseListInsteadOfQuery,
                locale,
                httpClient,
                errorMonitor,
            });
            wixCodeApi.window.warmupData.set(warmupDataKey, data);
        } else {
            data =
                wixCodeApi.window.warmupData.get(warmupDataKey) ? ?
                (await getInitialData({
                    formIds,
                    formKind,
                    namespace,
                    enableMultilineAddress,
                    throwWhenFormMissing,
                    useListInsteadQuery: shouldUseListInsteadOfQuery,
                    locale,
                    httpClient,
                    errorMonitor,
                }));
        }
        const createAsyncAction = (action) => async (correlationId, args) => {
            setProps({
                wfResults: [correlationId, 'pending']
            });
            try {
                const result = await action(...args);
                setProps({
                    wfResults: [correlationId, 'success', result]
                });
            } catch (error) {
                const resolvedError = resolveError(error);
                setProps({
                    wfResults: [correlationId, 'failure', resolvedError],
                });
            }
        };
        const instance = wixCodeApi.site.getAppToken ? .(appDefinitionId);
        const wfConfig = {
            instance,
            locale,
            translations: data.translations,
            tpaTranslations: data.tpaTranslations,
            localeDataset: data.localeDataset,
            formsById: data.formsById,
            simulateError: getSimulateWidgetError(controllerConfig),
            isSSR: getIsSSR(wixCodeApi),
            appVersion,
            appName,
            appDefinitionId,
            isMobile: wixCodeApi.window.formFactor === 'Mobile',
            isRTL: environment.isRTL,
            experiments: essentials.experiments.all(),
            currency: getCurrency(flowAPI),
        };
        const wfResults = [];
        const requestCaptcha = requestCaptchaToken({
            wixCodeApi,
            platformAPIs
        });
        const actions = createActions(data.formsById, {
            httpClient,
            fedopsLogger,
            requestCaptcha,
            wixCodeApi,
        });
        const asyncActions = Object.keys(actions).reduce((result, actionName) => {
            result[actionName] = createAsyncAction(actions[actionName]);
            return result;
        }, {});
        const wfActions = {
            ...asyncActions,
            appLoadEnded: () => fedopsLogger ? .interactionEnded ? .(`app-loaded-${namespace}`),
        };
        setProps({
            wfConfig,
            wfActions,
            wfResults
        });
        return {
            isFormEmpty: isFormEmptyBuilder(data.formsById),
            validateForm: validateForm(data.formsById),
            hasForm: hasForm(data.formsById),
            getFieldPropertiesByTarget: (_formId, options) => {
                const form = data.formsById[_formId];
                return form ? getFieldPropertiesByTarget(form, options) : undefined;
            },
            getFormName: (_formId) => {
                const form = data.formsById[_formId];
                return form ? getFormName(form) : undefined;
            },
            getFormSteps: (_formId) => {
                const form = data.formsById[_formId];
                return form ? getFormSteps(form) : undefined;
            },
        };
    } catch (error) {
        if (error instanceof ControllerError) {
            throw error;
        }
        console.error(error);
        const errorWithMessage = toError(error);
        const errorId = errorMonitor.captureException(errorWithMessage);
        console.log(`Error id: ${errorId}`);
        const controllerError = {
            id: errorId,
            message: errorWithMessage.message
        };
        setProps({
            wfConfig: {
                controllerError,
            },
            wfActions: {},
            wfResults: [],
        });
        throw error;
    }
};

function getCurrency(flowAPI) {
    const {
        controllerConfig,
        getCurrencyFormatter
    } = flowAPI;
    const {
        wixCodeApi
    } = controllerConfig;
    const currency = wixCodeApi.site.currency;
    if (!currency) {
        return {};
    }
    if (!getCurrencyFormatter) {
        return {};
    }
    const formattedCurrencyParts = getCurrencyFormatter({
        parts: true
    })({
        currency,
        value: '',
    });
    return {
        sign: formattedCurrencyParts.find((part) => part.type === 'currency') ?
            .value,
        code: currency,
    };
}

function toFormIds(formId, errorMonitor) {
    try {
        return normalizeFormIds(formId);
    } catch (error) {
        errorMonitor.captureException(toError(error));
        throw new ControllerError('Invalid formId', error);
    }
}

function resolveError(error) {
    return isHttpError(error) ? getSerializableHttpError(error) : error;
}
//# sourceMappingURL=controller.js.map