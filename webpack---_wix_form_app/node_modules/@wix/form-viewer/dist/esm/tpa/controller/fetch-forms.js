import {
    queryForms,
    listForms
} from '@wix/ambassador-forms-v4-form/http';
import {
    toError
} from '../common/error';
import {
    extractHttpErrorDetails,
    isHttpError
} from './http-error';
import {
    ControllerError
} from './errors';
import {
    Fieldset
} from '@wix/ambassador-forms-v4-form/types';
export const fetchForms = async ({
    formIds,
    formKind,
    namespace,
    httpClient,
    errorMonitor,
    throwWhenFormMissing = true,
    useListInsteadQuery = false,
}) => {
    const getForms = async () => {
        try {
            const {
                data
            } = await httpClient.request(useListInsteadQuery ?
                listForms({
                    formIds,
                    namespace,
                    kind: formKind,
                    fieldsets: [Fieldset.NESTED_FORMS],
                }) :
                queryForms({
                    query: {
                        filter: {
                            id: {
                                $in: formIds,
                            },
                            ...(namespace ? {
                                namespace
                            } : {}),
                        },
                    },
                    fieldsets: [Fieldset.NESTED_FORMS],
                    ...(formKind ? {
                        kind: formKind
                    } : {}),
                }));
            return data.forms ? ? [];
        } catch (error) {
            if (isHttpError(error)) {
                const httpError = extractHttpErrorDetails(error);
                errorMonitor.captureException(new Error(`Could not fetch forms`), {
                    contexts: {
                        ...(httpError && {
                            httpError
                        }),
                    },
                });
            } else {
                errorMonitor.captureException(toError(error));
            }
            throw new ControllerError('Could not fetch forms', error);
        }
    };
    const forms = await getForms();
    const formsById = forms.reduce((result, form) => {
        if (form.id) {
            result[form.id] = form;
        }
        return result;
    }, {});
    const hasMissingForm = formIds.find((formId) => !formsById[formId]);
    if (throwWhenFormMissing && hasMissingForm) {
        const errorMessage = 'One or more forms are missing in the server response';
        errorMonitor.captureException(new Error(errorMessage));
        throw new ControllerError(errorMessage);
    }
    return formsById;
};
//# sourceMappingURL=fetch-forms.js.map