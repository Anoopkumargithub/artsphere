import React from 'react';
import {
    toError
} from '../common/error';
import ErrorFallback from './error-fallback';
import InvalidStateError from './invalid-state-error';
class ErrorBoundary extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            error: undefined,
            errorId: undefined
        };
    }
    reportToSentry(error) {
        const sentry = new this.props.host.LazySentry({
            dsn: 'https://08678f87b978414baa2fa34f83228d19@sentry.wixpress.com/4108',
            environment: 'Widget',
            beforeSend: (event) => {
                const errorId = event.event_id;
                this.setState({
                    errorId
                });
                console.log(`Error id: ${errorId}`);
                return event;
            },
        });
        sentry.configureScope((scope) => {
            if (typeof window !== undefined) {
                const url = window ? .location ? .href;
                url && scope.setTag('url', url);
            }
            // Error boundaries do not catch errors for server side rendering
            scope.setTag('isSSR', 'false');
            if (!this.props.wfConfig) {
                return;
            }
            const {
                appName,
                appVersion,
                appDefinitionId
            } = this.props.wfConfig;
            appName && scope.setTag('appName', appName);
            appVersion && scope.setTag('appVersion', appVersion);
            appDefinitionId && scope.setTag('appDefinitionId', appDefinitionId);
        });
        sentry.captureException(error);
    }
    static getDerivedStateFromError(error) {
        return {
            error
        };
    }
    componentDidCatch(error) {
        try {
            this.reportToSentry(error);
        } catch (exception) {
            console.error(exception);
        }
        try {
            this.props.onError ? .(toError(error));
        } catch (exception) {
            console.error(exception);
        }
    }
    render() {
        const {
            error,
            errorId
        } = this.state;
        if (error) {
            return (React.createElement(ErrorFallback, {
                errorMessage: toError(error).message,
                errorId: errorId
            }));
        }
        if (!this.props.wfConfig) {
            return React.createElement(InvalidStateError, null);
        }
        return this.props.children;
    }
}
export default ErrorBoundary;
//# sourceMappingURL=error-boundary.js.map