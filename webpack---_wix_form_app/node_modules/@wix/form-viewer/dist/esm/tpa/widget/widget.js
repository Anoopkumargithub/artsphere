import {
    FormTheme,
} from '@wix/form-fields';
import React, {
    useMemo
} from 'react';
import {
    FormViewerStatic
} from '../../components/root/form-viewer-static';
import FormLoadingError from './form-loading-error/form-loading-error';
import Providers from './providers';
import {
    useSimulateError
} from './use-simulate-error';
import {
    getForm
} from '../controller-props';
import {
    useFormActions
} from '../../hooks/use-form-actions';
import {
    getTheme
} from '../../services/theme-utils';
import {
    useHost
} from './host-context';
const Widget = ({
    forwardedRef,
    controller,
    i18n,
    formId,
    values,
    stepId,
    onChange,
    onStepIdChange,
    errors,
    onValidate,
    onError,
    useSiteTheme,
    externalData,
    overrides,
    bi,
    biFormFillSessionId,
    forcedState,
    httpClient,
    style,
    fields,
    WixRicosViewer,
    onSubmit,
    onSubmitSuccess,
    onSubmitFailure,
}) => {
    const {
        wfActions,
        wfConfig,
        wfResults
    } = controller;
    if (!wfActions || !wfConfig || !wfResults) {
        throw new Error('Missing controller props');
    }
    useSimulateError(wfConfig);
    const form = getForm(wfConfig, formId);
    const {
        formActions,
        inProgress
    } = useFormActions({
        wfActions,
        wfResults,
    });
    const host = useHost();
    const _style = useMemo(() => getTheme({
        useSiteTheme,
        style: style || host.style
    }), [useSiteTheme, style, host.style]);
    return (React.createElement(Providers, {
        i18n: i18n,
        config: wfConfig
    }, form ? (React.createElement(FormTheme, {
            style: _style,
            isMobile: wfConfig.isMobile
        },
        React.createElement(FormViewerStatic, {
            httpClient: httpClient,
            ref: forwardedRef,
            actions: formActions,
            config: wfConfig,
            form: form,
            values: values,
            stepId: stepId,
            onChange: onChange,
            onStepIdChange: onStepIdChange,
            errors: errors,
            onValidate: onValidate,
            onSubmit: onSubmit,
            onSubmitSuccess: onSubmitSuccess,
            onSubmitFailure: onSubmitFailure,
            isMobile: wfConfig.isMobile,
            isRTL: wfConfig.isRTL,
            i18n: i18n,
            bi: bi,
            biFormFillSessionId: biFormFillSessionId,
            externalData: externalData,
            translations: wfConfig.translations,
            localeDataset: wfConfig.localeDataset,
            overrides: overrides,
            forcedState: forcedState,
            style: _style,
            inProgress: inProgress,
            experiments: wfConfig.experiments,
            currency: wfConfig.currency,
            fields: fields,
            WixRicosViewer: WixRicosViewer
        }))) : (React.createElement(FormLoadingError, {
        formId: formId,
        onError: onError,
        isMobile: wfConfig.isMobile,
        isRTL: wfConfig.isRTL
    }))));
};
export default Widget;
//# sourceMappingURL=widget.js.map