import classNames from 'classnames';
import React, {
    forwardRef,
    useState,
    useMemo
} from 'react';
import {
    TRANSLATIONS_NAMESPACE
} from '../../constants/translations';
import {
    FormRoot
} from '../form';
import {
    FormViewerProvider
} from './form-viewer-provider';
import styles from './form-viewer-static.scss';
export const FormViewerStatic = forwardRef(({
    form,
    i18n,
    isMobile,
    isRTL,
    config = null,
    readOnly = false,
    externalData,
    bi,
    biFormFillSessionId,
    translations,
    localeDataset,
    forcedState,
    httpClient,
    style,
    experiments,
    currency,
    fields,
    WixRicosViewer,
    ...rest
}, forwardedRef) => {
    const {
        locale = 'en'
    } = config || {};
    useState(() => {
        i18n.addResources(locale, TRANSLATIONS_NAMESPACE, translations);
        i18n.addResources(locale, TRANSLATIONS_NAMESPACE, localeDataset);
    });
    const formWithValidSteps = useMemo(() => ({
        ...form,
        steps: form ? .steps ? .filter((step) => step.layout ? .large ? .items ? .length) || [],
    }), [form]);
    if (!form ? .fields ? .length) {
        return null;
    }
    return (React.createElement(React.StrictMode, null,
        React.createElement(FormViewerProvider, {
                httpClient: httpClient,
                i18n: i18n,
                bi: bi,
                biFormFillSessionId: biFormFillSessionId,
                form: formWithValidSteps,
                locale: locale,
                isRTL: isRTL,
                isMobile: isMobile,
                externalData: externalData,
                fields: fields,
                forcedState: forcedState,
                styleParams: style ? .styleParams,
                instance: config ? .instance,
                experiments: experiments,
                translationNamespace: TRANSLATIONS_NAMESPACE,
                currency: currency,
                WixRicosViewer: WixRicosViewer
            },
            React.createElement("form", {
                    "aria-label": formWithValidSteps.properties ? .name ? ? '',
                    id: `form-${formWithValidSteps.id}`,
                    "data-hook": `form-${formWithValidSteps.id}`,
                    className: classNames({
                        [styles.readOnly]: readOnly
                    }),
                    onSubmit: (e) => e.preventDefault()
                },
                React.createElement("fieldset", {
                        disabled: readOnly
                    },
                    React.createElement(FormRoot, {
                        form: formWithValidSteps,
                        forwardedRef: forwardedRef,
                        style: style,
                        ...rest
                    }))))));
});
//# sourceMappingURL=form-viewer-static.js.map