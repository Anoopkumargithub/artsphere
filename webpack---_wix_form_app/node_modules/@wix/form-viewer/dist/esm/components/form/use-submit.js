import {
    useCallback
} from 'react';
import {
    useBi
} from '@wix/form-fields';
import {
    submitForm as submitFormBi
} from '@wix/bi-logger-forms-data/v2';
import {
    deepEqual
} from 'fast-equals';
import {
    useAsyncValues,
} from './use-async-values';
export var BiFormSubmissionStatus;
(function(BiFormSubmissionStatus) {
    BiFormSubmissionStatus["INIT"] = "INITIATE_SUBMISSION";
    BiFormSubmissionStatus["VALIDATION_FAILURE"] = "VALIDATION_FAILURE";
    BiFormSubmissionStatus["FAILURE"] = "FAILURE";
    BiFormSubmissionStatus["SUCCESS"] = "SUCCESS";
})(BiFormSubmissionStatus || (BiFormSubmissionStatus = {}));
export const useSubmit = ({
    validateAndScrollToError,
    submitAction,
    onChange,
    onSubmit,
    onSubmitSuccess,
    onSubmitFailure,
    resetFormValues,
    values,
}) => {
    const {
        report
    } = useBi();
    const reportSubmitFormBi = useCallback((status) => report(submitFormBi({
        submission_status: status
    })), [report]);
    const {
        asyncValues,
        computeAsyncValues
    } = useAsyncValues();
    const submitForm = useCallback(async () => {
        const newValues = await computeAsyncValues(values);
        const hasAnyValueChanged = !deepEqual(newValues, values);
        if (hasAnyValueChanged) {
            onChange ? .(newValues);
        }
        const errors = await validateAndScrollToError(newValues);
        onSubmit ? .();
        reportSubmitFormBi(BiFormSubmissionStatus.INIT);
        if (errors ? .length) {
            reportSubmitFormBi(BiFormSubmissionStatus.VALIDATION_FAILURE);
            return;
        }
        let response;
        try {
            response = await submitAction(newValues);
        } catch (error) {
            onSubmitFailure ? .(error);
            reportSubmitFormBi(BiFormSubmissionStatus.FAILURE);
            throw new Error('Form submission failed');
        }
        if (response) {
            onSubmitSuccess ? .();
            reportSubmitFormBi(BiFormSubmissionStatus.SUCCESS);
            resetFormValues ? .();
        }
        return response;
    }, [
        validateAndScrollToError,
        onChange,
        submitAction,
        onSubmit,
        onSubmitFailure,
        onSubmitSuccess,
        resetFormValues,
        reportSubmitFormBi,
        computeAsyncValues,
        values,
    ]);
    return {
        asyncValues,
        submitForm
    };
};
//# sourceMappingURL=use-submit.js.map