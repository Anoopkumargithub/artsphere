import {
    useCallback
} from 'react';
import {
    formErrorAppearedDissapeared
} from '@wix/bi-logger-forms-platform-uou/v2';
import {
    mergeErrors,
    validate,
    getFieldErrors
} from '../../services';
import {
    runAdditionalValidation
} from '../../services/additional-field-validation';
export const reportErrorChanges = ({
    bi,
    existingErrors,
    newErrors,
    form,
}) => {
    const newlyAddedErrors = newErrors.filter((newError) => !existingErrors.find((error) => newError.errorPath === error.errorPath &&
        newError.errorType === error.errorType));
    const removedErrors = existingErrors.filter((error) => !newErrors.find((newError) => error.errorPath === newError.errorPath &&
        error.errorType === newError.errorType));
    newlyAddedErrors.forEach((error) => {
        const field = form.fields ? .find((_field) => _field.target === error.errorPath);
        bi.report(formErrorAppearedDissapeared({
            action_type: 'appeared',
            error_name: error.errorMessage,
            field_id: field ? .id,
            field_target: field ? .target && 'target' in field ? field.target : undefined,
            field_name: field ? .view ? .label,
        }));
    });
    removedErrors.forEach((error) => {
        const field = form.fields ? .find((_field) => _field.target === error.errorPath);
        bi.report(formErrorAppearedDissapeared({
            action_type: 'disappeared',
            error_name: error.errorMessage,
            field_id: field ? .id,
            field_target: field ? .target && 'target' in field ? field.target : undefined,
            field_name: field ? .view ? .label,
        }));
    });
    return {
        newlyAddedErrors,
        removedErrors
    };
};
export const useValidation = ({
    form,
    errors,
    setErrors
}) => {
    const validateFields = useCallback(async (values) => {
        // TODO: returns undefined when form-id missing
        const result = await validate(form, values);
        const _errors = result ? .errors || [];
        const additionalErrors = runAdditionalValidation({
            form,
            values,
        });
        const allErrors = mergeErrors({
            errors: _errors,
            additionalErrors
        });
        setErrors(allErrors);
        return allErrors;
    }, [form, setErrors]);
    const validateStep = useCallback(async (stepId, values) => {
        const items = form ? .steps ? .find((step) => step.id === stepId) ? .layout ? .large ? .items || [];
        const validationErrors = await Promise.all(items.map(async (item) => {
            const field = form ? .fields ? .find((_field) => _field.id === item.fieldId);
            const fieldValidationResult = field ? .target ?
                await handleFieldValidation({
                    path: field.target,
                    value: values[field.target],
                }) :
                [];
            return fieldValidationResult;
        }));
        const validationErrorsFlatten = validationErrors.flat();
        setErrors(validationErrorsFlatten);
        return !validationErrorsFlatten.length;
    }, [form, setErrors]);
    const handleFieldValidation = useCallback(async (fieldToValidate) => {
        const newErrors = await getFieldErrors(fieldToValidate, form, errors);
        setErrors(newErrors);
        return newErrors;
    }, [errors, form, setErrors]);
    return {
        validateFields,
        validateStep,
        handleFieldValidation
    };
};
//# sourceMappingURL=use-validation.js.map