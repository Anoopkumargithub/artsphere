import {
    useCallback,
    useEffect,
    useRef
} from 'react';
import {
    FIELD_ERROR_CLASS
} from '@wix/form-fields';
export const useScrollToFirstError = ({
    form,
    options,
    handleStepChange,
    currentStepId,
}) => {
    const shouldScrollOnStepChange = useRef(false);
    useEffect(() => {
        if (shouldScrollOnStepChange.current) {
            scrollToFirstError();
            shouldScrollOnStepChange.current = false;
        }
    }, [currentStepId]);
    const scrollToFirstError = useCallback(() => {
        const field = document.querySelectorAll(`#form-${form.id} .${FIELD_ERROR_CLASS}`) ? .[0];
        const input = field ? .querySelector('input');
        if (input) {
            input.focus({
                preventScroll: true
            });
        } else {
            const button = field ? .querySelector('button');
            button ? .focus({
                preventScroll: true
            });
        }
        field ? .scrollIntoView ? .({
            block: 'center',
            behavior: 'smooth',
        });
    }, [form]);
    const handleScrollToFirstError = useCallback((errors) => {
        if (Number(form.steps ? .length) > 0) {
            // TODO: Adapt to nested forms
            const field = form.fields ? .find((_field) => _field.target === errors ? .[0] ? .errorPath);
            const fieldStep = form.steps ? .find((step) => {
                const fieldInStep = step.layout ? .large ? .items ? .find((layoutField) => layoutField.fieldId === field ? .id);
                return Boolean(fieldInStep);
            });
            const fieldStepIndex = fieldStep && form.steps ? .indexOf(fieldStep);
            if (typeof fieldStepIndex !== 'undefined' &&
                fieldStep ? .id !== currentStepId) {
                handleStepChange(fieldStepIndex);
                shouldScrollOnStepChange.current = true;
            }
        }
        if (errors.length > 0 && options.enableScrollToFirstError) {
            scrollToFirstError();
        }
    }, [options.enableScrollToFirstError, scrollToFirstError, handleStepChange]);
    return {
        scrollToFirstError,
        handleScrollToFirstError
    };
};
//# sourceMappingURL=use-scroll-to-first-error.js.map