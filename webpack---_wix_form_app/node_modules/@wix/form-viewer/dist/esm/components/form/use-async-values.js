import {
    useMemo,
    useCallback,
    useState
} from 'react';
export const useAsyncValues = () => {
    const [callbacks, setCallbacks] = useState({});
    const addCallback = useCallback((target, callback) => {
        setCallbacks((oldCallbacks) => {
            if (oldCallbacks[target] !== callback) {
                return {
                    ...oldCallbacks,
                    [target]: callback,
                };
            }
            return oldCallbacks;
        });
    }, []);
    const computeAsyncValues = useCallback(async (values) => {
        const newValues = { ...values
        };
        await Promise.all(Object.entries(callbacks).map(async ([target, callback]) => {
            const newValue = await callback();
            newValues[target] = newValue;
        }));
        return newValues;
    }, [callbacks]);
    const asyncValues = useMemo(() => ({
        callbacks,
        addCallback
    }), [addCallback, callbacks]);
    return {
        asyncValues,
        computeAsyncValues,
    };
};
//# sourceMappingURL=use-async-values.js.map