import {
    useState,
    useEffect,
    useRef
} from 'react';
const asyncActionsById = {};
const createAsyncAction = (syncAction) => (...args) => {
    const correlationId = Date.now() + Number(Math.random().toFixed(2)) * 100;
    syncAction(correlationId, args);
    return new Promise((resolve, reject) => {
        asyncActionsById[correlationId] = {
            resolve,
            reject
        };
    });
};
export const useFormActions = ({
    wfActions,
    wfResults,
}) => {
    const [allActions, setAllActions] = useState({});
    const [inProgress, setInProgress] = useState(false);
    const pendingActions = useRef(new Set());
    useEffect(() => {
        if (wfResults) {
            const [id, status, result] = wfResults;
            if (status === 'pending') {
                pendingActions.current.add(id);
                setInProgress(pendingActions.current.size > 0);
                return;
            }
            pendingActions.current.delete(id);
            setInProgress(pendingActions.current.size > 0);
            const promise = asyncActionsById[id];
            if (status === 'success') {
                promise.resolve(result);
            } else if (status === 'failure') {
                promise.reject(result);
            }
        }
    }, [wfResults]);
    useEffect(() => {
        let asyncActions = {};
        if (wfActions) {
            asyncActions = Object.keys(wfActions).reduce((acc, key) => {
                const asyncActionKey = key;
                acc[asyncActionKey] = createAsyncAction(wfActions[asyncActionKey]);
                return acc;
            }, {});
        }
        setAllActions(asyncActions);
    }, [wfActions]);
    return {
        formActions: allActions,
        inProgress,
    };
};
//# sourceMappingURL=use-form-actions.js.map