import {
    OverrideEntityType,
} from '@wix/ambassador-forms-v4-form/types';
export function asRequired(value) {
    if (typeof asOptional(value) !== 'undefined') {
        return value;
    }
    throw new Error('Value is null | undefined');
}
export function isCondition(data) {
    return !!data ? .fact && !!data ? .operator;
}
export function getRulesOrConditions(data) {
    return data ? .and || data ? .or || [];
}
export function asOptional(value) {
    return value == null ? undefined : value;
}
export function valueIsMissing(value) {
    return (typeof asOptional(value) === 'undefined' ||
        (typeof value === 'string' && value === '') ||
        (Array.isArray(value) && !value.length));
}
export function lessThan(given, expected, orEqual = false) {
    return orEqual ? given <= expected : given < expected;
}
export function greaterThan(given, expected, orEqual = false) {
    return orEqual ? given >= expected : given > expected;
}
export function between(given, lowerBound, upperBound) {
    return greaterThan(given, lowerBound) && lessThan(given, upperBound);
}
export function asUtcDate(value) {
    try {
        const date = new Date(value);
        if (isNaN(date.getTime())) {
            return null;
        }
        return date;
    } catch (_) {
        return null;
    }
}
export function getNumberValuesToCompare(...values) {
    return values.map((value) => {
        if (typeof value === 'string') {
            return getDateUtcTimestamp(value);
        }
        if (typeof value === 'number') {
            return value;
        }
        return null;
    });
}

function getDateUtcTimestamp(givenValue) {
    const givenDate = asUtcDate(givenValue);
    return givenDate ? givenDate.getTime() : null;
}
export function isObject(givenValue) {
    return (typeof givenValue === 'object' &&
        !Array.isArray(givenValue) &&
        givenValue !== null);
}
export const isArrayOfNumbers = (value) => {
    return value.every((item) => typeof item === 'number');
};
export function isProductSubmission(value) {
    return (Array.isArray(value) &&
        value.every((element) => isObject(element) &&
            'productId' in element &&
            'price' in element &&
            'quantity' in element));
}
export function isValueEmpty(givenValue) {
    return givenValue === undefined || givenValue === null || givenValue === '';
}

function isValidCondition(rule, fields = []) {
    if (rule === undefined) {
        return true;
    }
    const rulesOrConditions = getRulesOrConditions(rule);
    if (!rulesOrConditions.length) {
        return false;
    }
    return rulesOrConditions.every((conditionOrRule) => {
        if (isCondition(conditionOrRule)) {
            return fields ? .some((field) => field.id === conditionOrRule.fact);
        }
        return isValidCondition(conditionOrRule, fields);
    });
}
export function isFormRuleValid(formRule, formSchema) {
    if (!formRule || !formRule ? .overrides ? .length || !formSchema) {
        return false;
    }
    const {
        fieldsV2,
        fields,
        nestedForms
    } = formSchema;
    const fieldsToCheck = (fields ? ? []).concat(fieldsV2 ? ? []);
    const conditionValid = isValidCondition(formRule.condition, fieldsToCheck);
    const overrideValid = formRule ? .overrides.some((override) => {
        if (override.entityType === OverrideEntityType.FORM) {
            return (formSchema.id === override.entityId ||
                nestedForms ? .some((nestedForm) => nestedForm.form ? .id === override.entityId));
        }
        const wasFieldFound = (fieldsToCheck ? .map((f) => f.id) ? ? []).includes(override.entityId);
        return override.entityId ? wasFieldFound : false;
    });
    return conditionValid && overrideValid;
}
//# sourceMappingURL=utils.js.map