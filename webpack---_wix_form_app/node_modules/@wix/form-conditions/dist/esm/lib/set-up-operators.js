import {
    Operator
} from 'js-rules-engine';
import {
    valueIsMissing
} from './utils';
import {
    valueIsBetween
} from './operators/between';
import {
    valueIsGreaterThan
} from './operators/greater-than';
import {
    valueIsLessThan
} from './operators/less-than';
import {
    valueContains
} from './operators/contains';
import {
    arrayEquals
} from './operators/arrayEquals';
import {
    valueContainsAny
} from './operators/any';
import {
    valueIn
} from './operators/in';
import {
    ConditionOperators
} from './condition-operators';
import {
    checked
} from './operators/checked';
import {
    valueEqual
} from './operators/equal';
import {
    valueIsDateNewerThan
} from './operators/is-date-newer-than';
import {
    valueIsDateOlderThan
} from './operators/is-date-older-than';
export function setUpOperators(defaultEngine, dateFactory) {
    const operators = [
        new Operator(ConditionOperators.empty, (value) => valueIsMissing(value)),
        new Operator(ConditionOperators.notEmpty, (value) => !valueIsMissing(value)),
        new Operator(ConditionOperators.between, (givenValue, expectedValue) => valueIsBetween(givenValue, expectedValue)),
        new Operator(ConditionOperators.greaterThan, (givenValue, expectedValue) => valueIsGreaterThan(givenValue, expectedValue)),
        new Operator(ConditionOperators.after, (givenValue, expectedValue) => valueIsGreaterThan(givenValue, expectedValue)),
        new Operator(ConditionOperators.greaterThanOrEqual, (givenValue, expectedValue) => valueIsGreaterThan(givenValue, expectedValue, true)),
        new Operator(ConditionOperators.afterOrEqual, (givenValue, expectedValue) => valueIsGreaterThan(givenValue, expectedValue, true)),
        new Operator(ConditionOperators.lessThan, (givenValue, expectedValue) => valueIsLessThan(givenValue, expectedValue)),
        new Operator(ConditionOperators.before, (givenValue, expectedValue) => valueIsLessThan(givenValue, expectedValue)),
        new Operator(ConditionOperators.lessThanOrEqual, (givenValue, expectedValue) => valueIsLessThan(givenValue, expectedValue, true)),
        new Operator(ConditionOperators.beforeOrEqual, (givenValue, expectedValue) => valueIsLessThan(givenValue, expectedValue, true)),
        new Operator(ConditionOperators.contains, (givenValue, expectedValue) => valueContains(givenValue, expectedValue)),
        new Operator(ConditionOperators.equal, (givenValue, expectedValue) => valueEqual(givenValue, expectedValue)),
        new Operator(ConditionOperators.notEqual, (givenValue, expectedValue) => !valueEqual(givenValue, expectedValue)),
        new Operator(ConditionOperators.notContains, (givenValue, expectedValue) => !valueContains(givenValue, expectedValue)),
        new Operator(ConditionOperators.arrayEqual, (givenValue, expectedValue) => arrayEquals(givenValue, expectedValue)),
        new Operator(ConditionOperators.arrayNotEqual, (givenValue, expectedValue) => !arrayEquals(givenValue, expectedValue)),
        new Operator(ConditionOperators.checked, checked),
        new Operator(ConditionOperators.notChecked, (givenValue) => !checked(givenValue)),
        new Operator(ConditionOperators.any, (givenValue, expectedValue) => valueContainsAny(givenValue, expectedValue)),
        new Operator(ConditionOperators.in, (givenValue, expectedValue) => valueIn(givenValue, expectedValue)),
        new Operator(ConditionOperators.notIn, (givenValue, expectedValue) => !valueIn(givenValue, expectedValue)),
        new Operator(ConditionOperators.isDateNewerThan, (givenValue, expectedValue) => valueIsDateNewerThan(givenValue, expectedValue, {
            dateFactory
        })),
        new Operator(ConditionOperators.isDateOlderThan, (givenValue, expectedValue) => valueIsDateOlderThan(givenValue, expectedValue, {
            dateFactory
        })),
        new Operator(ConditionOperators.isDateNewerThanOrEqual, (givenValue, expectedValue) => valueIsDateNewerThan(givenValue, expectedValue, {
            orEqual: true,
            dateFactory,
        })),
        new Operator(ConditionOperators.isDateOlderThanOrEqual, (givenValue, expectedValue) => valueIsDateOlderThan(givenValue, expectedValue, {
            orEqual: true,
            dateFactory,
        })),
    ];
    operators.forEach((operator) => {
        defaultEngine.removeOperator(operator.name);
        defaultEngine.addOperator(operator);
    });
}
//# sourceMappingURL=set-up-operators.js.map