import {
    OverrideEntityType,
} from '@wix/ambassador-forms-v4-form/types';
import {
    asRequired
} from './utils';
import {
    fieldPathMapToV2,
    supportedPaths,
} from './transform-path-to-v2';
const PATH_SEPARATOR = '.';
export function applyItemPropertiesOverride(formSchema, rule) {
    if (rule.overrides) {
        const overriddenFormSchema = applyFormOverride(formSchema, mapOverridesByItem(rule.overrides, isFormOverride, isSupportedFormPath));
        return {
            ...overriddenFormSchema,
            fields: applyItemsOverride(overriddenFormSchema.fields ? ? [], mapOverridesByItem(rule.overrides, isFieldOverride, isSupportedFieldPath)),
            ...(overriddenFormSchema.fieldsV2 && {
                fieldsV2: applyItemsOverride(overriddenFormSchema.fieldsV2 ? ? [], mapOverridesV2ByItem(rule.overrides, isFieldOverride)),
            }),
        };
    }
    return formSchema;
}

function applyItemsOverride(items, formItemOverrides) {
    return items.map((formField) => {
        const fieldOverrides = formItemOverrides[asRequired(formField.id)] || [];
        return fieldOverrides.reduce((acc, override) => setToValue(acc, override.path, override.value), formField);
    });
}

function applyFormOverride(formSchema, formItemOverrides) {
    const formOverrides = Object.values(formItemOverrides).flat();
    return formOverrides.reduce((acc, override) => setToValue(acc, override.path, override.value), formSchema);
}

function mapOverridesByItem(overrideItems, isOverride, isSupportedPath) {
    return overrideItems
        .filter(isOverride)
        .reduce((acc, overrideItem) => {
            const entityId = asRequired(overrideItem.entityId);
            const overrides = Object.entries(overrideItem.valueChanges ? ? {})
                .filter(([path]) => isSupportedPath(path))
                .map(([path, value]) => ({
                    path: path.split(PATH_SEPARATOR),
                    value,
                }));
            acc[entityId] = [...(acc[entityId] || []), ...overrides];
            return acc;
        }, {});
}

function mapOverridesV2ByItem(overrideItems, isOverride) {
    return overrideItems
        .filter(isOverride)
        .reduce((acc, overrideItem) => {
            const entityId = asRequired(overrideItem.entityId);
            const overrides = Object.entries(overrideItem.valueChanges ? ? {})
                .flatMap(([path, value]) => {
                    const resolvedV2Paths = fieldPathMapToV2[path] || [];
                    return resolvedV2Paths.map((pathV2) => [pathV2, value]);
                })
                .map(([path, value]) => ({
                    path: path.split(PATH_SEPARATOR),
                    value,
                }));
            acc[entityId] = [...(acc[entityId] || []), ...overrides];
            return acc;
        }, {});
}

function setToValue(obj, pathProps, value) {
    if (value !== undefined && obj !== undefined) {
        const [prop, ...rest] = pathProps;
        if (rest.length) {
            const valueToSet = setToValue(obj[prop], rest, value);
            if (valueToSet !== undefined) {
                return {
                    ...obj,
                    [prop]: valueToSet,
                };
            }
            return obj;
        }
        return {
            ...obj,
            [prop]: value,
        };
    }
    return obj;
}

function isFieldOverride(override) {
    return override.entityType === OverrideEntityType.FIELD;
}

function isFormOverride(override) {
    return override.entityType === OverrideEntityType.FORM;
}

function isSupportedFieldPath(path) {
    return supportedPaths.includes(path);
}

function isSupportedFormPath(path) {
    return ['fields', 'steps'].includes(path);
}
//# sourceMappingURL=apply-item-properties-override.js.map