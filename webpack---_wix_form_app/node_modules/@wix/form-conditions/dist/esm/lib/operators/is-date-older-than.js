import {
    getNumberValuesToCompare,
    isArrayOfNumbers,
    isValueEmpty,
} from '../utils';
import dayjs from 'dayjs';
import IsSameOrBefore from 'dayjs/plugin/isSameOrBefore';
export function valueIsDateOlderThan(givenValue, expectedValue, {
    orEqual = false,
    dateFactory = () => new Date(),
} = {}) {
    dayjs.extend(IsSameOrBefore);
    if (isValueEmpty(givenValue)) {
        return false;
    }
    if (!Array.isArray(expectedValue) || expectedValue.length !== 2) {
        throw new Error('Expected value should be array of two elements');
    }
    const values = getNumberValuesToCompare(givenValue, expectedValue[0]);
    const unit = expectedValue[1];
    switch (unit) {
        case 'day':
        case 'month':
            if (isArrayOfNumbers(values)) {
                const [given, units] = values;
                const date = dayjs(given);
                const nowUnitsAdded = dayjs(dateFactory()).add(-units, unit);
                if (orEqual) {
                    return date.isSameOrBefore(nowUnitsAdded, 'day');
                }
                return date.isBefore(nowUnitsAdded, 'day');
            }
    }
    throw new Error(`IsDateOlderThan operator: Unsupported values to compare ${givenValue}, ${expectedValue}`);
}
//# sourceMappingURL=is-date-older-than.js.map