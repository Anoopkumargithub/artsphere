import classNames from 'classnames';
import React, {
    useCallback,
    useEffect,
    useRef,
    useState
} from 'react';
import {
    TextField as TPATextField
} from 'wix-ui-tpa/cssVars';
import {
    ForcedState,
    useForcedState
} from '../../contexts/forced-state-context';
import {
    FIELD_ERROR_CLASS,
    useError
} from '../../field-error';
import {
    useFieldAttributes
} from '../../services/field-attributes';
import {
    FieldDescriptionWUT
} from '../field-description';
import {
    FieldLabelWUT
} from '../field-label';
import {
    FieldErrorWUT
} from '../field-error';
import {
    classes
} from './url-input.st.css';
import {
    useTpaStyleParams
} from '../use-tpa-style-params';
const UrlInput = _ref => {
    let {
        id,
        target,
        value,
        required,
        label,
        hideLabel,
        disabled,
        placeholder,
        onChange,
        onFocus,
        onBlur,
        description,
        error,
        customErrors,
        fieldType,
        FieldLayout
    } = _ref;
    const {
        labelId,
        inputId,
        errorId,
        descriptionId,
        ariaDescribedBy
    } = useFieldAttributes(id);
    const {
        hasError,
        errorMessage
    } = useError(error, customErrors, fieldType);
    const forcedHover = useForcedState().includes(ForcedState.INPUT_FIELDS_HOVER);
    const [blurCount, setBlurCount] = useState(0);
    const invokeBlur = useRef(false);
    const {
        inputTheme,
        isBorderStyleNone
    } = useTpaStyleParams();
    const handleBlur = useCallback(() => {
        let updatedValue = '';
        if (value) {
            const urlWithoutProtocol = String(value).replace(/^https?:\/\//, '');
            updatedValue = `https://${urlWithoutProtocol}`;
        }
        onChange(updatedValue);
        setBlurCount(count => count + 1);
        invokeBlur.current = true;
    }, [onChange, value]);
    useEffect(() => {
        if (blurCount > 0 && invokeBlur.current) {
            invokeBlur.current = false;
            onBlur == null || onBlur();
        }
    }, [blurCount, onBlur]);
    const handleUrlChange = useCallback(event => {
        const newValue = event.target.value;
        onChange(newValue);
    }, [onChange]);
    return /*#__PURE__*/ React.createElement(FieldLayout, {
        fieldId: id,
        renderLabel: () => /*#__PURE__*/ React.createElement(FieldLabelWUT, {
            labelId: labelId,
            htmlFor: inputId,
            required: required,
            label: label,
            hideLabel: hideLabel
        }),
        renderInput: () => /*#__PURE__*/ React.createElement(TPATextField, {
            id: inputId,
            type: "url",
            error: hasError,
            newErrorMessage: true,
            value: value ? String(value) : '',
            className: classNames(classes.textField, {
                [FIELD_ERROR_CLASS]: hasError,
                [classes.noBorder]: isBorderStyleNone,
                [classes.hover]: forcedHover
            }),
            onChange: handleUrlChange,
            required: required,
            disabled: disabled,
            placeholder: placeholder,
            onBlur: handleBlur,
            onFocus: onFocus,
            "aria-label": label,
            theme: inputTheme,
            "aria-describedby": ariaDescribedBy
        }),
        renderDescription: () => /*#__PURE__*/ React.createElement(React.Fragment, null, /*#__PURE__*/ React.createElement(FieldErrorWUT, {
            target: target,
            hasError: hasError,
            errorMessage: errorMessage,
            id: errorId
        }), /*#__PURE__*/ React.createElement(FieldDescriptionWUT, {
            description: description,
            id: descriptionId
        }))
    });
};
export default UrlInput;
//# sourceMappingURL=url-input.js.map