import classNames from 'classnames';
import React, {
    useCallback
} from 'react';
import {
    TextField as TPATextField
} from 'wix-ui-tpa/cssVars';
import {
    ForcedState,
    useForcedState
} from '../../contexts/forced-state-context';
import {
    FIELD_ERROR_CLASS,
    useError
} from '../../field-error';
import {
    useFieldAttributes
} from '../../services/field-attributes';
import {
    FieldDescriptionWUT
} from '../field-description';
import {
    FieldLabelWUT
} from '../field-label';
import {
    FieldErrorWUT
} from '../field-error';
import {
    useTpaStyleParams
} from '../use-tpa-style-params';
import {
    getTextInputFieldError
} from './text-input-field-utils';
import {
    classes
} from './text-input-field-wut.st.css';
export const TextInputFieldWUT = _ref => {
    let {
        id,
        target,
        label,
        hideLabel = false,
        placeholder,
        required = false,
        description,
        value = '',
        onChange,
        onBlur,
        onFocus,
        error,
        type = 'text',
        disabled = false,
        customErrors,
        fieldType,
        validation,
        countryCode,
        prefix,
        additionalInfo,
        FieldLayout
    } = _ref;
    const {
        labelId,
        inputId,
        errorId,
        descriptionId,
        ariaDescribedBy
    } = useFieldAttributes(id);
    const _error = getTextInputFieldError(validation, error);
    const {
        hasError,
        errorMessage
    } = useError(_error, customErrors, fieldType, countryCode == null ? void 0 : countryCode.toLocaleLowerCase());
    const forcedHover = useForcedState().includes(ForcedState.INPUT_FIELDS_HOVER);
    const {
        inputTheme,
        isBorderStyleNone
    } = useTpaStyleParams();
    const handleChange = useCallback(event => {
        const newValue = event.target.value;
        onChange(newValue);
    }, [onChange]);
    return /*#__PURE__*/ React.createElement(FieldLayout, {
        fieldId: id,
        renderLabel: () => /*#__PURE__*/ React.createElement(FieldLabelWUT, {
            labelId: labelId,
            htmlFor: inputId,
            required: required,
            label: label,
            hideLabel: hideLabel
        }),
        renderInput: () => /*#__PURE__*/ React.createElement(TPATextField, {
            id: inputId,
            type: type,
            error: hasError,
            newErrorMessage: true,
            value: value ? String(value) : '',
            className: classNames(classes.textField, {
                [FIELD_ERROR_CLASS]: hasError,
                [classes.noBorder]: isBorderStyleNone,
                [classes.hover]: forcedHover
            }),
            prefix: prefix,
            onChange: handleChange,
            required: required,
            disabled: disabled,
            placeholder: placeholder,
            onBlur: onBlur,
            onFocus: onFocus,
            "aria-label": label,
            theme: inputTheme,
            "aria-describedby": ariaDescribedBy
        }),
        renderDescription: () => /*#__PURE__*/ React.createElement(React.Fragment, null, /*#__PURE__*/ React.createElement(FieldErrorWUT, {
            target: target,
            hasError: hasError,
            errorMessage: errorMessage,
            id: errorId
        }), /*#__PURE__*/ React.createElement(FieldDescriptionWUT, {
            description: description,
            id: descriptionId
        }), additionalInfo)
    });
};
//# sourceMappingURL=text-input-field-wut.js.map