import {
    useCallback,
    useRef
} from 'react';
export function useFocus(_ref) {
    let {
        onBlur,
        onFocus
    } = _ref;
    const containerRef = useRef(null);
    const isFocused = useRef(false);
    const handleBlur = useCallback(event => {
        const clickedOnNonFocusableElement = !event.relatedTarget;
        if (clickedOnNonFocusableElement) {
            isFocused.current = false;
            onBlur == null || onBlur(event);
            return;
        }
        const element = containerRef.current;
        if (!element) {
            isFocused.current = false;
            onBlur == null || onBlur(event);
            return;
        }
        const clickedOutside = !element.contains(event.relatedTarget);
        if (clickedOutside) {
            isFocused.current = false;
            onBlur == null || onBlur(event);
            return;
        }
    }, [onBlur]);
    const handleFocus = useCallback(event => {
        if (isFocused.current) {
            return;
        }
        isFocused.current = true;
        onFocus == null || onFocus(event);
    }, [onFocus]);
    return {
        handleFocus,
        handleBlur,
        containerRef
    };
}
//# sourceMappingURL=use-focus.js.map