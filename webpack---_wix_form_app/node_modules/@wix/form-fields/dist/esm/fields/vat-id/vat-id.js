import classNames from 'classnames';
import React, {
    useCallback
} from 'react';
import {
    TextField as TPATextField
} from 'wix-ui-tpa/cssVars';
import {
    FIELD_TYPES
} from '../../constants';
import {
    ForcedState,
    useForcedState
} from '../../contexts/forced-state-context';
import {
    useTranslation
} from '../../contexts/translation-context';
import {
    FIELD_ERROR_CLASS,
    useError
} from '../../field-error';
import {
    useFieldAttributes
} from '../../services/field-attributes';
import {
    FieldDescriptionWUT
} from '../../ui/field-description';
import {
    FieldLabelWUT
} from '../../ui/field-label';
import {
    FieldErrorWUT
} from '../../ui/field-error';
import {
    classes
} from './vat-id.st.css';
import {
    useTpaStyleParams
} from '../../ui/use-tpa-style-params';
import {
    getVatIDType
} from './vat-id-validation';

// tax info types
export let VatIDType = /*#__PURE__*/ function(VatIDType) {
    VatIDType["UNSPECIFIED"] = "UNSPECIFIED";
    VatIDType["CPF"] = "CPF";
    VatIDType["CNPJ"] = "CNPJ";
    return VatIDType;
}({}); // CNPJ - for corporations
const DEFAULT_VAT_ID_VALUE = {
    id: '',
    type: VatIDType.UNSPECIFIED
};
export const VatId = _ref => {
    let {
        id,
        hideLabel = false,
        placeholder,
        required = false,
        description,
        value = DEFAULT_VAT_ID_VALUE,
        onChange,
        onBlur,
        onFocus,
        error,
        disabled = false,
        customErrors,
        hidden,
        target,
        FieldLayout
    } = _ref;
    const {
        t
    } = useTranslation();
    const label = t('field.vat-id.label');
    const fieldType = FIELD_TYPES.VAT_ID;
    const {
        hasError,
        errorMessage
    } = useError(error, customErrors, fieldType);
    const forcedHover = useForcedState().includes(ForcedState.INPUT_FIELDS_HOVER);
    const {
        inputTheme,
        isBorderStyleNone
    } = useTpaStyleParams();
    const {
        labelId,
        inputId,
        errorId,
        descriptionId,
        ariaDescribedBy
    } = useFieldAttributes(id);
    const handleChange = useCallback(event => {
        const newVatId = event.target.value;
        const vatType = getVatIDType(newVatId);
        const newValue = {
            id: newVatId,
            type: vatType
        };
        onChange(newValue);
    }, [onChange]);
    const handleBlur = useCallback(event => {
        const newVatId = event.target.value;
        const vatType = getVatIDType(newVatId);
        const newValue = {
            id: newVatId,
            type: vatType
        };
        onChange(newValue);
        onBlur == null || onBlur();
    }, [onChange, onBlur]);
    if (hidden) {
        return null;
    }
    return /*#__PURE__*/ React.createElement(FieldLayout, {
        fieldId: id,
        renderLabel: () => /*#__PURE__*/ React.createElement(FieldLabelWUT, {
            labelId: labelId,
            htmlFor: inputId,
            required: required,
            label: label,
            hideLabel: hideLabel
        }),
        renderInput: () => /*#__PURE__*/ React.createElement(TPATextField, {
            id: inputId,
            type: "text",
            error: hasError,
            newErrorMessage: true,
            value: value ? String(value.id) : '',
            className: classNames(classes.textField, {
                [FIELD_ERROR_CLASS]: hasError,
                [classes.noBorder]: isBorderStyleNone,
                [classes.hover]: forcedHover
            }),
            onChange: handleChange,
            required: required,
            disabled: disabled,
            placeholder: placeholder,
            onBlur: handleBlur,
            onFocus: onFocus,
            "aria-label": label,
            theme: inputTheme,
            "aria-describedby": ariaDescribedBy
        }),
        renderDescription: () => /*#__PURE__*/ React.createElement(React.Fragment, null, /*#__PURE__*/ React.createElement(FieldErrorWUT, {
            target: target,
            hasError: hasError,
            errorMessage: errorMessage,
            id: errorId
        }), /*#__PURE__*/ React.createElement(FieldDescriptionWUT, {
            description: description,
            id: descriptionId
        }))
    });
};
export default VatId;
//# sourceMappingURL=vat-id.js.map