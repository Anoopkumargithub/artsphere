import {
    ErrorTypes
} from '@wix/form-validator';
import {
    EMPTY_VALUES_BY_TYPE,
    FIELD_TYPES
} from '../../constants';
import {
    VatIDType
} from './vat-id';
const CPF_BLACKLIST = ['00000000000', '11111111111', '22222222222', '33333333333', '44444444444', '55555555555', '66666666666', '77777777777', '88888888888', '99999999999'];
export function isCpfValid(modelValue) {
    if (!modelValue || CPF_BLACKLIST.includes(modelValue)) {
        return false;
    }
    let i,
        v1 = 0,
        v2;
    const chars = modelValue.replace(/\D/g, '').split('');
    if (chars.length === 11) {
        const factors = [10, 9, 8, 7, 6, 5, 4, 3, 2];
        for (i = 0; i < factors.length; ++i) {
            v1 += factors[i] * parseInt(chars[i], 10);
        }
        v1 = 11 - v1 % 11;
        if (v1 >= 10) {
            v1 = 0;
        }
        if (parseInt(chars[9], 10) !== v1) {
            return false;
        }
        v2 = 2 * v1;
        for (i = 0; i < factors.length; ++i) {
            v2 += (factors[i] + 1) * parseInt(chars[i], 10);
        }
        v2 = 11 - v2 % 11;
        if (v2 >= 10) {
            v2 = 0;
        }
        return parseInt(chars[10], 10) === v2;
    }
    return false;
}
const CNPJ_BLACKLIST = ['00000000000000', '11111111111111', '22222222222222', '33333333333333', '44444444444444', '55555555555555', '66666666666666', '77777777777777', '88888888888888', '99999999999999'];

// eslint-disable-next-line no-useless-escape
const STRICT_STRIP_REGEX = /[-\/.]/g;
const LOOSE_STRIP_REGEX = /[^\d]/g;
const verifierDigit = numbers => {
    let index = 2;
    const reverse = numbers.split('').reduce((buffer, number) => {
        return [parseInt(number, 10)].concat(buffer);
    }, []);
    const sum = reverse.reduce((buffer, number) => {
        buffer += number * index;
        index = index === 9 ? 2 : index + 1;
        return buffer;
    }, 0);
    const mod = sum % 11;
    return mod < 2 ? 0 : 11 - mod;
};

function strip(number, strict) {
    const regex = strict ? STRICT_STRIP_REGEX : LOOSE_STRIP_REGEX;
    return (number || '').toString().replace(regex, '');
}
export function isCnpjValid(number, strict) {
    if (strict === void 0) {
        strict = true;
    }
    const stripped = strip(number, strict);

    // CNPJ must be defined
    if (!stripped) {
        return false;
    }

    // CNPJ must have 14 chars
    if (stripped.length !== 14) {
        return false;
    }

    // CNPJ can't be blacklisted
    if (CNPJ_BLACKLIST.includes(stripped)) {
        return false;
    }
    let numbers = stripped.substr(0, 12);
    numbers += verifierDigit(numbers);
    numbers += verifierDigit(numbers);
    return numbers.substr(-2) === stripped.substr(-2);
}
export const isVatIdValid = value => value === EMPTY_VALUES_BY_TYPE[FIELD_TYPES.VAT_ID] || value.id === '' ? true : isCpfValid(value.id) || isCnpjValid(value.id);
export function getVatIDType(id) {
    const isCpf = isCpfValid(id);
    const isCnpj = isCnpjValid(id);
    if (isCpf) {
        return VatIDType.CPF;
    } else if (isCnpj) {
        return VatIDType.CNPJ;
    }
    return VatIDType.UNSPECIFIED;
}
export const validateVatID = _ref => {
    let {
        value,
        target
    } = _ref;
    if (!value) {
        return undefined;
    }
    const isValid = isVatIdValid(value);
    if (!isValid) {
        return {
            errorPath: target,
            errorType: ErrorTypes.FORMAT_ERROR,
            errorMessage: 'must match format "vat ID"',
            params: {
                format: 'custom isCpfValid and isCnpjValid field validations'
            }
        };
    }
    return undefined;
};
//# sourceMappingURL=vat-id-validation.js.map