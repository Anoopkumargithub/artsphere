import {
    ErrorTypes
} from '@wix/form-validator';
import {
    DerivedErrorTypes
} from '../../../field-error/error-types';
import {
    multipleOfToDisplayValue
} from '../../../field-settings/settings-shared/decimal-setting/decimal-setting-utils';
export const isNumberInputValid = (value, multipleOf) => {
    var _String$split;
    const decimals = ((_String$split = String(multipleOf).split('.')) == null || (_String$split = _String$split[1]) == null ? void 0 : _String$split.length) || 0;
    let multipleOfRegex = `^\\d*(\\.\\d{0,${decimals}})?$`;
    if (multipleOf === 1 || typeof multipleOf === 'undefined' || multipleOf === null) {
        multipleOfRegex = `^\\d*?$`;
    }
    const validator = new RegExp(multipleOfRegex);
    return validator.test(`${value}`);
};
export const getNumberInputError = (validation, error) => {
    var _validation$number, _validation$number2, _validation$number3;
    const isMinMaxValueError = (error == null ? void 0 : error.errorType) === ErrorTypes.MIN_VALUE_ERROR || (error == null ? void 0 : error.errorType) === ErrorTypes.MAX_VALUE_ERROR;
    const isMultipleOfValueError = (error == null ? void 0 : error.errorType) === ErrorTypes.MULTIPLE_OF_VALUE_ERROR;
    if (!error) {
        return error;
    }
    const minimum = validation == null || (_validation$number = validation.number) == null ? void 0 : _validation$number.minimum;
    const maximum = validation == null || (_validation$number2 = validation.number) == null ? void 0 : _validation$number2.maximum;
    const isMinMaxValues = minimum && maximum;
    const multipleOf = validation == null || (_validation$number3 = validation.number) == null ? void 0 : _validation$number3.multipleOf;
    if (isMinMaxValueError && isMinMaxValues && minimum !== maximum) {
        return {
            ...error,
            errorType: DerivedErrorTypes.VALUE_RANGE_ERROR,
            errorMessage: `must be from ${minimum} to ${maximum}`,
            params: {
                minLimit: minimum,
                maxLimit: maximum
            }
        };
    }
    if (isMultipleOfValueError && multipleOf) {
        const number = multipleOfToDisplayValue(multipleOf);
        return {
            ...error,
            errorType: DerivedErrorTypes.DECIMAL_POINT_ERROR,
            errorMessage: `must have ${number} number(s) after the decimal point`,
            params: {
                number
            }
        };
    }
    return error;
};
//# sourceMappingURL=number-input-utils.js.map