import classNames from 'classnames';
import React, {
    useCallback,
    useEffect,
    useState
} from 'react';
import {
    Spinner
} from 'wix-ui-tpa';
import {
    StatesButtonStates,
    StatesButton as TPAButton,
    TextButton as TPATextButton,
    TextButtonPriority
} from 'wix-ui-tpa/cssVars';
import {
    SubmitButtonStyle
} from '../../constants';
import {
    useConfig
} from '../../contexts/config-context';
import {
    useFieldActions
} from '../../contexts/field-actions-context';
import {
    ForcedState,
    useForcedState
} from '../../contexts/forced-state-context';
import {
    useForm
} from '../../contexts/form-context';
import {
    getSubmitButtonStyle,
    useStyleParams
} from '../../contexts/style-params-context';
import {
    useTranslation
} from '../../contexts/translation-context';
import {
    getCheckoutMessage
} from './checkout-message';
import ErrorMessage from './error-message';
import {
    NextButton
} from './next-button';
import {
    PreviousButton
} from './previous-button';
import {
    classes
} from './submit-button.st.css';
import ThankYouMessage from './thank-you-message';
import {
    getCurrentStep,
    isValidUrl
} from './utils';
export let SubmitAction = /*#__PURE__*/ function(SubmitAction) {
    SubmitAction["THANK_YOU_MESSAGE"] = "THANK_YOU_MESSAGE";
    SubmitAction["EXTERNAL_URL"] = "EXTERNAL_URL";
    return SubmitAction;
}({});
export let ExternalUrlTarget = /*#__PURE__*/ function(ExternalUrlTarget) {
    ExternalUrlTarget["BLANK"] = "_blank";
    ExternalUrlTarget["SELF"] = "_self";
    return ExternalUrlTarget;
}({});
const InProgressLoader = () => {
    return /*#__PURE__*/ React.createElement(Spinner, {
        className: classes.spinner
    });
};
const Submit = _ref => {
    let {
        onClick,
        disabled,
        submitText,
        hasSteps,
        forceInProgress
    } = _ref;
    const {
        isMobile
    } = useConfig();
    const forcedState = useForcedState();
    const hover = forcedState.includes(ForcedState.SUBMIT_BUTTON_HOVER);
    const textButton = getSubmitButtonStyle(useStyleParams(), isMobile) === SubmitButtonStyle.Text;
    const {
        inProgress
    } = useFieldActions();
    return textButton ? /*#__PURE__*/ React.createElement(TPATextButton, {
        priority: TextButtonPriority.primary,
        className: classNames(classes.textButton, {
            [classes.textButtonHover]: hover,
            [classes.navigationButtons]: hasSteps
        }),
        onClick: onClick,
        disabled: disabled
    }, inProgress || forceInProgress ? /*#__PURE__*/ React.createElement(InProgressLoader, null) : submitText) : /*#__PURE__*/ React.createElement(TPAButton, {
        className: classNames(classes.button, {
            [classes.hover]: hover,
            [classes.navigationButtons]: hasSteps
        }),
        upgrade: true,
        onClick: onClick,
        disabled: disabled,
        state: inProgress || forceInProgress ? StatesButtonStates.IN_PROGRESS : StatesButtonStates.IDLE,
        inProgressContent: /*#__PURE__*/ React.createElement(InProgressLoader, null),
        idleContent: submitText
    });
};
const SubmitButton = _ref2 => {
    let {
        submitText,
        text,
        id,
        thankYouMessageText,
        thankYouMessageDuration,
        externalUrl,
        externalUrlTarget,
        submitAction,
        forceThankYouMessage,
        previousText,
        nextText,
        FieldLayout
    } = _ref2;
    const form = useForm();
    const {
        hasSteps,
        stepNumber,
        isLastStep
    } = getCurrentStep(form, id);
    const {
        inProgress,
        actions
    } = useFieldActions();
    const {
        t
    } = useTranslation();
    const [showMessage, setShowMessage] = useState(false);
    const [showCheckoutMessage, setShowCheckoutMessage] = useState(false);
    const [showErrorMessage, setShowErrorMessage] = useState(false);
    const [submitInProgress, setSubmitInProgress] = useState(false);
    const {
        isMobile
    } = useConfig();
    const textButton = getSubmitButtonStyle(useStyleParams(), isMobile) === SubmitButtonStyle.Text;
    const shouldShowMessage = submitAction === SubmitAction.THANK_YOU_MESSAGE && thankYouMessageText;
    const isThankyouMessageVisible = (!hasSteps || isLastStep) && (showMessage || forceThankYouMessage || showCheckoutMessage);
    const shouldRedirect = submitAction === SubmitAction.EXTERNAL_URL && externalUrl && isValidUrl(externalUrl);
    const isDisabled = inProgress || submitInProgress;
    useEffect(() => {
        if (showMessage && thankYouMessageDuration) {
            const timer = setTimeout(() => {
                setShowMessage(false);
            }, thankYouMessageDuration * 1000);
            return () => clearTimeout(timer);
        }
        return;
    }, [showMessage, thankYouMessageDuration]);
    const handleRedirect = useCallback(() => {
        const urlWithoutProtocol = externalUrl == null ? void 0 : externalUrl.replace(/^https?:\/\//, '');
        const updatedExternalUrl = `https://${urlWithoutProtocol}`;
        window.open(updatedExternalUrl, externalUrlTarget || '_blank');
    }, [externalUrl, externalUrlTarget]);
    const handleSubmitClick = useCallback(async () => {
        setSubmitInProgress(true);
        try {
            var _submission$orderDeta;
            const submission = await (actions == null ? void 0 : actions.submitForm());
            const checkoutId = submission == null || (_submission$orderDeta = submission.orderDetails) == null ? void 0 : _submission$orderDeta.checkoutId;
            if (checkoutId) {
                setShowCheckoutMessage(true);
                actions == null || actions.navigateToCheckout(checkoutId);
                return;
            }
            if (submission && shouldShowMessage) {
                setShowMessage(true);
            } else if (submission && shouldRedirect) {
                handleRedirect();
            }
            setShowErrorMessage(false);
        } catch (e) {
            setShowErrorMessage(true);
        }
        setSubmitInProgress(false);
    }, [actions, handleRedirect, shouldRedirect, shouldShowMessage]);
    return /*#__PURE__*/ React.createElement(FieldLayout, {
        fieldId: id,
        renderLabel: () => null,
        renderInput: () => /*#__PURE__*/ React.createElement("div", {
            className: classNames({
                [classes.navigationContainer]: hasSteps,
                [classes.textButtonContainer]: !hasSteps && textButton
            })
        }, hasSteps && stepNumber !== 0 && /*#__PURE__*/ React.createElement(PreviousButton, {
            previousText: previousText,
            className: classes.navigationButtons
        }), hasSteps && !isLastStep ? /*#__PURE__*/ React.createElement(NextButton, {
            nextText: nextText,
            className: classes.navigationButtons
        }) : /*#__PURE__*/ React.createElement(Submit, {
            onClick: handleSubmitClick,
            disabled: isDisabled,
            submitText: text || submitText,
            hasSteps: hasSteps,
            forceInProgress: showCheckoutMessage
        })),
        renderDescription: () => /*#__PURE__*/ React.createElement(React.Fragment, null, /*#__PURE__*/ React.createElement(ThankYouMessage, {
            messageText: showCheckoutMessage ? getCheckoutMessage(t('submit.checkout.message')) : thankYouMessageText,
            showMessage: isThankyouMessageVisible
        }), showErrorMessage && /*#__PURE__*/ React.createElement(ErrorMessage, null))
    });
};
export default SubmitButton;
//# sourceMappingURL=submit-button.js.map