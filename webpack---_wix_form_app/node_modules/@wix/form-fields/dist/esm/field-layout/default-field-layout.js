import _extends from "@babel/runtime/helpers/extends";
import React from 'react';
import {
    useFieldView
} from '../contexts/form-view-context';
import {
    isInputField
} from '../ui/form/types';
import styles from './default-field-layout.scss';
export const DefaultFieldLayout = _ref => {
    let {
        fieldId,
        ...rest
    } = _ref;
    const fieldView = useFieldView(fieldId);
    if (!fieldView) {
        return null;
    }
    const {
        layout,
        fieldType
    } = fieldView;
    const dataHook = `form-field-${isInputField(fieldView) ? fieldView.target : fieldView.id}`;
    const dataAttributes = {
        'data-hook': dataHook,
        'data-field-type': fieldType
    };
    const rows = [1, 2];
    const gridRow = `1 / span ${rows.length}`;
    const gridColumn = `${layout.column + 1} / span ${layout.width}`;
    if ('children' in rest) {
        return /*#__PURE__*/ React.createElement("div", _extends({
            style: {
                gridRow,
                gridColumn
            }
        }, dataAttributes), rest.children);
    }
    const {
        renderLabel,
        renderInput,
        renderDescription
    } = rest;
    const [labelRow, inputRow] = rows.map(currentRow => `${currentRow} / span 1`);
    return /*#__PURE__*/ React.createElement(React.Fragment, null, /*#__PURE__*/ React.createElement("div", {
        style: {
            gridRow: labelRow,
            gridColumn
        },
        className: styles.label
    }, renderLabel()), /*#__PURE__*/ React.createElement("div", _extends({
        style: {
            gridRow: inputRow,
            gridColumn
        }
    }, dataAttributes), renderInput(), renderDescription()));
};
//# sourceMappingURL=default-field-layout.js.map