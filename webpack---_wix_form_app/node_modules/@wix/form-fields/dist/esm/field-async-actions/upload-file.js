import {
    getMediaUploadUrl
} from '@wix/ambassador-forms-v4-submission/http';
export const uploadFile = _ref => {
    let {
        httpClient: _httpClient
    } = _ref;
    return async _ref2 => {
        let {
            formId,
            file
        } = _ref2;
        async function uploadFileToMediaManager(uploadUrl, _file) {
            var _uploadResponse$data$, _uploadResponse$data$2, _uploadResponse$data$3;
            const params = {
                filename: _file.name
            };
            const headers = {
                'Content-Type': 'application/octet-stream'
            };
            const uploadResponse = await _httpClient.put(uploadUrl, _file, {
                headers,
                params
            });
            const fileDescriptor = {
                id: (_uploadResponse$data$ = uploadResponse.data.file) == null ? void 0 : _uploadResponse$data$.id,
                displayName: (_uploadResponse$data$2 = uploadResponse.data.file) == null ? void 0 : _uploadResponse$data$2.displayName,
                url: (_uploadResponse$data$3 = uploadResponse.data.file) == null ? void 0 : _uploadResponse$data$3.url
            };
            return fileDescriptor;
        }
        async function uploadFilesToMediaPlatform(uploadUrl, _file) {
            const params = {
                filename: _file.name
            };
            const headers = {
                'Content-Type': 'application/octet-stream'
            };
            const uploadResponse = await _httpClient.put(uploadUrl, _file, {
                headers,
                params
            });
            const fileDescriptor = {
                id: uploadResponse.data.payload.id,
                displayName: _file.name,
                url: uploadResponse.data.payload.path
            };
            return fileDescriptor;
        }
        async function getUploadUrl(_file, _formId) {
            const {
                data
            } = await _httpClient.request(getMediaUploadUrl({
                mimeType: _file.type,
                formId,
                filename: _file.name
            }));
            return {
                uploadUrl: data.uploadUrl,
                generatedByMediaPlatform: data.generatedByMediaPlatform
            };
        }
        const {
            uploadUrl,
            generatedByMediaPlatform
        } = await getUploadUrl(file, formId);
        const descriptorWithFile = generatedByMediaPlatform ? await uploadFilesToMediaPlatform(uploadUrl, file) : await uploadFileToMediaManager(uploadUrl, file);
        return descriptorWithFile;
    };
};
//# sourceMappingURL=upload-file.js.map