import {
    getTranslatedError
} from './get-translated-error';
import {
    useTranslation
} from '../contexts/translation-context';
import {
    ForcedState,
    useForcedState
} from '../contexts/forced-state-context';
export const useError = (error, customErrors, fieldType, suffix) => {
    const {
        t,
        i18n
    } = useTranslation();
    const forcedState = useForcedState();
    if (forcedState.includes(ForcedState.INPUT_FIELDS_ERROR)) {
        return {
            hasError: true,
            errorMessage: t('input.error.message.required-error-forced')
        };
    }
    if (!error) {
        return {
            hasError: false
        };
    }
    const customErrorMessage = customErrors == null ? void 0 : customErrors[error.errorType];
    const errorMessage = customErrorMessage ? ? getTranslatedError({
        translation: {
            i18n,
            t
        },
        error,
        fieldType,
        suffix
    });
    return {
        hasError: true,
        errorMessage
    };
};
//# sourceMappingURL=use-error.js.map