export const getFieldPropertiesByTarget = (form, options) => {
    var _form$fields;
    if (!form.fields) {
        return undefined;
    }
    return (_form$fields = form.fields) == null ? void 0 : _form$fields.reduce((result, field) => {
        var _field$dataExtensions, _field$validation, _field$view;
        if (!(field != null && field.target)) {
            return result;
        }
        if (options != null && options.fqdn && !((_field$dataExtensions = field.dataExtensionsDetails) != null && (_field$dataExtensions = _field$dataExtensions.fqdns) != null && _field$dataExtensions.includes(options.fqdn))) {
            return result;
        }
        if (field.nestedFormId) {
            var _form$nestedForms;
            const nestedForm = (_form$nestedForms = form.nestedForms) == null || (_form$nestedForms = _form$nestedForms.find(_nestedForm => {
                var _nestedForm$form;
                return ((_nestedForm$form = _nestedForm.form) == null ? void 0 : _nestedForm$form.id) === field.nestedFormId;
            })) == null ? void 0 : _form$nestedForms.form;
            if (nestedForm) {
                result[field.target] = getFieldPropertiesByTarget(nestedForm, options);
            }
            return result;
        }
        result[field.target] = {
            required: Boolean((_field$validation = field.validation) == null ? void 0 : _field$validation.required),
            hidden: Boolean(field.hidden),
            fieldType: (_field$view = field.view) == null ? void 0 : _field$view.fieldType
        };
        return result;
    }, {});
};
//# sourceMappingURL=get-field-properties-by-target.js.map