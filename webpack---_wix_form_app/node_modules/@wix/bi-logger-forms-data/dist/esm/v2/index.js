/**
 * A function to create a log object for the 'dummyNameSrc156Evid1' event (evid: 1)
 *
 * @param {dummyNameSrc156Evid1Params} params - The parameters for this event
 * @return {LogObject<dummyNameSrc156Evid1Params>} LogObject<dummyNameSrc156Evid1Params>
 */
export function dummyNameSrc156Evid1(params) {
    throw new Error('dummyNameSrc156Evid1 cannot be used, reason: Event is not active in catalog v2');
}
/**
 * A function to create a log object for the 'dummyName' event (evid: 1000)
 *
 * @param {dummyNameParams} params - The parameters for this event
 * @return {LogObject<dummyNameParams>} LogObject<dummyNameParams>
 */
export function dummyName(params) {
    throw new Error('dummyName cannot be used, reason: Event is not active in catalog v2');
}
/**
 * A function to create a log object for the 'aiChatUoUActionsSrc156Evid3221' event (evid: 3221)
 *
 * Event description: Actions of UoU while filling the form through chat - open, close, send message
 *
 * @param {aiChatUoUActionsSrc156Evid3221Params} params - The parameters for this event
 * @return {LogObject<aiChatUoUActionsSrc156Evid3221Params>} LogObject<aiChatUoUActionsSrc156Evid3221Params>
 */
export function aiChatUoUActionsSrc156Evid3221(params) {
    throw new Error('aiChatUoUActionsSrc156Evid3221 cannot be used, reason: Event is not active in catalog v2');
}
/**
 * A function to create a log object for the 'dummyNameSrc156Evid3200' event (evid: 3200)
 *
 * @param {dummyNameSrc156Evid3200Params} params - The parameters for this event
 * @return {LogObject<dummyNameSrc156Evid3200Params>} LogObject<dummyNameSrc156Evid3200Params>
 */
export function dummyNameSrc156Evid3200(params) {
    throw new Error('dummyNameSrc156Evid3200 cannot be used, reason: Event is not active in catalog v2');
}
/**
 * A function to create a log object for the 'oneAppSubmissionsTableTabOpenedSrc156Evid3217' event (evid: 3217)
 *
 * Event description: Trash/Spam/Submissions
 *
 * @param {oneAppSubmissionsTableTabOpenedSrc156Evid3217Params} params - The parameters for this event
 * @return {LogObject<oneAppSubmissionsTableTabOpenedSrc156Evid3217Params>} LogObject<oneAppSubmissionsTableTabOpenedSrc156Evid3217Params>
 */
export function oneAppSubmissionsTableTabOpenedSrc156Evid3217(params) {
    throw new Error('oneAppSubmissionsTableTabOpenedSrc156Evid3217 cannot be used, reason: Event is not active in catalog v2');
}
/**
 * A function to create a log object for the 'oneAppSubmissionViewOpenedSrc156Evid3218' event (evid: 3218)
 *
 * Event description: Opened specific submission
 *
 * @param {oneAppSubmissionViewOpenedSrc156Evid3218Params} params - The parameters for this event
 * @return {LogObject<oneAppSubmissionViewOpenedSrc156Evid3218Params>} LogObject<oneAppSubmissionViewOpenedSrc156Evid3218Params>
 */
export function oneAppSubmissionViewOpenedSrc156Evid3218(params) {
    throw new Error('oneAppSubmissionViewOpenedSrc156Evid3218 cannot be used, reason: Event is not active in catalog v2');
}
/**
 * A function to create a log object for the 'formSubmission' event (evid: 3001)
 *
 * Event description: Form Submitted
 *
 * @param {formSubmissionParams} params - The parameters for this event
 * @return {LogObject<formSubmissionParams>} LogObject<formSubmissionParams>
 */
export function formSubmission(params) {
    throw new Error('formSubmission cannot be used, reason: Event is not active in catalog v2');
}
/**
 * A function to create a log object for the 'dummyNameSrc156Evid3000' event (evid: 3000)
 *
 * @param {dummyNameSrc156Evid3000Params} params - The parameters for this event
 * @return {LogObject<dummyNameSrc156Evid3000Params>} LogObject<dummyNameSrc156Evid3000Params>
 */
export function dummyNameSrc156Evid3000(params) {
    throw new Error('dummyNameSrc156Evid3000 cannot be used, reason: Event is not active in catalog v2');
}
/**
 * A function to create a log object for the 'formBuilderReportSpam' event (evid: 2315)
 *
 * Event description: Action by user to mark submission as spam
 *
 * @param {formBuilderReportSpamParams} params - The parameters for this event
 * @return {LogObject<formBuilderReportSpamParams>} LogObject<formBuilderReportSpamParams>
 */
export function formBuilderReportSpam(params) {
    throw new Error('formBuilderReportSpam cannot be used, reason: Event is not active in catalog v2');
}
/**
 * A function to create a log object for the 'formBuilderSubmissionSettingsButtonClick' event (evid: 898)
 *
 * Event description: The user clicks on save in the change site member login email modal
 *
 * @param {formBuilderSubmissionSettingsButtonClickParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken - msid
 * @property {GUID} visitor_id - visitor_id
 * @property {GUID} vsi - vsi
 * @property {GUID} contact_id - contact_id
 * @property {string} platform - platform
 * @return {LogObject<formBuilderSubmissionSettingsButtonClickParams>} LogObject<formBuilderSubmissionSettingsButtonClickParams>
 */
export function formBuilderSubmissionSettingsButtonClick(params) {
    return {
        evid: 898,
        src: 5,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'inputElementsAppointmentFieldSettingsClickOnButton' event (evid: 4801)
 *
 * Event description: Input elements - appointment field settings - click on button.
 *
 * @param {inputElementsAppointmentFieldSettingsClickOnButtonParams} params - The parameters for this event
 * @property {string} fieldName - field_name
 * @property {string} buttonName - button_name
 * @property {GUID} msid - msid
 * @property {string} inputType - input_type
 * @return {LogObject<inputElementsAppointmentFieldSettingsClickOnButtonParams>} LogObject<inputElementsAppointmentFieldSettingsClickOnButtonParams>
 */
export function inputElementsAppointmentFieldSettingsClickOnButton(params) {
    return {
        evid: 4801,
        src: 5,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'inputElementsAppointmentFieldSettingsChangeValue' event (evid: 4802)
 *
 * Event description: the user change value in the settings of the appointment (and time zone) field in the editor.
 * include chequebook, radio button, text input etc
 *
 * @param {inputElementsAppointmentFieldSettingsChangeValueParams} params - The parameters for this event
 * @property {string} previousValue - previous_value
 * @property {string} fieldName - field_name
 * @property {string} fieldType - field_type
 * @property {GUID} msid - msid
 * @property {string} inputType - input_type
 * @property {string} value - value
 * @return {LogObject<inputElementsAppointmentFieldSettingsChangeValueParams>} LogObject<inputElementsAppointmentFieldSettingsChangeValueParams>
 */
export function inputElementsAppointmentFieldSettingsChangeValue(params) {
    return {
        evid: 4802,
        src: 5,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'formComposerOpened' event (evid: 14)
 *
 * Event description: form composer fully loaded
 *
 * @param {formComposerOpenedParams} params - The parameters for this event
 * @property {string} tab_name - tab_name
 * @property {boolean} is_new - is_new
 * @property {string} origin - origin
 * @property {GUID} form_guid - form_guid
 * @property {string} namespace - namespace
 * @return {LogObject<formComposerOpenedParams>} LogObject<formComposerOpenedParams>
 */
export function formComposerOpened(params) {
    return {
        evid: 14,
        src: 156,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'formFieldCrud' event (evid: 15)
 *
 * Event description: Form Field Added - add a field to form
 * Form Field Removed - remove a field from form
 * Form Field Deleted - delete a removed field permanently
 *
 * @param {formFieldCrudParams} params - The parameters for this event
 * @property {string} field_type - field_type
 * @property {string} add_action - add_action
 * @property {GUID} field_id - field_id
 * @property {string} field_target - field_target
 * @property {GUID} form_guid - form_guid
 * @property {string} error_message - error_message
 * @property {string} field_json - field_json
 * @property {string} action - action
 * @property {boolean} is_error - is_error
 * @property {string} namespace - namespace
 * @return {LogObject<formFieldCrudParams>} LogObject<formFieldCrudParams>
 */
export function formFieldCrud(params) {
    return {
        evid: 15,
        src: 156,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'formComposerSidebarAction' event (evid: 16)
 *
 * Event description: tab selected in form composer
 *
 * @param {formComposerSidebarActionParams} params - The parameters for this event
 * @property {string} tab_name - tab_name
 * @property {GUID} form_guid - form_guid
 * @property {string} namespace - namespace
 * @return {LogObject<formComposerSidebarActionParams>} LogObject<formComposerSidebarActionParams>
 */
export function formComposerSidebarAction(params) {
    return {
        evid: 16,
        src: 156,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'formFieldSettingsChanged' event (evid: 24)
 *
 * Event description: form field settings changed
 *
 * @param {formFieldSettingsChangedParams} params - The parameters for this event
 * @property {GUID} field_id - field_id
 * @property {string} setting_input_json - setting_input_json
 * @property {string} field_target - field_target
 * @property {GUID} form_guid - form_guid
 * @property {string} namespace - namespace
 * @return {LogObject<formFieldSettingsChangedParams>} LogObject<formFieldSettingsChangedParams>
 */
export function formFieldSettingsChanged(params) {
    return {
        evid: 24,
        src: 156,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'clickGeneric' event (evid: 200)
 *
 * Event description: generic event to record click actions: to add 1. edit/settings/help/three dots form click in the editor 2. Clicks after three dots in the editor 3. Create form click from settings widget
 *
 * @param {clickGenericParams} params - The parameters for this event
 * @property {string} area - area
 * @property {string} name - name
 * @property {string} parent_name - parent_name
 * @property {string} relevant_ids_json - relevant_ids_json
 * @property {string} field_id - field_id
 * @property {string} field_target - field_target
 * @property {GUID} form_guid - form_guid
 * @property {string} namespace - namespace
 * @return {LogObject<clickGenericParams>} LogObject<clickGenericParams>
 */
export function clickGeneric(params) {
    return {
        evid: 200,
        src: 156,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'modalShownGeneric' event (evid: 201)
 *
 * Event description: Used for modals in Forms.
 * Modals:
 * -Export Forms Submissions
 * -Save view
 *
 * @param {modalShownGenericParams} params - The parameters for this event
 * @property {string} relevant_ids_json - relevant_ids_json
 * @property {string} field_id - field_id
 * @property {string} modal_name - modal_name
 * @property {string} flow_name - flow_name
 * @property {string} origin - origin
 * @property {string} field_target - field_target
 * @property {GUID} form_guid - form_guid
 * @property {string} namespace - namespace
 * @return {LogObject<modalShownGenericParams>} LogObject<modalShownGenericParams>
 */
export function modalShownGeneric(params) {
    return {
        evid: 201,
        src: 156,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'modalActionGeneric' event (evid: 202)
 *
 * Event description: Used for modals in Forms.
 * Modals:
 * -Export Forms Submissions
 *
 * @param {modalActionGenericParams} params - The parameters for this event
 * @property {string} choices_json - choices_json
 * @property {string} modal_action - modal_action
 * @property {string} relevant_ids_json - relevant_ids_json
 * @property {string} field_id - field_id
 * @property {string} modal_name - modal_name
 * @property {string} flow_name - flow_name
 * @property {string} origin - origin
 * @property {string} field_target - field_target
 * @property {GUID} form_guid - form_guid
 * @property {string} namespace - namespace
 * @return {LogObject<modalActionGenericParams>} LogObject<modalActionGenericParams>
 */
export function modalActionGeneric(params) {
    return {
        evid: 202,
        src: 156,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'formView' event (evid: 1001)
 *
 * Event description: Form Viewed by UoU
 *
 * @param {formViewParams} params - The parameters for this event
 * @property {string} form_filling_id - form_filling_id
 * @property {string} form_schema_name - form_schema_name
 * @property {string} form_url - form_url
 * @property {string} form_type - form_type
 * @property {string} mode - mode
 * @property {GUID} form_guid - form_guid
 * @property {string} namespace - namespace
 * @return {LogObject<formViewParams>} LogObject<formViewParams>
 */
export function formView(params) {
    return {
        evid: 1001,
        src: 156,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'formFieldEdit' event (evid: 1002)
 *
 * Event description: UoU started filling in fields
 *
 * @param {formFieldEditParams} params - The parameters for this event
 * @property {string} field_label - field_label
 * @property {string} form_schema_name - form_schema_name
 * @property {string} field_id - field_id
 * @property {string} form_url - form_url
 * @property {string} field_target - field_target
 * @property {string} form_type - form_type
 * @property {GUID} form_guid - form_guid
 * @property {string} form_fill_session_id - form_fill_session_id
 * @property {string} namespace - namespace
 * @return {LogObject<formFieldEditParams>} LogObject<formFieldEditParams>
 */
export function formFieldEdit(params) {
    return {
        evid: 1002,
        src: 156,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'submitForm' event (evid: 1003)
 *
 * Event description: Form Submitted
 *
 * @param {submitFormParams} params - The parameters for this event
 * @property {string} form_schema_name - form_schema_name
 * @property {string} submission_status - submission_status
 * @property {string} form_url - form_url
 * @property {string} error_reason - error_reason
 * @property {GUID} form_guid - form_guid
 * @property {string} error_message - error_message
 * @property {string} form_fill_session_id - form_fill_session_id
 * @property {string} namespace - namespace
 * @property {GUID} submission_id - submission_id
 * @property {string} referral_info - Where submission was made from (website form, ai assistant, etc)
 * @return {LogObject<submitFormParams>} LogObject<submitFormParams>
 */
export function submitForm(params) {
    return {
        evid: 1003,
        src: 156,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'formFieldFocus' event (evid: 1004)
 *
 * Event description: Form field was focused
 *
 * @param {formFieldFocusParams} params - The parameters for this event
 * @property {string} field_label - field_label
 * @property {string} form_schema_name - form_schema_name
 * @property {string} field_id - field_id
 * @property {string} form_url - form_url
 * @property {string} field_target - field_target
 * @property {GUID} form_guid - form_guid
 * @property {string} action_type - action_type
 * @property {string} form_fill_session_id - form_fill_session_id
 * @property {string} namespace - namespace
 * @return {LogObject<formFieldFocusParams>} LogObject<formFieldFocusParams>
 */
export function formFieldFocus(params) {
    return {
        evid: 1004,
        src: 156,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'formErrorAppearedDissapeared' event (evid: 1006)
 *
 * Event description: For error appeared or dissapeared
 *
 * @param {formErrorAppearedDissapearedParams} params - The parameters for this event
 * @property {string} field_label - field_label
 * @property {string} form_schema_name - form_schema_name
 * @property {string} field_id - field_id
 * @property {string} form_url - form_url
 * @property {string} field_target - field_target
 * @property {GUID} form_guid - form_guid
 * @property {string} field_name - field_name
 * @property {string} action_type - action_type
 * @property {string} form_fill_session_id - form_fill_session_id
 * @property {string} error_name - error_name
 * @property {string} namespace - namespace
 * @return {LogObject<formErrorAppearedDissapearedParams>} LogObject<formErrorAppearedDissapearedParams>
 */
export function formErrorAppearedDissapeared(params) {
    return {
        evid: 1006,
        src: 156,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'formBuilderFormCrud' event (evid: 2001)
 *
 * Event description: Form Created - create a form
 * Form Saved - save a form
 * Form Removed - remove a form
 * Form Deleted - permanently delete a form
 *
 * @param {formBuilderFormCrudParams} params - The parameters for this event
 * @property {string} form_schema_name - form_schema_name
 * @property {GUID} meta_site_id - msid
 * @property {string} form_url - form_url
 * @property {string} kinds - kinds
 * @property {GUID} form_guid - form_guid
 * @property {string} template - template_name
 * @property {GUID} original_form_id - original_form_id
 * @property {string} action - action
 * @property {string} namespace - namespace
 * @property {string} formType - payment form / file upload form
 * @return {LogObject<formBuilderFormCrudParams>} LogObject<formBuilderFormCrudParams>
 */
export function formBuilderFormCrud(params) {
    return {
        evid: 2001,
        src: 156,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'formListOpened' event (evid: 3204)
 *
 * Event description: Form list opened
 *
 * @param {formListOpenedParams} params - The parameters for this event
 * @return {LogObject<formListOpenedParams>} LogObject<formListOpenedParams>
 */
export function formListOpened(params) {
    return {
        evid: 3204,
        src: 156,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'formListFilterAction' event (evid: 3206)
 *
 * Event description: Form list filter action.
 *
 * @param {formListFilterActionParams} params - The parameters for this event
 * @property {string} filterBy - filter_by
 * @return {LogObject<formListFilterActionParams>} LogObject<formListFilterActionParams>
 */
export function formListFilterAction(params) {
    return {
        evid: 3206,
        src: 156,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'formListErrorShown' event (evid: 3210)
 *
 * Event description: Error shown inside form list
 *
 * @param {formListErrorShownParams} params - The parameters for this event
 * @property {string} error_type - error_type
 * @property {string} error_message - error_message
 * @property {number} error_code - error_code
 * @return {LogObject<formListErrorShownParams>} LogObject<formListErrorShownParams>
 */
export function formListErrorShown(params) {
    return {
        evid: 3210,
        src: 156,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'formSchemaConnectionToWidgetChanged' event (evid: 3211)
 *
 * Event description: User changed which form connected to Widget
 *
 * @param {formSchemaConnectionToWidgetChangedParams} params - The parameters for this event
 * @property {GUID} widget_id - widget_id
 * @property {GUID} form_guid - form_guid
 * @property {GUID} form_guid_disconnected - form_guid_disconnected
 * @property {string} component_id - component_id
 * @property {string} namespace - namespace
 * @return {LogObject<formSchemaConnectionToWidgetChangedParams>} LogObject<formSchemaConnectionToWidgetChangedParams>
 */
export function formSchemaConnectionToWidgetChanged(params) {
    return {
        evid: 3211,
        src: 156,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'formWidgetCrud' event (evid: 3212)
 *
 * Event description: User added or removed widget from editor
 *
 * @param {formWidgetCrudParams} params - The parameters for this event
 * @property {GUID} widget_id - widget_id
 * @property {GUID} biToken - msid
 * @property {string} origin - origin
 * @property {GUID} form_guid - form_guid
 * @property {string} template - template_name
 * @property {string} component_id - component_id
 * @property {string} action - action
 * @property {string} namespace - namespace
 * @return {LogObject<formWidgetCrudParams>} LogObject<formWidgetCrudParams>
 */
export function formWidgetCrud(params) {
    return {
        evid: 3212,
        src: 156,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'publishedFormsWidgets' event (evid: 3213)
 *
 * Event description: Tells which widgets are published and to which form ids each widget is connected on site publish
 *
 * @param {publishedFormsWidgetsParams} params - The parameters for this event
 * @property {GUID} biToken - msid
 * @property {string} forms_object - forms_object
 * @property {string} namespace - namespace
 * @return {LogObject<publishedFormsWidgetsParams>} LogObject<publishedFormsWidgetsParams>
 */
export function publishedFormsWidgets(params) {
    return {
        evid: 3213,
        src: 156,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'oneAppSubmissionsTableOpened' event (evid: 3214)
 *
 * Event description: Opened sibmissions table of a Form in OneApp
 *
 * @param {oneAppSubmissionsTableOpenedParams} params - The parameters for this event
 * @property {string} formGuid - form_guid
 * @property {string} namespace - namespace
 * @property {string} origin - origin
 * @return {LogObject<oneAppSubmissionsTableOpenedParams>} LogObject<oneAppSubmissionsTableOpenedParams>
 */
export function oneAppSubmissionsTableOpened(params) {
    return {
        evid: 3214,
        src: 156,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'oneAppSubmissionsTableTabOpened' event (evid: 3215)
 *
 * Event description: Trash/Spam/Submissions
 *
 * @param {oneAppSubmissionsTableTabOpenedParams} params - The parameters for this event
 * @property {string} formGuid - form_guid
 * @property {string} namespace - namespace
 * @property {string} origin - origin
 * @property {string} tabName - Trash/Spam/Submissions
 * @return {LogObject<oneAppSubmissionsTableTabOpenedParams>} LogObject<oneAppSubmissionsTableTabOpenedParams>
 */
export function oneAppSubmissionsTableTabOpened(params) {
    return {
        evid: 3215,
        src: 156,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'oneAppSubmissionViewOpened' event (evid: 3216)
 *
 * Event description: Opened specific submission
 *
 * @param {oneAppSubmissionViewOpenedParams} params - The parameters for this event
 * @property {string} formGuid - form_guid
 * @property {string} namespace - namespace
 * @property {string} origin - origin
 * @property {string} tabName - nice to have: tab name the submission is inside: Trash/Spam/Submissions
 * @property {GUID} submissionid - Submission id
 * @return {LogObject<oneAppSubmissionViewOpenedParams>} LogObject<oneAppSubmissionViewOpenedParams>
 */
export function oneAppSubmissionViewOpened(params) {
    return {
        evid: 3216,
        src: 156,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'aiChatUoUActions' event (evid: 3219)
 *
 * Event description: Actions of UoU while filling the form through chat - open, close, send message
 *
 * @param {aiChatUoUActionsParams} params - The parameters for this event
 * @property {GUID} form_guid - form_guid
 * @property {string} action - open/close/send message
 * @property {string} form_fill_session_id - session for form filling (if possible)
 * @property {string} fieldsTotal - Total fields in a form
 * @property {string} fieldsFilled - Fields filled by AI assistant in a form
 * @return {LogObject<aiChatUoUActionsParams>} LogObject<aiChatUoUActionsParams>
 */
export function aiChatUoUActions(params) {
    return {
        evid: 3219,
        src: 156,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'aiChatUoUFormFillingStatus' event (evid: 3220)
 *
 * Event description: Actions of UoU while filling the form through chat - open, close, send message
 *
 * @param {aiChatUoUFormFillingStatusParams} params - The parameters for this event
 * @property {GUID} form_guid - form_guid
 * @property {string} fieldsFilled - how many fields were filled by AI
 * @property {string} form_fill_session_id - session for form filling (if possible)
 * @property {string} fieldsTotal - total amount of fields in a form
 * @return {LogObject<aiChatUoUFormFillingStatusParams>} LogObject<aiChatUoUFormFillingStatusParams>
 */
export function aiChatUoUFormFillingStatus(params) {
    return {
        evid: 3220,
        src: 156,
        endpoint: '',
        params
    };
}
/**
 * A function to create a log object for the 'formFieldEditAi' event (evid: 3224)
 *
 * Event description: UoU edited form field, array of fields (as AI can edit multiple fields)
 *
 * @param {formFieldEditAiParams} params - The parameters for this event
 * @property {string} fieldLabelArray - field_label array
 * @property {string} form_schema_name - form_schema_name
 * @property {string} fieldIdArray - field_id array
 * @property {string} form_url - form_url
 * @property {string} fieldTargetArray - field_target array
 * @property {string} form_type - form_type
 * @property {GUID} form_guid - form_guid
 * @property {string} form_fill_session_id - form_fill_session_id
 * @property {string} namespace - namespace
 * @return {LogObject<formFieldEditAiParams>} LogObject<formFieldEditAiParams>
 */
export function formFieldEditAi(params) {
    return {
        evid: 3224,
        src: 156,
        endpoint: '',
        params
    };
}
//# sourceMappingURL=index.js.map