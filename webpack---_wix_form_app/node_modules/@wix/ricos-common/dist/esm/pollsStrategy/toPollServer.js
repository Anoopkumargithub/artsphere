/* eslint-disable camelcase */
import {
    PollData_Poll_Settings_Permissions_VoteRole,
} from 'ricos-schema';
export const toPollServer = (poll) => {
    return Object.assign(Object.assign({}, toCreatePollPayload(poll)), {
        options: poll.options.map(toPollOption),
        id: poll.id,
        createdBy: poll.createdBy,
        count: poll.count,
        anonymousCount: poll.anonymousCount,
        creatorFlag: poll.creatorFlag,
        ownVotes: poll.ownVotes
    });
};
export const toCreatePollPayload = (poll) => {
    var _a, _b, _c;
    return {
        title: poll.title,
        mediaId: poll.image.src.url,
        ownVotes: [],
        options: poll.options.map(option => ({
            title: option.title,
            mediaId: option.image.src.url,
        })),
        settings: {
            resultsVisibility: getResultsVisibility((_a = poll.settings.permissions) === null || _a === void 0 ? void 0 : _a.view),
            multipleVotes: !!((_b = poll.settings.permissions) === null || _b === void 0 ? void 0 : _b.allowMultipleVotes),
            voteRole: getVoteRole((_c = poll.settings.permissions) === null || _c === void 0 ? void 0 : _c.vote),
            votersDisplay: !!poll.settings.showVoters,
            votesDisplay: !!poll.settings.showVotesCount,
        },
    };
};
const toPollOption = (option) => {
    return {
        id: option.id,
        title: option.title,
        mediaId: option.image.src.url,
        count: option.count,
        anonymousCount: option.anonymousCount,
        rating: option.rating,
        latestVoters: option.latestVoters,
    };
};
const getResultsVisibility = (view) => view === 'EVERYONE' ? 'ALWAYS' : view === 'VOTERS' ? 'VOTERS_ONLY' : 'ONLY_ME';
const getVoteRole = (vote) => vote === PollData_Poll_Settings_Permissions_VoteRole.UNRECOGNIZED || vote === undefined ?
    'ALL' :
    vote;
//# sourceMappingURL=toPollServer.js.map