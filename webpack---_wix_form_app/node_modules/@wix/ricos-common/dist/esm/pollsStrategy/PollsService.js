import {
    fromPollServer
} from './fromPollServer';
import {
    toCreatePollPayload,
    toPollServer
} from './toPollServer';
const BASE_URL = '/_serverless/polls-client/v1';
export class PollsService {
    constructor(instance, getHttpClientPromise) {
        this.getHttpClientPromise = getHttpClientPromise;
        this.fetchData = response => {
            var _a;
            return ((_a = response.data) === null || _a === void 0 ? void 0 : _a.question) || response.data;
        };
        this.fetchPoll = async (pollId) => {
            const httpClient = await this.getHttpClientPromise();
            const response = await httpClient.get(`/questions/${pollId}`, this.requestOptions);
            return fromPollServer(response.data.question);
        };
        this.createPoll = async (question) => {
            const httpClient = await this.getHttpClientPromise();
            const response = await httpClient.post(`/questions`, {
                question: toCreatePollPayload(question),
            }, this.requestOptions);
            return fromPollServer(response.data.question);
        };
        this.updatePoll = async (question) => {
            const httpClient = await this.getHttpClientPromise();
            const response = await httpClient.patch(`/questions/${question.id}`, {
                question: toPollServer(question),
            }, this.requestOptions);
            return fromPollServer(response.data.question);
        };
        this.vote = async (pollId, optionId) => {
            const httpClient = await this.getHttpClientPromise();
            const response = await httpClient.post(`/questions/${pollId}/vote`, {
                optionId,
            }, this.requestOptions);
            return fromPollServer(response.data.question);
        };
        this.unvote = async (pollId, optionId) => {
            const httpClient = await this.getHttpClientPromise();
            const response = await httpClient.post(`/questions/${pollId}/unvote`, {
                optionId,
            }, this.requestOptions);
            return fromPollServer(response.data.question);
        };
        this.getVoters = async (pollId, optionId, params) => {
            var _a;
            return (_a = (await this.getHttpClientPromise())) === null || _a === void 0 ? void 0 : _a.get(`/questions/${pollId}/options/${optionId}/voters`, Object.assign(Object.assign({}, this.requestOptions), {
                params
            })).then(response => this.fetchData(response));
        };
        this.requestOptions = {
            baseURL: BASE_URL,
            headers: {
                Authorization: instance
            }
        };
    }
}
//# sourceMappingURL=PollsService.js.map