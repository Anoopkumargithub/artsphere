import {
    POLL_TYPE
} from 'wix-rich-content-common';
import {
    queryMembers
} from '@wix/ambassador-members-v1-member/http';
import {
    PollsService
} from './PollsService';
const isSSR = () => typeof window === 'undefined';
const fetchMembers = (instance, getHttpClientPromise) => getHttpClientPromise().then(httpClientInstance => {
    const membersPromise = httpClientInstance
        .request(queryMembers({}), {
            signedInstance: instance
        })
        .then(res => {
            var _a;
            if (res.status === 200)
                return ((_a = res === null || res === void 0 ? void 0 : res.data) === null || _a === void 0 ? void 0 : _a.members) || [];
            else
                throw res.statusText;
        })
        .catch(e => {
            // TODO: fix api for EditorX
            // eslint-disable-next-line no-console
            console.error('[pollsStrategy] fetchMembers failed. error:', e);
            return [];
        });
    return membersPromise;
});
const normalizeMembers = (rawMembers) => {
    var _a;
    return (_a = rawMembers === null || rawMembers === void 0 ? void 0 : rawMembers.map) === null || _a === void 0 ? void 0 : _a.call(rawMembers, member => {
        var _a, _b, _c;
        return {
            siteMemberId: member.id,
            imageUrl: (_b = (_a = member.profile) === null || _a === void 0 ? void 0 : _a.photo) === null || _b === void 0 ? void 0 : _b.url,
            name: {
                nick: (_c = member.profile) === null || _c === void 0 ? void 0 : _c.nickname,
            },
        };
    });
};
let members;
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
export default function pollsStrategy(instance, getHttpClientPromise) {
    if (!instance)
        return {};
    // TODO: trigger getSiteMembers & fetch inside polls and wait for response
    !isSSR() &&
        !members &&
        fetchMembers(instance, getHttpClientPromise)
        .then(normalizeMembers)
        .then(fetchedMembers => (members = fetchedMembers));
    return {
        config: {
            [POLL_TYPE]: {
                pollServiceApi: new PollsService(instance, getHttpClientPromise),
                siteToken: instance,
                getSiteMembers: () => members,
            },
        },
    };
}
//# sourceMappingURL=pollsStrategy.js.map