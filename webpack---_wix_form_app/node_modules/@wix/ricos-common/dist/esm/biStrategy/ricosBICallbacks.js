import {
    __rest
} from "tslib";
/* eslint-disable camelcase*/
import {
    RicosBILogger
} from './RicosBILogger';
import uuid from './uuid';
import * as E from '@wix/bi-logger-rich-editor/v2';
const onPluginActionMap = {
    addPluginLink: E.addPluginLink,
    searchForPlugin: E.searchForPlugin,
    searchInsideThePlugin: E.searchInsideThePlugin,
    pluginTableColumnRowAction: E.pluginTableColumnRowAction,
    tablePluginAddColumnRow: E.tablePluginAddColumnRow,
    tablePluginDeleteColumnRow: E.tablePluginDeleteColumnRow,
    tablePluginClickOnOptionMenu: E.tablePluginClickOnOptionMenu,
    tablePluginClickActionFromOptionMenu: E.tablePluginClickActionFromOptionMenu,
    settingsModalOpenedForPlugin: E.settingsModalOpenedForPlugin,
    settingsModalClosedForPlugin: E.settingsModalClosedForPlugin,
};
const rce_session_id = uuid();
export const ricosBICallbacks = ({
    consumer: container = 'default',
    appDefId: container_id = 'empty',
    platform: container_platform,
    usage: container_usage,
    postId,
    wixRicosVersion,
    ricosVersion,
    metaSiteId,
    webBiLogger,
    logger,
    defaultParams: essentials = {},
}) => {
    const genericParams = {
        container,
        container_id,
        container_platform,
        container_usage,
        post_id: postId,
        rce_session_id,
        msid: metaSiteId,
        wixRicosVersion,
        version: ricosVersion,
    };
    const biLogger = new RicosBILogger({
        logger,
        webBiLogger,
        genericParams,
        essentials
    });
    return {
        onPluginAdd: (plugin_id, entry_point, version, content_id) => biLogger.log(E.addPlugin, {
            plugin_id,
            search_term: undefined,
            entry_point,
            version,
            content_id,
            entry_type: undefined,
            plugins_details: undefined,
            pluginUniqueId: undefined,
            button_name: undefined,
            plugin_specification: undefined,
            editor_engine: undefined,
        }),
        onPluginAddStep: ({
            entryPoint,
            entryType,
            pluginDetails,
            pluginId,
            step,
            version,
            contentId: content_id,
        }) => biLogger.log(E.addPluginStep, {
            entry_point: entryPoint,
            entry_type: entryType,
            params: undefined,
            plugin_id: pluginId,
            pluginUniqueId: pluginDetails,
            plugins_details: undefined,
            step,
            version,
            content_id,
            plugin_specification: undefined,
        }),
        onPluginAddSuccess: (plugin_id, entry_point, params, version, content_id) => biLogger.log(E.addPluginSuccess, {
            plugin_id,
            entry_point,
            entry_type: undefined,
            params: JSON.stringify(params),
            plugins_details: undefined,
            pluginUniqueId: undefined,
            version,
            content_id,
            plugin_specification: undefined,
            editor_engine: undefined,
            is_tiptap: undefined,
            mediaOrigin: undefined,
        }),
        onPluginDelete: ({
            pluginId,
            pluginDetails,
            version,
            contentId: content_id
        }) => biLogger.log(E.deletePlugin, {
            plugin_id: pluginId,
            plugins_details: JSON.stringify(pluginDetails || {}),
            pluginUniqueId: undefined,
            version,
            content_id,
            editor_engine: undefined,
        }),
        onPluginChange: (plugin_id, pluginDetails, version, content_id) => biLogger.log(E.changePlugin, {
            plugin_id,
            plugins_details: JSON.stringify(pluginDetails),
            settingSessionId: undefined,
            button_name: undefined,
            category: undefined,
            origin: undefined,
            type: undefined,
            value: undefined,
            pluginUniqueId: undefined,
            version,
            content_id,
            editor_engine: undefined,
        }),
        onPublish: (post_id, plugins_count, _plugins_details, version, content_id) => biLogger.log(E.publishPost, {
            post_id: post_id || postId,
            plugins_count: plugins_count ? JSON.stringify(plugins_count) : undefined,
            plugins_details: '',
            params: undefined,
            version,
            content_id,
            editor_engine: undefined,
            is_tiptap: undefined,
        }),
        onMenuLoad: ({
            menu,
            version,
            contentId: content_id
        }) => biLogger.log(E.menuLoad, {
            menu,
            version,
            content_id,
        }),
        onPluginModalOpened: ({
            entryPoint,
            entryType,
            pluginDetails,
            pluginId,
            version,
            contentId: content_id,
        }) => biLogger.log(E.pluginModalOpened, {
            entry_point: entryPoint,
            entry_type: entryType,
            plugin_id: pluginId,
            plugins_details: JSON.stringify(pluginDetails),
            version,
            content_id,
            plugin_specification: undefined,
            editor_engine: undefined,
            is_tiptap: undefined,
        }),
        onViewerAction: (plugin_id, action_name, value, content_id) => biLogger.log(E.viewerAction, {
            action_name,
            plugin_id,
            value,
            plugins_details: undefined,
            pluginUniqueId: undefined,
            content_id,
            params: undefined,
            productType: undefined,
            plugin_specification: undefined,
        }),
        onViewerLoaded: ({
            isPreview,
            url: postURL,
            pluginsCount,
            version,
            contentId: content_id
        }) => {
            // Enforcement fix for a boolean `isPreview` value
            const preview = typeof isPreview === 'boolean' ?
                isPreview :
                typeof isPreview === 'string' && isPreview === 'true';
            biLogger.log(E.viewerLoaded, {
                preview,
                postURL,
                version,
                content_id,
                pluginsCount: JSON.stringify(pluginsCount),
            });
        },
        onOpenEditorSuccess: (version, toolbarType, content_id) => biLogger.log(E.openEditorSuccess, {
            toolbarType,
            version,
            content_id,
            editor_engine: undefined,
            is_tiptap: undefined,
        }),
        onContentEdited: ({
            version,
            contentId: content_id
        }) => biLogger.log(E.contentAdded, {
            version,
            content_id,
            contact_id: undefined,
            container_type: undefined,
            editing_time: undefined,
            paragraph_count: undefined,
            word_count: undefined,
            editor_engine: undefined,
            is_tiptap: undefined,
        }),
        onInlineToolbarOpen: ({
            version,
            toolbarType,
            pluginId,
            contentId: content_id
        }) => biLogger.log(E.inlineToolbarOpened, {
            version,
            content_id,
            toolbarType,
            plugin_id: pluginId,
        }),
        onToolbarButtonClick: ({
            buttonName,
            category,
            origin,
            pluginDetails,
            pluginId,
            pluginUniqueId,
            type,
            value,
            version,
            contentId: content_id,
        }) => biLogger.log(E.changePlugin, {
            button_name: buttonName,
            category,
            origin,
            pluginUniqueId,
            plugin_id: pluginId,
            plugins_details: pluginDetails,
            type,
            value,
            version,
            content_id,
            settingSessionId: undefined,
            editor_engine: undefined,
        }),
        onKeyboardShortcutAction: ({
            buttonName,
            pluginId,
            value,
            version,
            contentId: content_id
        }) => biLogger.log(E.keyboardShortcutAction, {
            button_name: buttonName,
            category: undefined,
            origin: undefined,
            pluginUniqueId: undefined,
            plugin_id: pluginId,
            plugins_details: undefined,
            type: undefined,
            value,
            version,
            content_id,
            settingSessionId: undefined,
        }),
        onMediaUploadStart: (correlationId, plugin_id, fileSize, mediaType, version, content_id) => {
            biLogger.log(E.uploadMediaTry, {
                plugin_id,
                correlationId,
                fileSize,
                mediaType,
                type: undefined,
                version,
                content_id,
            });
        },
        onMediaUploadEnd: (correlationId, plugin_id, duration, fileSize, mediaType, isSuccess, errorReason, version, content_id) => {
            biLogger.log(E.uploadMediaFinished, {
                plugin_id,
                correlationId,
                duration,
                fileSize,
                mediaType,
                isSuccess,
                errorReason,
                type: undefined,
                version,
                content_id,
            });
        },
        onPluginAction: (eventName, eventParams) => {
            if (eventParams.params) {
                const params = JSON.stringify(eventParams.params);
                eventParams.params = params;
            }
            const _a = eventParams || {},
                {
                    contentId: content_id
                } = _a,
                rest = __rest(_a, ["contentId"]);
            biLogger.log(onPluginActionMap[eventName], Object.assign({
                content_id,
                version: undefined,
                plugins_details: undefined
            }, rest));
        },
        onPluginsPopOverTabSwitch: ({
            pluginId,
            buttonName,
            version,
            contentId: content_id
        }) => {
            biLogger.log(E.pluginsPopoverTabSwitch, {
                plugin_id: pluginId,
                button_name: buttonName,
                content_id,
                version,
                plugins_details: undefined,
                pluginUniqueId: undefined,
                settingSessionId: undefined,
                category: undefined,
                origin: undefined,
                value: undefined,
                type: undefined,
            });
        },
        onPluginsPopOverClick: ({
            pluginId,
            buttonName,
            version,
            contentId: content_id
        }) => {
            biLogger.log(E.pluginsPopoverClick, {
                plugin_id: pluginId,
                button_name: buttonName,
                content_id,
                version,
                plugins_details: undefined,
                pluginUniqueId: undefined,
                settingSessionId: undefined,
                category: undefined,
                origin: undefined,
                value: undefined,
                type: undefined,
            });
        },
        onChangePluginSettings: ({
            pluginId,
            actionName,
            value,
            version,
            contentId: content_id
        }) => {
            biLogger.log(E.changePluginSettings, {
                plugin_id: pluginId,
                actionName,
                content_id,
                value,
                version,
                container: undefined,
                container_id: undefined,
                container_platform: undefined,
                entry_point: undefined,
                entry_type: undefined,
                layout: undefined,
                params: value,
                pluginUniqueId: undefined,
                plugins_details: undefined,
            });
        },
        mediaPluginsDetails: ({
            pluginId,
            creator,
            title,
            track_duration,
            url,
            type,
            version,
            contentId: content_id,
        }) => {
            biLogger.log(E.audioPluginDetails, {
                plugin_id: pluginId,
                creator,
                title,
                track_duration: track_duration === null || track_duration === void 0 ? void 0 : track_duration.toString(),
                url,
                type,
                version,
                content_id,
                pluginUniqueId: undefined,
                container: undefined,
                container_id: undefined,
                container_platform: undefined,
                params: undefined,
            });
        },
    };
};
//# sourceMappingURL=ricosBICallbacks.js.map