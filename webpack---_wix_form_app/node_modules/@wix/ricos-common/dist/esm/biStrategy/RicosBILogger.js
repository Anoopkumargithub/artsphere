import {
    __rest
} from "tslib";
import {
    pickBy,
    identity,
    omit
} from 'lodash';
import {
    isSSR
} from 'wix-rich-content-common';

function paramsToBiFields(essentials) {
    const {
        bsi,
        metaSiteId: msid,
        visitorId: _visitorId,
        appId: _appId,
        instanceId: _instanceId,
        siteOwnerId: _siteOwnerId,
    } = essentials;
    return pickBy({
        bsi,
        msid,
        _visitorId,
        _appId,
        _instanceId,
        _siteOwnerId
    }, identity);
}
export class RicosBILogger {
    constructor({
        logger,
        webBiLogger,
        genericParams,
        essentials = {}
    }) {
        let biLoggerPromise;
        if (!isSSR()) {
            biLoggerPromise = Promise.resolve(webBiLogger ||
                import ( /* webpackChunkName: "wix-ricos-bi-logger-fallback" */ '@wix/web-bi-logger'));
        }
        this.logger =
            biLoggerPromise &&
            biLoggerPromise.then(biLogger => biLogger
                .factory()
                .updateDefaults(Object.assign(Object.assign({}, genericParams), paramsToBiFields(essentials)))
                .logger());
        this.newLogger = logger;
        // msid exists already in the new logger (consumer's logger)
        this.genericParams = omit(genericParams, 'msid');
    }
    log(func, params) {
        var _a, _b;
        if (this.newLogger) {
            const logObject = func(params);
            const {
                params: eventParams
            } = logObject, rest = __rest(logObject, ["params"]);
            (_b = (_a = this.newLogger).report) === null || _b === void 0 ? void 0 : _b.call(_a, Object.assign({
                params: Object.assign(Object.assign({}, this.genericParams), eventParams)
            }, rest));
        } else if (this.logger) {
            this.logger.then(logger => logger.report(func(params)));
        } else {
            console.error(`[RicosBILogger.ts:log] RicosBILogger was not initialized`);
        }
    }
}
//# sourceMappingURL=RicosBILogger.js.map