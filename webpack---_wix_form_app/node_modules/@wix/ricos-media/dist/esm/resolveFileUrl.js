import {
    getMediaFileType
} from './getMediaFileType';
const MEDIA_SERVICES_URL = '/_serverless/ricos-media-services';

function getDownloadUrl(instance) {
    return async (fileId) => {
        const params = new URLSearchParams({
            fileId
        });
        const response = await fetch(`${MEDIA_SERVICES_URL}/download-url?${params.toString()}`, {
            headers: {
                Authorization: instance
            },
        });
        const arrURLs = (await response.json());
        return arrURLs;
    };
}
const getDomain = (mediaType, metaSiteId) => {
    const mediaTypeMapper = {
        picture: 'static.wixstatic.com',
        video: 'video.wixstatic.com',
        music: 'music.wixstatic.com',
        document: `${metaSiteId}.usrfiles.com`,
        archive: `${metaSiteId}.usrfiles.com`,
    };
    return mediaTypeMapper[mediaType];
};
/**
 * Following media privacy PR (https://github.com/wix-private/wix-ricos/pull/706),
 * Files were uploaded with id=file_name, instead of id=file_url (uploadStrategy.ts).
 * In the general case, file_url = {some_postfix}/{file_name}/{some_prefix}.
 * Resolving `file_name` alone can only be done in our service (`download-url` endpoint).
 * Following this update, files will be uploaded with id=file_url again.
 *
 * This util function fixes small portion of files that were uploaded with id=file_name
 * during this period.
 * @param id fileId stored in fileComponentData
 * @returns whether id has a proper file_url prefix that can be resolved
 */
function idContainsPrefix(id) {
    return id.includes('/');
}
export function resolveFileUrl(metaSiteId, instance) {
    return ({
        id,
        type,
        privacy
    }) => {
        if (privacy !== 'private' && idContainsPrefix(id)) {
            const domain = getDomain(getMediaFileType(type), metaSiteId);
            return Promise.resolve(`https://${domain}/${id}`);
        } else {
            return getDownloadUrl(instance)(id).then(urls => {
                var _a;
                return Array.isArray(urls) && ((_a = urls[0]) === null || _a === void 0 ? void 0 : _a.path);
            });
        }
    };
}
//# sourceMappingURL=resolveFileUrl.js.map