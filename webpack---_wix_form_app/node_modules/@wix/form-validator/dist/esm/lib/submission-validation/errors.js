import {
    ErrorType as ErrorTypes
} from '@wix/ambassador-forms-v1-validation-result/types';
export {
    ErrorType as ErrorTypes
}
from '@wix/ambassador-forms-v1-validation-result/types';
const ajvErrorKeywordMap = {
    type: ErrorTypes.TYPE_ERROR,
    required: ErrorTypes.REQUIRED_VALUE_ERROR,
    maxLength: ErrorTypes.MAX_LENGTH_ERROR,
    minLength: ErrorTypes.MIN_LENGTH_ERROR,
    pattern: ErrorTypes.PATTERN_ERROR,
    format: ErrorTypes.FORMAT_ERROR,
    maximum: ErrorTypes.MAX_VALUE_ERROR,
    minimum: ErrorTypes.MIN_VALUE_ERROR,
    multipleOf: ErrorTypes.MULTIPLE_OF_VALUE_ERROR,
    additionalProperties: ErrorTypes.UNKNOWN_VALUE_ERROR,
    minItems: ErrorTypes.MIN_ITEMS_ERROR,
    maxItems: ErrorTypes.MAX_ITEMS_ERROR,
    enum: ErrorTypes.NOT_ALLOWED_VALUE_ERROR,
    formatMinimum: ErrorTypes.MIN_VALUE_ERROR,
    formatMaximum: ErrorTypes.MAX_VALUE_ERROR,
};

function getErrorFieldId(errorType, ajvError, fieldIdMask) {
    switch (errorType) {
        case ErrorTypes.REQUIRED_VALUE_ERROR:
            return combineErrorPaths(ajvError.instancePath, ajvError.params.missingProperty);
        case ErrorTypes.UNKNOWN_VALUE_ERROR:
            return combineErrorPaths(ajvError.instancePath, ajvError.params.additionalProperty);
        default:
            return fieldIdMask || ajvError.instancePath.substring(1);
    }
}

function combineErrorPaths(rootPath, property) {
    return [rootPath, property].join('/').substring(1);
}

function makeValidationError(ajvError, fieldIdMask) {
    const [errorDetails] = ajvError.params ? .errors || [ajvError];
    const errorType = ajvErrorKeywordMap[errorDetails.keyword] || ErrorTypes.UNKNOWN_ERROR;
    const fieldId = getErrorFieldId(errorType, errorDetails, fieldIdMask);
    return {
        errorPath: fieldId,
        errorType,
        errorMessage: ajvError.message || '',
        params: errorDetails.params,
    };
}
export function makeValidationErrors(ajvErrors, fieldIdMask) {
    if (!ajvErrors) {
        return [];
    }
    return ajvErrors.map((ajvError) => makeValidationError(ajvError, fieldIdMask));
}
export function groupErrorsByTarget(errors) {
    return errors.reduce((byTarget, error) => {
        const [target, ...rest] = error.errorPath.split('/');
        if (!byTarget[target]) {
            byTarget[target] = [];
        }
        byTarget[target].push({ ...error,
            errorPath: rest.join('/')
        });
        return byTarget;
    }, {});
}
//# sourceMappingURL=errors.js.map