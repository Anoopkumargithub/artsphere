import {
    Decoration_Type
} from 'ricos-schema';
import {
    EmptyDecoration
} from './empty-decoration.js';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value
}) : obj[key] = value;
var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
        if (__hasOwnProp.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
            if (__propIsEnum.call(b, prop))
                __defNormalProp(a, prop, b[prop]);
        }
    return a;
};
const parseFontWeight = (fontWeight) => {
    if (fontWeight === "bold") {
        return 700;
    }
    if (fontWeight === "normal") {
        return 400;
    }
    return parseInt(fontWeight, 10);
};
class BoldDecoration {
    constructor(customStyle) {
        this.type = Decoration_Type.BOLD;
        this.customStyle = customStyle;
    }
    static of (decoration) {
        if (decoration.type !== Decoration_Type.BOLD) {
            throw new TypeError(`invalid decoration initializer ${decoration}`);
        }
        return new BoldDecoration({
            fontWeight: decoration.fontWeightValue
        });
    }
    getDecoration() {
        return {
            type: this.type,
            fontWeightValue: parseFontWeight(this.customStyle.fontWeight)
        };
    }
    static fromCustomStyle(customStyle) {
        return new BoldDecoration(customStyle);
    }
    fromCustomStyle(customStyle) {
        return BoldDecoration.fromCustomStyle(customStyle);
    }
    toCustomStyle() {
        return this.customStyle;
    }
    overrideWith(decoration) {
        if (!(decoration instanceof BoldDecoration || decoration instanceof EmptyDecoration)) {
            throw new TypeError(`invalid merge decoration ${decoration}`);
        }
        const customStyle = __spreadValues(__spreadValues({}, this.customStyle), decoration.toCustomStyle());
        return new BoldDecoration(customStyle);
    }
}

export {
    BoldDecoration
};
//# sourceMappingURL=bold-decoration.js.map