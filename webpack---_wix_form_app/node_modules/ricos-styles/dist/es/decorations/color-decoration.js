import {
    pickBy
} from 'lodash';
import {
    Decoration_Type
} from 'ricos-schema';
import {
    EmptyDecoration
} from './empty-decoration.js';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value
}) : obj[key] = value;
var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
        if (__hasOwnProp.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
            if (__propIsEnum.call(b, prop))
                __defNormalProp(a, prop, b[prop]);
        }
    return a;
};
class ColorDecoration {
    constructor(customStyle) {
        this.type = Decoration_Type.COLOR;
        this.customStyle = customStyle;
    }
    static of (decoration) {
        if (decoration.type !== Decoration_Type.COLOR) {
            throw new TypeError(`invalid decoration initializer ${decoration}`);
        }
        const {
            foreground: color,
            background: backgroundColor
        } = decoration.colorData || {};
        const customStyle = pickBy({
            color,
            backgroundColor
        });
        return new ColorDecoration(customStyle);
    }
    getDecoration() {
        return {
            type: this.type,
            colorData: __spreadValues(__spreadValues({}, this.customStyle.color && {
                foreground: this.customStyle.color
            }), this.customStyle.backgroundColor && {
                background: this.customStyle.backgroundColor
            })
        };
    }
    static fromCustomStyle(customStyle) {
        return new ColorDecoration(customStyle);
    }
    fromCustomStyle(customStyle) {
        return ColorDecoration.fromCustomStyle(customStyle);
    }
    toCustomStyle() {
        return this.customStyle;
    }
    overrideWith(decoration) {
        if (!(decoration instanceof ColorDecoration || decoration instanceof EmptyDecoration)) {
            throw new TypeError(`invalid merge decoration ${decoration}`);
        }
        const customStyle = __spreadValues(__spreadValues({}, this.customStyle), decoration.toCustomStyle());
        return new ColorDecoration(customStyle);
    }
}

export {
    ColorDecoration
};
//# sourceMappingURL=color-decoration.js.map