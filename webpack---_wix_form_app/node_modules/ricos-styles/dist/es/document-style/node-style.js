var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value
}) : obj[key] = value;
var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
        if (__hasOwnProp.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
            if (__propIsEnum.call(b, prop))
                __defNormalProp(a, prop, b[prop]);
        }
    return a;
};
const _RicosNodeStyle = class {
    constructor(nodeStyle) {
        this.getNodeStyle = () => this.nodeStyle;
        this.toCustomStyle = () => {
            return {
                paddingBottom: this.nodeStyle.paddingBottom,
                paddingTop: this.nodeStyle.paddingTop
            };
        };
        this.overrideWith = (NodeStyle = {}) => {
            return _RicosNodeStyle.of(__spreadValues(__spreadValues({}, this.nodeStyle), NodeStyle));
        };
        this.nodeStyle = nodeStyle;
    }
    static of (nodeStyle) {
        return new _RicosNodeStyle(nodeStyle || {});
    }
};
let RicosNodeStyle = _RicosNodeStyle;
RicosNodeStyle.fromCustomStyle = (customStyle) => {
    const {
        paddingBottom,
        paddingTop
    } = customStyle;
    const nodeStyle = {
        paddingBottom,
        paddingTop
    };
    return _RicosNodeStyle.of(nodeStyle);
};

export {
    RicosNodeStyle
};
//# sourceMappingURL=node-style.js.map