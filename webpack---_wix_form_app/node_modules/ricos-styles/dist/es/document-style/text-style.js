import {
    pickBy
} from 'lodash';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value
}) : obj[key] = value;
var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
        if (__hasOwnProp.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
            if (__propIsEnum.call(b, prop))
                __defNormalProp(a, prop, b[prop]);
        }
    return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const _RicosTextStyle = class {
    constructor(textStyle) {
        this.getTextStyle = () => this.textStyle;
        this.toCustomStyle = () => {
            return {
                lineHeight: this.textStyle.lineHeight
            };
        };
        this.overrideWith = (textStyle) => {
            return _RicosTextStyle.of(__spreadValues(__spreadValues({}, this.textStyle), textStyle));
        };
        this.textStyle = this.preprocess(textStyle);
    }
    preprocess(textStyle) {
        let lineHeight = textStyle.lineHeight;
        if (lineHeight && !Number(lineHeight)) {
            if (lineHeight.includes("px") || lineHeight.includes("em")) {
                lineHeight = lineHeight.slice(0, lineHeight.length - 2);
            }
        }
        return pickBy(__spreadProps(__spreadValues({}, textStyle), {
            lineHeight
        }));
    }
    static of (textStyle) {
        return new _RicosTextStyle(textStyle || {});
    }
};
let RicosTextStyle = _RicosTextStyle;
RicosTextStyle.fromCustomStyle = (customStyle) => {
    const {
        lineHeight
    } = customStyle;
    const textStyle = {
        lineHeight
    };
    return _RicosTextStyle.of(textStyle);
};

export {
    RicosTextStyle
};
//# sourceMappingURL=text-style.js.map