import {
    isEmpty
} from 'lodash';
import createPalette from '../themeStrategy/generators/palette.js';
import CustomStyle from './custom-style.js';
import EmptyCustomStyle from './empty-custom-style.js';
import '../themeUtils-3da3397c.js';
import '../themeStrategy/generators/identifiers.js';
import '../themeStrategy/palettes/presets.js';
import '../themeStrategy/palettes/wixPaletteUtils.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value
}) : obj[key] = value;
var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
        if (__hasOwnProp.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
            if (__propIsEnum.call(b, prop))
                __defNormalProp(a, prop, b[prop]);
        }
    return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const textCustomStylesKeys = ["h1", "h2", "h3", "h4", "h5", "h6", "p", "quote", "codeBlock"];
const _CustomStyles = class {
    constructor(customStyles) {
        this.customStyles = customStyles;
    }
    static of (rawCustomStyles) {
        const customStyles = Object.entries(rawCustomStyles).map(
            ([key, value]) => new CustomStyle(key, value)
        );
        return new _CustomStyles(customStyles);
    }
    static fromTheme(theme) {
        const customStyles = theme.customStyles || {};
        const {
            colors
        } = createPalette(theme.palette, theme.paletteConfig);
        const {
            textColor: color,
            bgColor: backgroundColor
        } = colors || {};
        if ((colors == null ? void 0 : colors.textColor) || (colors == null ? void 0 : colors.bgColor)) {
            const colorsCustomStyles = textCustomStylesKeys.reduce(
                (acc, key) => __spreadProps(__spreadValues({}, acc), {
                    [key]: {
                        color,
                        backgroundColor
                    }
                }), {}
            );
            return _CustomStyles.of(colorsCustomStyles).overrideWith(_CustomStyles.of(customStyles));
        }
        return _CustomStyles.of(customStyles);
    }
    toCustomStyles() {
        return this.customStyles.reduce((acc, style) => {
            const customStyle = style.toCustomStyle();
            return __spreadValues(__spreadValues({}, acc), !isEmpty(customStyle) ? {
                [style.getKey()]: customStyle
            } : {});
        }, {});
    }
    byKey(key) {
        return this.customStyles.find((style) => style.getKey() === key) || _CustomStyles.empty;
    }
    overrideWith(customStyles) {
        const genericCustomStyles = textCustomStylesKeys.reduce(
            (acc, key) => __spreadProps(__spreadValues({}, acc), {
                [key]: {}
            }), {}
        );
        const overridenCustomStyles = _CustomStyles.of(genericCustomStyles).customStyles.map(
            (style) => style.overrideWith(this.byKey(style.getKey())).overrideWith(customStyles.byKey(style.getKey()))
        );
        return new _CustomStyles(overridenCustomStyles);
    }
};
let CustomStyles = _CustomStyles;
CustomStyles.empty = new EmptyCustomStyle();

export {
    CustomStyles as
    default
};
//# sourceMappingURL=custom-styles.js.map