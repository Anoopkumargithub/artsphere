var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value
}) : obj[key] = value;
var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
        if (__hasOwnProp.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
            if (__propIsEnum.call(b, prop))
                __defNormalProp(a, prop, b[prop]);
        }
    return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const defaultFallbackColor = "#000000";
const defaultFallbackColorBright = "#FFFFFF";

function rgbaToHexA(rgbaArr, withAlpha) {
    const rgba = rgbaArr.map((r2, index) => {
        if (r2.indexOf("%") > -1) {
            const p = parseFloat(r2.substr(0, r2.length - 1)) / 100;
            if (index < 3) {
                return Math.round(p * 255);
            }
            return p;
        }
        return parseFloat(r2);
    });
    let r = Number(rgba[0]).toString(16),
        g = Number(rgba[1]).toString(16),
        b = Number(rgba[2]).toString(16),
        a = Math.round(Number(rgba[3]) * 255).toString(16);
    if (r.length === 1)
        r = "0" + r;
    if (g.length === 1)
        g = "0" + g;
    if (b.length === 1)
        b = "0" + b;
    if (a.length === 1)
        a = "0" + a;
    return "#" + r + g + b + (withAlpha ? a : "");
}

function toHexFormat(color) {
    if (color === "transparent") {
        return defaultFallbackColorBright + "00";
    }
    if ((color.startsWith("rgb(") || color.startsWith("rgba(")) && color.endsWith(")")) {
        const rgba = color.replace(/^(rgba\()|^(rgb\()|(\s)|(\))$/g, "").split(",");
        if (rgba.length === 4) {
            return rgbaToHexA(rgba, true);
        } else if (rgba.length === 3) {
            return rgbaToHexA(rgba);
        } else
            throw Error("[ricos-common] themeUtils.ts: Bad RGB / RGBA value: " + color);
    }
    if (!color.startsWith("#")) {
        throw Error(
            `[ricos-common] themeUtils.ts: Bad Hex (${color}).
      Ricos color can only accept "transparent" or a HEX formatted color as its value`
        );
    }
    return color;
}

function canTransformToHex(color) {
    if (color === "transparent") {
        return true;
    }
    if ((color.startsWith("rgb(") || color.startsWith("rgba(")) && color.endsWith(")")) {
        const rgba = color.replace(/^(rgba\()|^(rgb\()|(\s)|(\))$/g, "").split(",");
        return rgba.length === 4 || rgba.length === 3;
    }
    if (!color.startsWith("#")) {
        return false;
    }
    return true;
}

function getBrightness(hexCode) {
    const _hexCode = hexCode.replace("#", "");
    const r = parseInt(_hexCode.substr(0, 2), 16);
    const g = parseInt(_hexCode.substr(2, 2), 16);
    const b = parseInt(_hexCode.substr(4, 2), 16);
    return (r * 299 + g * 587 + b * 114) / 1e3;
}

function isBright(hexColor) {
    if (!hexColor) {
        return false;
    }
    return getBrightness(hexColor) > 150;
}

function adaptForeground(actionColor, fallbackColor) {
    if (!actionColor) {
        return void 0;
    }
    return getBrightness(actionColor) < 150 ? actionColor : fallbackColor || defaultFallbackColor;
}

function hexToRgbA(hexColor) {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})?$/i.exec(
        hexColor.toLowerCase()
    );
    if (result) {
        return {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16),
            a: parseInt(result[4], 16)
        };
    }
    throw new Error("Bad Hex");
}

function toRgbTuple(hexColor) {
    if (!hexColor) {
        return void 0;
    }
    const {
        r,
        g,
        b
    } = hexToRgbA(hexColor);
    return `${r}, ${g}, ${b}`;
}

function toCssRgbA(hexColor, opacity) {
    if (!hexColor) {
        return hexColor;
    }
    if (/^#([A-Fa-f\d]{2}){1,4}$/.test(hexColor)) {
        const {
            r,
            g,
            b,
            a
        } = hexToRgbA(hexColor);
        return `rgba(${r}, ${g}, ${b}, ${opacity * (a || 1)})`;
    }
    throw new Error("[ricos-common] themeUtils.ts: Bad Hex");
}

function toCssRgb(rgbTuple) {
    return `rgb(${rgbTuple})`;
}
const toDashedKey = (str) => str.replace(/([A-Z])/g, (all, letter) => "-" + letter.toLowerCase());
const spacing = " ".repeat(4);
const toVarStrings = (varsObject) => {
    const convertToRicosKey = (key) => "--ricos-" + toDashedKey(key);
    const cleanFromSemicolons = (value) => typeof value === "string" ? value.split(";")[0] : value;
    return Object.entries(varsObject).filter((entry) => !!entry[1]).map((entry) => convertToRicosKey(entry[0]) + ": " + cleanFromSemicolons(entry[1]) + ";\n").join(spacing);
};
const buildCssVars = (parentClass, ...varObjects) => `
  ${parentClass ? `.${parentClass}` : "*"} {
    ${varObjects.map(toVarStrings).join(spacing).replace(/[\s\t]+$/, "")}
  }
`;
const buildCssVarsObj = (varObject) => {
    const convertToRicosKey = (key) => "--ricos-" + toDashedKey(key);
    return Object.entries(varObject).reduce(
        (acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
            [convertToRicosKey(key)]: value
        }), {}
    );
};

var utils = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    adaptForeground: adaptForeground,
    buildCssVars: buildCssVars,
    buildCssVarsObj: buildCssVarsObj,
    canTransformToHex: canTransformToHex,
    isBright: isBright,
    toCssRgb: toCssRgb,
    toCssRgbA: toCssRgbA,
    toDashedKey: toDashedKey,
    toHexFormat: toHexFormat,
    toRgbTuple: toRgbTuple,
    toVarStrings: toVarStrings
});

export {
    adaptForeground as a, toRgbTuple as b, canTransformToHex as c, toCssRgbA as d, toCssRgb as e, toDashedKey as f, toVarStrings as g, buildCssVars as h, isBright as i, buildCssVarsObj as j, toHexFormat as t, utils as u
};
//# sourceMappingURL=themeUtils-3da3397c.js.map