import {
    merge
} from 'lodash';
import {
    TextStyleTransformer
} from '../text-style-transformer.js';
import createCustomStyles from './generators/customStyles.js';
import createPalette from './generators/palette.js';
import createTypography from './generators/typography.js';
import {
    j as buildCssVarsObj
} from '../themeUtils-3da3397c.js';
import '../utils-4912d41d.js';
import 'ricos-content/libs/utils';
import '../document-style/node-style.js';
import '../document-style/text-style.js';
import '../textual-theme/custom-styles.js';
import '../textual-theme/custom-style.js';
import '../textual-theme/empty-custom-style.js';
import '../decorations/decorations.js';
import 'ricos-schema';
import '../decorations/bold-decoration.js';
import '../decorations/empty-decoration.js';
import '../decorations/color-decoration.js';
import '../decorations/font-size-decoration.js';
import '../decorations/italic-decoration.js';
import './generators/identifiers.js';
import './palettes/presets.js';
import './palettes/wixPaletteUtils.js';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value
}) : obj[key] = value;
var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
        if (__hasOwnProp.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
            if (__propIsEnum.call(b, prop))
                __defNormalProp(a, prop, b[prop]);
        }
    return a;
};
const buildThemeCssVars = (theme, documentStyle) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
    const documentStyleTheme = TextStyleTransformer.fromDocumentStyle(documentStyle).toTheme();
    const mergedTheme = merge({}, theme, documentStyleTheme);
    const {
        palette,
        paletteConfig,
        typography,
        customStyles,
        settingsStyles,
        nativeStyle
    } = mergedTheme;
    const {
        paletteVarsObject
    } = createPalette(palette, paletteConfig);
    const typographyVarsObject = createTypography(typography);
    const customsVarsObject = createCustomStyles({
        customStyles,
        settingsStyles,
        nativeStyle
    });
    const breakoutVars = {
        "breakout-normal-padding-start": (_b = (_a = theme == null ? void 0 : theme.breakout) == null ? void 0 : _a.normalPadding.start) != null ? _b : "0",
        "breakout-normal-padding-end": (_d = (_c = theme == null ? void 0 : theme.breakout) == null ? void 0 : _c.normalPadding.end) != null ? _d : "0",
        "breakout-full-width-padding-start": (_g = (_f = (_e = theme == null ? void 0 : theme.breakout) == null ? void 0 : _e.fullWidthPadding) == null ? void 0 : _f.start) != null ? _g : "0",
        "breakout-full-width-padding-end": (_j = (_i = (_h = theme == null ? void 0 : theme.breakout) == null ? void 0 : _h.fullWidthPadding) == null ? void 0 : _i.end) != null ? _j : "0"
    };
    const varsObj = __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, paletteVarsObject), typographyVarsObject), customsVarsObject), breakoutVars);
    return buildCssVarsObj(varsObj);
};

export {
    buildThemeCssVars
};
//# sourceMappingURL=build-theme-css-vars.js.map