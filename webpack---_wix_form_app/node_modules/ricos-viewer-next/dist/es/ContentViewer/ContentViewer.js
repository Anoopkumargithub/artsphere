import classnames from 'classnames';
import {
    merge
} from 'lodash';
import React, {
    Component
} from 'react';
import {
    THEME_DEFAULTS,
    buildThemeCssVars
} from 'ricos-styles';
import {
    getLangDir,
    SPOILER_TYPE,
    GlobalContext,
    Version,
    AccessibilityListener
} from 'wix-rich-content-common';
import {
    shouldShowDebuggingInfo,
    RicosDevToolsLazy
} from 'wix-rich-content-common/libs/devTools';
import {
    v as viewerStyles,
    C as ContentTraverser
} from '../ContentTraverser-87008c25.js';
import AddAnchors from './components/AddAnchors.js';
import 'ricos-context';
import './rericos/decorators/index.js';
import 'ricos-common-plugins/viewer';
import './rericos/decorators/breakoutDecorator.js';
import './rericos/decorators/nodeViewDecorators.js';
import './rericos/renderers/index.js';
import 'ricos-schema';
import './rericos/renderers/blockquote/blockquote.js';
import '../indentation-01d0a32d.js';
import './rericos/utils/Anchorable.js';
import './rericos/utils/paywallSeo.js';
import './rericos/renderers/consts.js';
import './rericos/renderers/codeblock/codeblock.js';
import '../alignment.rtlignore-b7de0bc6.js';
import './rericos/renderers/heading/heading.js';
import './rericos/renderers/lists/bulletedList.js';
import '../lists-6e521021.js';
import './rericos/renderers/lists/listItem.js';
import 'ricos-types';
import './rericos/renderers/lists/orderedList.js';
import './rericos/renderers/paragraph/paragraph.js';
import './rericos/renderers/text/text.js';
import './rericos/renderers/plugins/getPluginRenderers.js';
import './rericos/renderers/plugins/fromExternalNode.js';
import 'ricos-content/libs/struct-converters';
import '../getClassNames-2d778f5a.js';
import './rericos/renderers/plugins/nodeViewContainer.js';
import './components/ErrorBoundary.js';
import './rericos/renderers/plugins/ContainerElement.js';
import './rericos/utils/SpoilerManager.js';
import './RicosNodesRenderer.js';
import './components/Anchor.js';

var rtlStyles = {
    "rtl": "rdLhO",
    "ltr": "-Me0k"
};

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value
}) : obj[key] = value;
var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
        if (__hasOwnProp.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
            if (__propIsEnum.call(b, prop))
                __defNormalProp(a, prop, b[prop]);
        }
    return a;
};
class ContentViewer extends Component {
    constructor(props) {
        super(props);
        this.getContextualData = ({
            t,
            theme,
            isMobile = false,
            anchorTarget,
            relValue,
            customAnchorScroll,
            config,
            locale,
            disabled,
            seoMode,
            iframeSandboxDomain,
            textAlignment,
            experiments,
            textDirection,
            direction,
            helpers,
            onNodeClick
        }) => {
            var _a;
            return {
                t,
                theme: theme || {},
                isMobile,
                anchorTarget,
                relValue,
                customAnchorScroll,
                config,
                helpers: helpers || {},
                locale: locale || "en",
                disabled,
                seoMode,
                iframeSandboxDomain,
                disableRightClick: (_a = config == null ? void 0 : config.uiSettings) == null ? void 0 : _a.disableRightClick,
                textAlignment,
                experiments,
                textDirection,
                languageDir: direction || getLangDir(locale),
                onNodeClick
            };
        };
        this.styles = __spreadValues(__spreadValues({}, viewerStyles), rtlStyles);
    }
    render() {
        var _a, _b;
        const {
            onError,
            config = {},
            onHover,
            isMobile = false,
            addAnchors,
            onMouseOver = () => {},
            content,
            setRef,
            typeMappers,
            nodeViewRenderers,
            nodeViewDecorators,
            environment = "liveSite",
            debugMode,
            experiments = {},
            t
        } = this.props;
        const {
            styles
        } = this;
        const SpoilerViewerWrapper = (_a = config[SPOILER_TYPE]) == null ? void 0 : _a.SpoilerViewerWrapper;
        const contextualData = this.getContextualData(this.props);
        const viewerClassName = classnames(styles.viewer, {
            [rtlStyles.rtl]: contextualData.textDirection === "rtl"
        });
        const themeWithDefaults = merge({},
            isMobile ? THEME_DEFAULTS.mobile : THEME_DEFAULTS.desktop,
            contextualData.theme
        );
        const style = buildThemeCssVars(themeWithDefaults, (_b = content == null ? void 0 : content.documentStyle) != null ? _b : {});
        const dataId = {
            "data-id": "content-viewer"
        };
        return /* @__PURE__ */ React.createElement(GlobalContext.Provider, {
            key: "RicosViewer",
            value: {
                experiments,
                isMobile,
                t
            }
        }, /* @__PURE__ */ React.createElement(
            "div",
            __spreadValues({
                className: classnames(styles.wrapper),
                dir: contextualData.languageDir,
                onMouseEnter: (e) => onHover && onHover(e),
                onMouseOver,
                ref: setRef,
                style
            }, dataId),
            shouldShowDebuggingInfo(debugMode == null ? void 0 : debugMode.includes("all")) ? /* @__PURE__ */ React.createElement(React.Suspense, null, /* @__PURE__ */ React.createElement(
                RicosDevToolsLazy, {
                    version: Version.currentVersion,
                    mode: "viewer",
                    contentState: content,
                    ricosProps: this.props
                }
            )) : void 0,
            /* @__PURE__ */
            React.createElement("div", {
                className: viewerClassName
            }, /* @__PURE__ */ React.createElement(AddAnchors, {
                addAnchors
            }, /* @__PURE__ */ React.createElement(
                ContentTraverser, {
                    content,
                    typeMappers,
                    context: contextualData,
                    nodeViewRenderers,
                    nodeViewDecorators,
                    SpoilerViewerWrapper
                }
            ))),
            /* @__PURE__ */
            React.createElement(AccessibilityListener, {
                isMobile
            })
        ));
    }
}
ContentViewer.defaultProps = {
    theme: {},
    locale: "en",
    config: {}
};

export {
    ContentViewer as
    default
};
//# sourceMappingURL=ContentViewer.js.map