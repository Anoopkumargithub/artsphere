import classnames from 'classnames';
import {
    camelCase
} from 'lodash';
import React, {
    useContext
} from 'react';
import {
    RicosViewerContext,
    RicosNodeContext
} from 'ricos-context';
import {
    Node_Type
} from 'ricos-schema';
import {
    normalizeHref,
    convertRelObjectToString,
    addAnchorTagToUrl,
    anchorScroll
} from 'wix-rich-content-common';
import {
    isPaywallSeo,
    getPaywallSeoClass
} from '../../utils/paywallSeo.js';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value
}) : obj[key] = value;
var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
        if (__hasOwnProp.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
            if (__propIsEnum.call(b, prop))
                __defNormalProp(a, prop, b[prop]);
        }
    return a;
};
const disableCustomWidthMapper = {
    [Node_Type.IMAGE]: (componentData, isMobile) => {
        var _a, _b, _c;
        return ((_a = componentData == null ? void 0 : componentData.image) == null ? void 0 : _a.width) && isMobile && (((_c = (_b = componentData == null ? void 0 : componentData.containerData) == null ? void 0 : _b.width) == null ? void 0 : _c.custom) || 0) > 150;
    }
};
const isMediumOrFullWidth = (containerData) => {
    var _a, _b;
    return ((_a = containerData == null ? void 0 : containerData.width) == null ? void 0 : _a.size) && (containerData.width.size === "CONTENT" || ((_b = containerData.width) == null ? void 0 : _b.size) === "FULL_WIDTH");
};
const originalSizeMapper = {
    [Node_Type.IMAGE]: (componentData) => {
        var _a;
        return isMediumOrFullWidth(componentData.containerData) ? "100%" : `${(_a = componentData == null ? void 0 : componentData.image) == null ? void 0 : _a.width}px`;
    },
    [Node_Type.GIF]: (componentData) => isMediumOrFullWidth(componentData.containerData) ? "100%" : `${componentData.width}px`
};
const ContainerElement = ({
    node,
    nodeIndex,
    context,
    className,
    children
}) => {
    var _a, _b, _c;
    const {
        customAnchorScroll
    } = useContext(RicosViewerContext);
    const {
        parentNode
    } = useContext(RicosNodeContext);
    const dataProperty = `${camelCase(node.type)}Data`;
    const {
        seoMode,
        anchorTarget,
        isMobile
    } = context;
    const {
        link,
        containerData
    } = node[dataProperty] || {};
    const wrapInLink = link && node.type !== Node_Type.BUTTON;
    const Tag = wrapInLink ? "a" : "div";
    const disableCustomWidth = (_a = disableCustomWidthMapper[node.type]) == null ? void 0 : _a.call(disableCustomWidthMapper, node[dataProperty], isMobile);
    const customWidth = ((_b = containerData == null ? void 0 : containerData.width) == null ? void 0 : _b.custom) && !disableCustomWidth ? `${isNaN(Number(containerData.width.custom)) ? containerData.width.custom : parseInt(containerData.width.custom)}px` : void 0;
    const originalWidth = (_c = originalSizeMapper[node.type]) == null ? void 0 : _c.call(originalSizeMapper, node[dataProperty]);
    const width = customWidth || originalWidth;
    const style = containerData && width ? {
        width: `min(100%, ${width})`
    } : void 0;
    const urlHref = (link == null ? void 0 : link.url) && normalizeHref(link.url);
    const anchorHref = link == null ? void 0 : link.anchor;
    const viewerAnchorHref = anchorHref ? `#viewer-${anchorHref}` : void 0;
    const linkProps = wrapInLink ? {
        href: urlHref != null ? urlHref : viewerAnchorHref,
        target: link.target ? `_${link.target.toLowerCase()}` : anchorTarget,
        rel: link.rel && convertRelObjectToString(link.rel),
        onClick: anchorHref ? (e) => {
            if (customAnchorScroll) {
                return customAnchorScroll(e, anchorHref);
            }
            const anchorRefId = `viewer-${anchorHref}`;
            const element = document.getElementById(anchorRefId);
            if (!element) {
                return;
            }
            addAnchorTagToUrl(anchorRefId);
            anchorScroll(element);
        } : void 0
    } : {};
    return /* @__PURE__ */ React.createElement(
        Tag,
        __spreadValues({
            className: classnames(
                className, !parentNode && isPaywallSeo(seoMode) && getPaywallSeoClass((seoMode == null ? void 0 : seoMode.paywall) || {}, nodeIndex)
            ),
            style
        }, linkProps),
        children
    );
};

export {
    ContainerElement
};
//# sourceMappingURL=ContainerElement.js.map