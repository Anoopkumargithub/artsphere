import classnames from 'classnames';
import React, {
    useContext
} from 'react';
import {
    RicosViewerContext,
    RicosAlignmentContext,
    RicosNodeContext,
    RicosNodeContextProvider
} from 'ricos-context';
import {
    TextStyle_TextAlignment
} from 'ricos-schema';
import {
    a as alignmentStyle
} from '../../../../alignment.rtlignore-b7de0bc6.js';
import Anchorable from '../../utils/Anchorable.js';
import {
    isPaywallSeo,
    getPaywallSeoClass
} from '../../utils/paywallSeo.js';

var styles = {
    "blockStyleSpacing": "rrl6b",
    "codeBlock": "_1DCIh rrl6b",
    "renderedInTable": "vTiuc"
};

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value
}) : obj[key] = value;
var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
        if (__hasOwnProp.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
            if (__propIsEnum.call(b, prop))
                __defNormalProp(a, prop, b[prop]);
        }
    return a;
};
var __objRest = (source, exclude) => {
    var target = {};
    for (var prop in source)
        if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
            target[prop] = source[prop];
    if (source != null && __getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(source)) {
            if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
                target[prop] = source[prop];
        }
    return target;
};
const CodeBlock = ({
    node,
    nodeIndex,
    RicosNodesRenderer
}) => {
    var _a;
    const {
        seoMode
    } = useContext(RicosViewerContext);
    const {
        textAlignment: parentAlignment
    } = useContext(RicosAlignmentContext);
    const {
        parentNode
    } = useContext(RicosNodeContext);
    const {
        textAlignment,
        lineHeight
    } = ((_a = node.codeBlockData) == null ? void 0 : _a.textStyle) || {};
    const codeBlockClassName = classnames(
        styles.codeBlock,
        alignmentStyle[textAlignment || parentAlignment || TextStyle_TextAlignment.AUTO], !parentNode && isPaywallSeo(seoMode) && getPaywallSeoClass((seoMode == null ? void 0 : seoMode.paywall) || {}, nodeIndex)
    );
    const style = lineHeight ? {
        lineHeight
    } : {};
    return /* @__PURE__ */ React.createElement(Anchorable, {
        nodeId: node.id
    }, /* @__PURE__ */ React.createElement("pre", {
        className: codeBlockClassName,
        style,
        dir: "auto"
    }, /* @__PURE__ */ React.createElement(
        "span", {
            className: classnames(
                textAlignment === TextStyle_TextAlignment.JUSTIFY && alignmentStyle[textAlignment]
            )
        },
        /* @__PURE__ */
        React.createElement(RicosNodeContextProvider, {
            parentNode: node,
            parentIndex: nodeIndex
        }, /* @__PURE__ */ React.createElement(RicosNodesRenderer, {
            nodes: node.nodes
        }))
    )));
};
const CodeBlockRenderer = (_a) => {
    var _b = _a,
        {
            node
        } = _b,
        props = __objRest(_b, ["node"]);
    return /* @__PURE__ */ React.createElement(CodeBlock, __spreadValues({
        key: node.id,
        node
    }, props));
};

export {
    CodeBlockRenderer as
    default
};
//# sourceMappingURL=codeblock.js.map