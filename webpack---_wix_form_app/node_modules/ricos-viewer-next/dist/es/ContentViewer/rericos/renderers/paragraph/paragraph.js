import classnames from 'classnames';
import React, {
    useContext
} from 'react';
import {
    RicosViewerContext,
    RicosAlignmentContext,
    RicosNodeContext,
    RicosDirectionHandledContext,
    RicosNodeContextProvider
} from 'ricos-context';
import {
    TextStyle_TextAlignment
} from 'ricos-schema';
import {
    a as alignmentStyle
} from '../../../../alignment.rtlignore-b7de0bc6.js';
import {
    i as indentStyle
} from '../../../../indentation-01d0a32d.js';
import Anchorable from '../../utils/Anchorable.js';
import {
    isPaywallSeo,
    getPaywallSeoClass
} from '../../utils/paywallSeo.js';
import {
    indentLevelToClassName
} from '../consts.js';

var styles = {
    "fontElementMap": "qPZFH",
    "elementSpacing": "bEUb7",
    "text": "_3vrqc bEUb7",
    "child": "oXc9K"
};

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value
}) : obj[key] = value;
var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
        if (__hasOwnProp.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
            if (__propIsEnum.call(b, prop))
                __defNormalProp(a, prop, b[prop]);
        }
    return a;
};
var __objRest = (source, exclude) => {
    var target = {};
    for (var prop in source)
        if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
            target[prop] = source[prop];
    if (source != null && __getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(source)) {
            if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
                target[prop] = source[prop];
        }
    return target;
};
const Paragraph = ({
    node,
    nodeIndex,
    RicosNodesRenderer,
    shouldParagraphApplyTextStyle
}) => {
    var _a, _b, _c, _d;
    const {
        seoMode
    } = useContext(RicosViewerContext);
    const {
        textAlignment: parentAlignment
    } = useContext(RicosAlignmentContext);
    const {
        parentNode
    } = useContext(RicosNodeContext);
    const directionHandled = useContext(RicosDirectionHandledContext);
    const {
        indentation = 0
    } = node.paragraphData || {};
    const {
        textAlignment,
        lineHeight
    } = ((_a = node.paragraphData) == null ? void 0 : _a.textStyle) || {};
    const finalParagraphAlignment = textAlignment === TextStyle_TextAlignment.AUTO || !textAlignment ? parentAlignment : textAlignment;
    const paragraphClassName = classnames(
        shouldParagraphApplyTextStyle && styles.text,
        alignmentStyle[finalParagraphAlignment || TextStyle_TextAlignment.AUTO],
        indentStyle[indentLevelToClassName[indentation]], !parentNode && isPaywallSeo(seoMode) && getPaywallSeoClass((seoMode == null ? void 0 : seoMode.paywall) || {}, nodeIndex)
    );
    const childClassName = classnames(
        styles.child,
        textAlignment === TextStyle_TextAlignment.JUSTIFY && alignmentStyle[textAlignment]
    );
    const isEmpty = node.nodes.length === 0;
    const doesEndWithSoftLine = !isEmpty && ((_d = (_c = (_b = node.nodes[node.nodes.length - 1]) == null ? void 0 : _b.textData) == null ? void 0 : _c.text) == null ? void 0 : _d.slice(-1)) === "\n";
    const Tag = isEmpty || !shouldParagraphApplyTextStyle ? "div" : "p";
    const nodeStyle = __spreadValues(__spreadValues({}, node.style), lineHeight && {
        lineHeight
    });
    const Content = isEmpty ? /* @__PURE__ */ React.createElement("br", {
        role: "presentation"
    }) : /* @__PURE__ */ React.createElement(RicosNodeContextProvider, {
        parentNode: node,
        parentIndex: nodeIndex
    }, /* @__PURE__ */ React.createElement(RicosNodesRenderer, {
        key: `children-${node.id}`,
        nodes: node.nodes
    }));
    return /* @__PURE__ */ React.createElement(Anchorable, {
        nodeId: node.id
    }, /* @__PURE__ */ React.createElement(Tag, {
        className: paragraphClassName,
        style: nodeStyle,
        dir: !directionHandled ? "auto" : ""
    }, /* @__PURE__ */ React.createElement("span", {
        className: childClassName
    }, Content), doesEndWithSoftLine && /* @__PURE__ */ React.createElement("br", {
        role: "presentation"
    })));
};
const ParagraphRenderer = (_a) => {
    var _b = _a,
        {
            node
        } = _b,
        props = __objRest(_b, ["node"]);
    return /* @__PURE__ */ React.createElement(Paragraph, __spreadValues({
        key: node.id,
        node
    }, props));
};

export {
    ParagraphRenderer as
    default
};
//# sourceMappingURL=paragraph.js.map