import classnames from 'classnames';
import React, {
    useContext
} from 'react';
import {
    RicosViewerContext,
    RicosAlignmentContext,
    RicosNodeContext,
    RicosNodeContextProvider
} from 'ricos-context';
import {
    TextStyle_TextAlignment
} from 'ricos-schema';
import {
    a as alignmentStyle
} from '../../../../alignment.rtlignore-b7de0bc6.js';
import {
    i as indentStyle
} from '../../../../indentation-01d0a32d.js';
import Anchorable from '../../utils/Anchorable.js';
import {
    isPaywallSeo,
    getPaywallSeoClass
} from '../../utils/paywallSeo.js';
import {
    indentLevelToClassName
} from '../consts.js';

var styles = {
    "fontElementMap": "Hhpex",
    "elementSpacing": "ywY-U",
    "headerOne": "_8npMW ywY-U",
    "headerTwo": "F6zVG ywY-U",
    "headerThree": "BeZE4 ywY-U",
    "headerFour": "gD4gD ywY-U",
    "headerFive": "_4Ir14 ywY-U",
    "headerSix": "-alVX ywY-U",
    "child": "YZKbt"
};

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value
}) : obj[key] = value;
var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
        if (__hasOwnProp.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
            if (__propIsEnum.call(b, prop))
                __defNormalProp(a, prop, b[prop]);
        }
    return a;
};
var __objRest = (source, exclude) => {
    var target = {};
    for (var prop in source)
        if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
            target[prop] = source[prop];
    if (source != null && __getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(source)) {
            if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
                target[prop] = source[prop];
        }
    return target;
};
const levelToClassName = {
    1: "headerOne",
    2: "headerTwo",
    3: "headerThree",
    4: "headerFour",
    5: "headerFive",
    6: "headerSix"
};
const levelToTag = {
    1: "h1",
    2: "h2",
    3: "h3",
    4: "h4",
    5: "h5",
    6: "h6"
};
const Heading = ({
    node,
    nodeIndex,
    RicosNodesRenderer
}) => {
    var _a, _b, _c;
    const {
        seoMode
    } = useContext(RicosViewerContext);
    const {
        textAlignment: parentAlignment
    } = useContext(RicosAlignmentContext);
    const {
        parentNode
    } = useContext(RicosNodeContext);
    const {
        level = 0, textStyle, indentation = 0
    } = node.headingData || {};
    const {
        textAlignment,
        lineHeight
    } = textStyle || {};
    const headingClassName = classnames(
        styles[levelToClassName[level]],
        alignmentStyle[textAlignment || parentAlignment || TextStyle_TextAlignment.AUTO],
        indentStyle[indentLevelToClassName[indentation]], !parentNode && isPaywallSeo(seoMode) && getPaywallSeoClass((seoMode == null ? void 0 : seoMode.paywall) || {}, nodeIndex)
    );
    const childClassName = classnames(
        styles.child,
        textAlignment === TextStyle_TextAlignment.JUSTIFY && alignmentStyle[textAlignment]
    );
    const Tag = levelToTag[level];
    const nodeStyle = node.style || {};
    lineHeight && (nodeStyle.lineHeight = lineHeight);
    const isEmpty = node.nodes.length === 0;
    const doesEndWithSoftLine = !isEmpty && ((_c = (_b = (_a = node.nodes[node.nodes.length - 1]) == null ? void 0 : _a.textData) == null ? void 0 : _b.text) == null ? void 0 : _c.slice(-1)) === "\n";
    const Content = isEmpty ? /* @__PURE__ */ React.createElement("br", {
        role: "presentation"
    }) : /* @__PURE__ */ React.createElement(RicosNodeContextProvider, {
        parentNode: node,
        parentIndex: nodeIndex
    }, /* @__PURE__ */ React.createElement(RicosNodesRenderer, {
        key: `children-${node.id}`,
        nodes: node.nodes
    }));
    return /* @__PURE__ */ React.createElement(Anchorable, {
        nodeId: node.id
    }, /* @__PURE__ */ React.createElement(Tag, {
        className: headingClassName,
        style: nodeStyle,
        dir: "auto"
    }, /* @__PURE__ */ React.createElement("span", {
        className: childClassName
    }, Content), doesEndWithSoftLine && /* @__PURE__ */ React.createElement("br", {
        role: "presentation"
    })));
};
const HeadingRenderer = (_a) => {
    var _b = _a,
        {
            node
        } = _b,
        props = __objRest(_b, ["node"]);
    return /* @__PURE__ */ React.createElement(Heading, __spreadValues({
        key: node.id,
        node
    }, props));
};

export {
    HeadingRenderer as
    default, levelToClassName
};
//# sourceMappingURL=heading.js.map