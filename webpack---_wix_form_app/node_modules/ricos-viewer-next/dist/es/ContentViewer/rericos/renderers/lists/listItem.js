import classnames from 'classnames';
import React, {
    useContext
} from 'react';
import {
    RicosViewerContext,
    RicosNodeContext,
    RicosDirectionHandledContextProvider,
    RicosNodeContextProvider
} from 'ricos-context';
import {
    Node_Type,
    Decoration_Type
} from 'ricos-types';
import {
    isPaywallSeo,
    getPaywallSeoClass
} from '../../utils/paywallSeo.js';
import {
    levelToClassName
} from '../heading/heading.js';
import {
    s as styles
} from '../../../../lists-6e521021.js';
import 'ricos-schema';
import '../../../../alignment.rtlignore-b7de0bc6.js';
import '../../../../indentation-01d0a32d.js';
import '../../utils/Anchorable.js';
import '../consts.js';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value
}) : obj[key] = value;
var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
        if (__hasOwnProp.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
            if (__propIsEnum.call(b, prop))
                __defNormalProp(a, prop, b[prop]);
        }
    return a;
};
var __objRest = (source, exclude) => {
    var target = {};
    for (var prop in source)
        if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
            target[prop] = source[prop];
    if (source != null && __getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(source)) {
            if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
                target[prop] = source[prop];
        }
    return target;
};
const ListItem = ({
    node,
    nodeIndex,
    RicosNodesRenderer
}) => {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const {
        seoMode
    } = useContext(RicosViewerContext);
    const {
        parentIndex
    } = useContext(RicosNodeContext);
    const firstChild = node.nodes[0];
    const dataProperty = `${(_a = firstChild == null ? void 0 : firstChild.type) == null ? void 0 : _a.toLowerCase()}Data`;
    const {
        textAlignment
    } = ((_b = firstChild == null ? void 0 : firstChild[dataProperty]) == null ? void 0 : _b.textStyle) || {};
    const isParentOfHeading = firstChild.type === Node_Type.HEADING;
    const headingLevel = isParentOfHeading && ((_c = firstChild.headingData) == null ? void 0 : _c.level);
    const listItemClassName = classnames(
        styles.listItem,
        isPaywallSeo(seoMode) && getPaywallSeoClass((seoMode == null ? void 0 : seoMode.paywall) || {}, nodeIndex + parentIndex)
    );
    const childFontSize = (_h = (_g = (_f = (_e = (_d = firstChild.nodes[0]) == null ? void 0 : _d.textData) == null ? void 0 : _e.decorations) == null ? void 0 : _f.find(
        (decoration) => decoration.type === Decoration_Type.FONT_SIZE
    )) == null ? void 0 : _g.fontSizeData) == null ? void 0 : _h.value;
    return /* @__PURE__ */ React.createElement(
        "li",
        __spreadValues({
            dir: "auto",
            className: listItemClassName,
            style: {
                textAlign: textAlignment,
                fontSize: childFontSize
            }
        }, headingLevel ? {
            "data-heading-level": levelToClassName[headingLevel]
        } : {}),
        /* @__PURE__ */
        React.createElement(RicosDirectionHandledContextProvider, {
            directionHandled: true
        }, /* @__PURE__ */ React.createElement(RicosNodeContextProvider, {
            parentNode: node,
            parentIndex: nodeIndex
        }, /* @__PURE__ */ React.createElement(RicosNodesRenderer, {
            nodes: node.nodes,
            shouldParagraphApplyTextStyle: true
        })))
    );
};
const ListItemRenderer = (_a) => {
    var _b = _a,
        {
            node
        } = _b,
        props = __objRest(_b, ["node"]);
    return /* @__PURE__ */ React.createElement(ListItem, __spreadValues({
        key: node.id,
        node
    }, props));
};

export {
    ListItemRenderer as
    default
};
//# sourceMappingURL=listItem.js.map