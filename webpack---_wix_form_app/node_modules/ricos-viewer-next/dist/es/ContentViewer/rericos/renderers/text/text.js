import React, {
    useContext
} from 'react';
import {
    withRicosNodeContext,
    ContentTraverserContext
} from 'ricos-context';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value
}) : obj[key] = value;
var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
        if (__hasOwnProp.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
            if (__propIsEnum.call(b, prop))
                __defNormalProp(a, prop, b[prop]);
        }
    return a;
};
const Text = ({
    node
}) => {
    const {
        text
    } = node.textData || {};
    const {
        nodeViewDecorators
    } = useContext(ContentTraverserContext);
    if (text && text !== "") {
        return /* @__PURE__ */ React.createElement("span", null, nodeViewDecorators.applyTextual(node) || text);
    }
    return /* @__PURE__ */ React.createElement("br", {
        role: "presentation"
    });
};
const TextRenderer = (props) => {
    const {
        parentId,
        nodeIndex
    } = props;
    const key = `${parentId}-text-node-${nodeIndex}`;
    return /* @__PURE__ */ React.createElement(Text, __spreadValues({
        key
    }, props));
};
var TextRenderer$1 = withRicosNodeContext(TextRenderer);

export {
    TextRenderer$1 as
    default
};
//# sourceMappingURL=text.js.map