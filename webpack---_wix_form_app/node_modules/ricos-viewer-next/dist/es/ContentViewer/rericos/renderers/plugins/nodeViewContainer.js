import classnames from 'classnames';
import {
    camelCase
} from 'lodash';
import React, {
    useContext
} from 'react';
import {
    RicosViewerContext,
    RicosContext,
    ContentTraverserContext
} from 'ricos-context';
import {
    ErrorBoundary
} from '../../../components/ErrorBoundary.js';
import Anchorable from '../../utils/Anchorable.js';
import {
    ContainerElement
} from './ContainerElement.js';
import {
    s as styles,
    c as alignmentClassName,
    d as sizeClassName,
    t as textWrapClassName
} from '../../../../getClassNames-2d778f5a.js';
import 'ricos-schema';
import 'wix-rich-content-common';
import '../../utils/paywallSeo.js';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value
}) : obj[key] = value;
var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
        if (__hasOwnProp.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
            if (__propIsEnum.call(b, prop))
                __defNormalProp(a, prop, b[prop]);
        }
    return a;
};
const isDefined = (value) => value !== void 0;
const convertSpoilerData = (data) => {
    var _a, _b, _c;
    return {
        config: {
            spoiler: {
                enabled: !!((_a = data.spoiler) == null ? void 0 : _a.enabled),
                description: (_b = data.spoiler) == null ? void 0 : _b.description,
                buttonContent: (_c = data.spoiler) == null ? void 0 : _c.buttonContent
            }
        }
    };
};
const nodeViewContainer = ({
    node,
    nodeIndex,
    customClassNames,
    withHorizontalScroll,
    children
}) => {
    var _a;
    const {
        seoMode,
        anchorTarget,
        helpers
    } = useContext(RicosViewerContext);
    const {
        isMobile,
        theme
    } = useContext(RicosContext);
    const {
        SpoilerViewerWrapper
    } = useContext(ContentTraverserContext);
    const dataProperty = `${camelCase(node.type)}Data`;
    const {
        link,
        containerData
    } = node[dataProperty] || {};
    const spoilerProps = {
        type: node.type,
        componentData: convertSpoilerData(node[dataProperty].containerData || {}),
        helpers,
        children
    };
    const {
        alignment,
        size,
        textWrap
    } = customClassNames || {};
    const containerClassName = classnames(
        styles.pluginContainerReadOnly, {
            [styles.pluginContainerMobile]: isMobile,
            [styles.anchor]: !!link,
            [styles.horizontalScrollbar]: withHorizontalScroll
        },
        isDefined(alignment) ? alignment : alignmentClassName(node),
        isDefined(size) ? size : sizeClassName(node),
        isDefined(textWrap) ? textWrap : textWrapClassName(node)
    );
    let ContainerComponent = /* @__PURE__ */ React.createElement(
        ContainerElement, {
            className: containerClassName,
            node,
            nodeIndex,
            context: {
                seoMode,
                anchorTarget,
                isMobile
            }
        },
        children
    );
    if (SpoilerViewerWrapper) {
        ContainerComponent = /* @__PURE__ */ React.createElement(
            SpoilerViewerWrapper,
            __spreadValues({
                className: containerClassName,
                width: ((_a = containerData == null ? void 0 : containerData.width) == null ? void 0 : _a.custom) ? parseInt(containerData.width.custom) : void 0
            }, spoilerProps),
            ContainerComponent
        );
    }
    return /* @__PURE__ */ React.createElement(ErrorBoundary, null, /* @__PURE__ */ React.createElement(Anchorable, {
        nodeId: node.id
    }, /* @__PURE__ */ React.createElement("div", {
        className: styles.atomic
    }, ContainerComponent)));
};

export {
    nodeViewContainer
};
//# sourceMappingURL=nodeViewContainer.js.map