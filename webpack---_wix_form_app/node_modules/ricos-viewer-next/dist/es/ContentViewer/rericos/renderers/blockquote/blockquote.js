import classnames from 'classnames';
import React, {
    useContext
} from 'react';
import {
    RicosViewerContext,
    RicosNodeContext,
    RicosNodeContextProvider
} from 'ricos-context';
import {
    getTextDirection
} from 'wix-rich-content-common';
import {
    i as indentStyle
} from '../../../../indentation-01d0a32d.js';
import Anchorable from '../../utils/Anchorable.js';
import {
    isPaywallSeo,
    getPaywallSeoClass
} from '../../utils/paywallSeo.js';
import {
    indentLevelToClassName
} from '../consts.js';
import 'ricos-schema';

var styles = {
    "fontElementMap": "_4-WMz",
    "quote": "q4z3l"
};

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value
}) : obj[key] = value;
var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
        if (__hasOwnProp.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
            if (__propIsEnum.call(b, prop))
                __defNormalProp(a, prop, b[prop]);
        }
    return a;
};
var __objRest = (source, exclude) => {
    var target = {};
    for (var prop in source)
        if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
            target[prop] = source[prop];
    if (source != null && __getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(source)) {
            if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
                target[prop] = source[prop];
        }
    return target;
};
const Blockquote = ({
    node,
    nodeIndex,
    RicosNodesRenderer
}) => {
    var _a, _b, _c, _d, _e, _f, _g;
    const {
        seoMode
    } = useContext(RicosViewerContext);
    const {
        parentNode
    } = useContext(RicosNodeContext);
    const {
        indentation = 0
    } = node.blockquoteData || {};
    const firstChild = node.nodes[0];
    const dataProperty = `${(_a = firstChild == null ? void 0 : firstChild.type) == null ? void 0 : _a.toLowerCase()}Data`;
    const {
        textAlignment
    } = ((_b = firstChild == null ? void 0 : firstChild[dataProperty]) == null ? void 0 : _b.textStyle) || {};
    const BlockquoteClassName = classnames(
        styles.quote,
        indentation > 0 && indentStyle[indentLevelToClassName[indentation]], !parentNode && isPaywallSeo(seoMode) && getPaywallSeoClass((seoMode == null ? void 0 : seoMode.paywall) || {}, nodeIndex)
    );
    const childClassName = styles.child;
    return /* @__PURE__ */ React.createElement(Anchorable, {
        nodeId: node.id
    }, /* @__PURE__ */ React.createElement(
        "div", {
            style: {
                textAlign: textAlignment
            },
            dir: getTextDirection((_g = (_f = (_e = (_d = (_c = node.nodes) == null ? void 0 : _c[0]) == null ? void 0 : _d.nodes) == null ? void 0 : _e[0]) == null ? void 0 : _f.textData) == null ? void 0 : _g.text) || "ltr"
        },
        /* @__PURE__ */
        React.createElement("blockquote", {
            className: BlockquoteClassName
        }, /* @__PURE__ */ React.createElement("span", {
            className: childClassName
        }, /* @__PURE__ */ React.createElement(RicosNodeContextProvider, {
            parentNode: node,
            parentIndex: nodeIndex
        }, /* @__PURE__ */ React.createElement(RicosNodesRenderer, {
            nodes: node.nodes
        }))))
    ));
};
const BlockquoteRenderer = (_a) => {
    var _b = _a,
        {
            node
        } = _b,
        props = __objRest(_b, ["node"]);
    return /* @__PURE__ */ React.createElement(Blockquote, __spreadValues({
        key: node.id,
        node
    }, props));
};

export {
    BlockquoteRenderer as
    default
};
//# sourceMappingURL=blockquote.js.map