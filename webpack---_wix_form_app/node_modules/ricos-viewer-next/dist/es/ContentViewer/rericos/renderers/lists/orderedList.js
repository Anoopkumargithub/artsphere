import classnames from 'classnames';
import React, {
    useContext
} from 'react';
import {
    RicosAlignmentContext,
    RicosNodeContextProvider
} from 'ricos-context';
import {
    TextStyle_TextAlignment
} from 'ricos-schema';
import {
    a as alignmentStyle
} from '../../../../alignment.rtlignore-b7de0bc6.js';
import {
    s as styles
} from '../../../../lists-6e521021.js';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value
}) : obj[key] = value;
var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
        if (__hasOwnProp.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
            if (__propIsEnum.call(b, prop))
                __defNormalProp(a, prop, b[prop]);
        }
    return a;
};
var __objRest = (source, exclude) => {
    var target = {};
    for (var prop in source)
        if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
            target[prop] = source[prop];
    if (source != null && __getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(source)) {
            if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
                target[prop] = source[prop];
        }
    return target;
};
const OrederedList = ({
    node,
    nodeIndex,
    RicosNodesRenderer
}) => {
    const {
        textAlignment
    } = useContext(RicosAlignmentContext);
    const orderedListClassName = classnames(
        styles.orderedlist,
        alignmentStyle[textAlignment || TextStyle_TextAlignment.AUTO]
    );
    return /* @__PURE__ */ React.createElement("ol", {
        className: orderedListClassName
    }, /* @__PURE__ */ React.createElement(RicosNodeContextProvider, {
        parentNode: node,
        parentIndex: nodeIndex
    }, /* @__PURE__ */ React.createElement(RicosNodesRenderer, {
        nodes: node.nodes
    })));
};
const OrderedListRenderer = (_a) => {
    var _b = _a,
        {
            node
        } = _b,
        props = __objRest(_b, ["node"]);
    return /* @__PURE__ */ React.createElement(OrederedList, __spreadValues({
        key: node.id,
        node
    }, props));
};

export {
    OrderedListRenderer as
    default
};
//# sourceMappingURL=orderedList.js.map