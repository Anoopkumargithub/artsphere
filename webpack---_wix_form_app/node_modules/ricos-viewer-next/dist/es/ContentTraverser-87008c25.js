import React, {
    useMemo
} from 'react';
import {
    RicosContextProvider,
    ZIndexContextProvider,
    ContentTraverserContextProvider,
    RicosViewerContextProvider,
    RicosAlignmentContextProvider,
    SpoilerContextProvider,
    RicosNodeContextProvider
} from 'ricos-context';
import {
    ZIndexService
} from 'ricos-styles';
import {
    decorators
} from './ContentViewer/rericos/decorators/index.js';
import renderers from './ContentViewer/rericos/renderers/index.js';
import {
    getPluginRenderers
} from './ContentViewer/rericos/renderers/plugins/getPluginRenderers.js';
import SpoilerManager from './ContentViewer/rericos/utils/SpoilerManager.js';
import RicosNodesRenderer from './ContentViewer/RicosNodesRenderer.js';
import {
    Decorators
} from './ContentViewer/rericos/decorators/nodeViewDecorators.js';

var viewerStyles = {
    "fontElementMap": "K2Oqr",
    "wrapper": "M3W8s",
    "pluginContainerMobile": "E9rG1",
    "viewer": "ShJpm",
    "android": "iY-6i",
    "rootedTraversedContent": "Xalyb",
    "atomic": "_5DQ5x",
    "toolbar": "AWOd2",
    "block": "dhjCe"
};

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value
}) : obj[key] = value;
var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
        if (__hasOwnProp.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
            if (__propIsEnum.call(b, prop))
                __defNormalProp(a, prop, b[prop]);
        }
    return a;
};
const ContentTraverser = ({
    content,
    context,
    typeMappers,
    nodeViewRenderers,
    nodeViewDecorators,
    SpoilerViewerWrapper,
    addAnchorsPrefix
}) => {
    const {
        nodes
    } = content;
    const spoilerManager = new SpoilerManager();
    const allRenderers = useMemo(
        () => __spreadValues(__spreadValues({}, renderers), getPluginRenderers(context, typeMappers, nodeViewRenderers, SpoilerViewerWrapper)), []
    );
    const allDecorators = useMemo(() => {
        return Decorators.of([...decorators, ...nodeViewDecorators], context);
    }, []);
    const ricosContext = useMemo(() => {
        const {
            t,
            locale,
            isMobile,
            theme,
            experiments,
            languageDir
        } = context;
        return {
            t,
            locale,
            isMobile,
            theme,
            experiments,
            languageDir
        };
    }, [
        context.t,
        context.locale,
        context.isMobile,
        context.theme,
        context.experiments,
        context.languageDir
    ]);
    const zIndexService = useMemo(() => {
        return new ZIndexService(context.isMobile, context.theme.settingsStyles);
    }, []);
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(RicosContextProvider, __spreadValues({}, ricosContext), /* @__PURE__ */ React.createElement(ZIndexContextProvider, {
        zIndexService
    }, /* @__PURE__ */ React.createElement(
        ContentTraverserContextProvider, {
            nodeViewDecorators: allDecorators,
            renderers: allRenderers,
            SpoilerViewerWrapper
        },
        /* @__PURE__ */
        React.createElement(RicosViewerContextProvider, {
            contextualData: context
        }, /* @__PURE__ */ React.createElement(RicosAlignmentContextProvider, {
            textAlignment: context.textAlignment
        }, /* @__PURE__ */ React.createElement(SpoilerContextProvider, {
            spoilerManager
        }, /* @__PURE__ */ React.createElement(RicosNodeContextProvider, {
            parentNode: null,
            parentIndex: 0
        }, /* @__PURE__ */ React.createElement("div", {
            className: viewerStyles.rootedTraversedContent
        }, /* @__PURE__ */ React.createElement(
            RicosNodesRenderer, {
                nodes,
                isRoot: true,
                addAnchorsPrefix,
                shouldParagraphApplyTextStyle: true
            }
        ))))))
    ))));
};

export {
    ContentTraverser as C, viewerStyles as v
};
//# sourceMappingURL=ContentTraverser-87008c25.js.map