import React, {
    Component,
    createRef,
    Suspense
} from 'react';
import {
    Version
} from 'wix-rich-content-common';
import {
    getContentSummary
} from 'wix-rich-content-common/libs/ricosContentAnalytics';
import {
    getBiCallback
} from './biUtils/getBiCallbacks.js';
import {
    TranslatedContentViewer
} from './ContentViewer/TranslatedContentViewer.js';
import FullscreenProvider from './modals/fullscreen/FullscreenProvider.js';
import {
    mergeViewerProps,
    hasFullscreen
} from './utils.js';
import './ContentViewer/ContentViewer.js';
import 'classnames';
import 'lodash';
import 'ricos-styles';
import 'wix-rich-content-common/libs/devTools';
import './ContentTraverser-87008c25.js';
import 'ricos-context';
import './ContentViewer/rericos/decorators/index.js';
import 'ricos-common-plugins/viewer';
import './ContentViewer/rericos/decorators/breakoutDecorator.js';
import './ContentViewer/rericos/decorators/nodeViewDecorators.js';
import './ContentViewer/rericos/renderers/index.js';
import 'ricos-schema';
import './ContentViewer/rericos/renderers/blockquote/blockquote.js';
import './indentation-01d0a32d.js';
import './ContentViewer/rericos/utils/Anchorable.js';
import './ContentViewer/rericos/utils/paywallSeo.js';
import './ContentViewer/rericos/renderers/consts.js';
import './ContentViewer/rericos/renderers/codeblock/codeblock.js';
import './alignment.rtlignore-b7de0bc6.js';
import './ContentViewer/rericos/renderers/heading/heading.js';
import './ContentViewer/rericos/renderers/lists/bulletedList.js';
import './lists-6e521021.js';
import './ContentViewer/rericos/renderers/lists/listItem.js';
import 'ricos-types';
import './ContentViewer/rericos/renderers/lists/orderedList.js';
import './ContentViewer/rericos/renderers/paragraph/paragraph.js';
import './ContentViewer/rericos/renderers/text/text.js';
import './ContentViewer/rericos/renderers/plugins/getPluginRenderers.js';
import './ContentViewer/rericos/renderers/plugins/fromExternalNode.js';
import 'ricos-content/libs/struct-converters';
import './getClassNames-2d778f5a.js';
import './ContentViewer/rericos/renderers/plugins/nodeViewContainer.js';
import './ContentViewer/components/ErrorBoundary.js';
import './ContentViewer/rericos/renderers/plugins/ContainerElement.js';
import './ContentViewer/rericos/utils/SpoilerManager.js';
import './ContentViewer/RicosNodesRenderer.js';
import './ContentViewer/components/Anchor.js';
import './ContentViewer/components/AddAnchors.js';
import './modals/fullscreen/getImagesData.js';
import 'ricos-content/libs/extract';
import './pluginsStrategy-c75e7fd1.js';
import 'wix-rich-content-common/libs/linkConverters';
import './biUtils/applyGenericParams.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value
}) : obj[key] = value;
var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
        if (__hasOwnProp.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
            if (__propIsEnum.call(b, prop))
                __defNormalProp(a, prop, b[prop]);
        }
    return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
class RicosViewerNext extends Component {
    constructor(props) {
        super(props);
        this.loadTextSelection = () => {
            const {
                textSelectionToolbar,
                isMobile
            } = this.props;
            const needTextSelectionToolbar = textSelectionToolbar && !isMobile;
            if (needTextSelectionToolbar && !this.state.TextSelectionToolbar) {
                const TextSelectionToolbar = React.lazy(() =>
                    import ('./TextSelectionToolbar.js'));
                this.setState({
                    TextSelectionToolbar
                });
            }
        };
        this.loadLinkPreviewPopover = () => {
            const {
                linkPreviewPopoverFetchData,
                isMobile
            } = this.props;
            const needLoadLinkPreviewPopover = linkPreviewPopoverFetchData && !isMobile;
            if (needLoadLinkPreviewPopover && !this.state.LinkPreviewPopover) {
                const LinkPreviewPopover = React.lazy(() =>
                    import ('./LinkPreviewPopover.js'));
                this.setState({
                    LinkPreviewPopover
                });
            }
        };
        this.onMouseOver = () => {
            this.loadTextSelection();
            this.loadLinkPreviewPopover();
        };
        this.getBiCallback = getBiCallback.bind(this);
        this.viewerRef = createRef();
        this.state = {};
    }
    static getDerivedStateFromError(error) {
        return {
            error
        };
    }
    componentDidCatch(error, errorInfo) {
        console.error({
            error,
            errorInfo
        });
    }
    componentDidMount() {
        var _a, _b;
        const onViewerLoaded = this.getBiCallback("onViewerLoaded");
        const content = this.props.content || ((_a = this.props._rcProps) == null ? void 0 : _a.content);
        const {
            pluginsCount
        } = content && getContentSummary(content) || {};
        pluginsCount && (onViewerLoaded == null ? void 0 : onViewerLoaded({
            isPreview: false,
            version: Version.currentVersion,
            pluginsCount,
            url: document.URL,
            contentId: (_b = content == null ? void 0 : content.metadata) == null ? void 0 : _b.id
        }));
    }
    render() {
        var _a, _b, _c, _d;
        const {
            seoSettings,
            linkPreviewPopoverFetchData,
            mediaSettings,
            isMobile,
            content,
            experiments
        } = this.props;
        const {
            TextSelectionToolbar,
            LinkPreviewPopover
        } = this.state;
        const mergedProps = mergeViewerProps(__spreadProps(__spreadValues({}, this.props), {
            viewerProps: {
                seoMode: seoSettings,
                onMouseOver: this.onMouseOver,
                locale: this.props.locale
            }
        }));
        let contentViewer = /* @__PURE__ */ React.createElement(TranslatedContentViewer, __spreadProps(__spreadValues({}, mergedProps), {
            key: "viewer",
            setRef: this.viewerRef
        }));
        if (hasFullscreen(mergedProps.config)) {
            contentViewer = /* @__PURE__ */ React.createElement(
                FullscreenProvider, {
                    key: "RicosFullscreenProvider",
                    fullscreenProps: mediaSettings == null ? void 0 : mediaSettings.fullscreenProps,
                    isMobile: !!isMobile,
                    content,
                    experiments
                },
                contentViewer
            );
        }
        try {
            if (this.state.error) {
                (_b = (_a = this.props).onError) == null ? void 0 : _b.call(_a, this.state.error);
                return null;
            }
            return [
                contentViewer,
                TextSelectionToolbar ? /* @__PURE__ */ React.createElement(Suspense, {
                    key: "TextSelectionToolbar",
                    fallback: /* @__PURE__ */ React.createElement("div", null)
                }, /* @__PURE__ */ React.createElement(
                    TextSelectionToolbar, {
                        onButtonClick: this.getBiCallback("onViewerAction"),
                        container: this.viewerRef.current
                    }
                )) : null,
                LinkPreviewPopover ? /* @__PURE__ */ React.createElement(Suspense, {
                    key: "LinkPreviewPopover",
                    fallback: /* @__PURE__ */ React.createElement("div", null)
                }, /* @__PURE__ */ React.createElement(
                    LinkPreviewPopover, {
                        fetchUrlPreviewData: linkPreviewPopoverFetchData,
                        container: this.viewerRef.current
                    }
                )) : null
            ];
        } catch (e) {
            (_d = (_c = this.props).onError) == null ? void 0 : _d.call(_c, e);
            return null;
        }
    }
}
RicosViewerNext.displayName = "RicosViewerNext";
RicosViewerNext.defaultProps = {
    onError: (err) => {
        throw err;
    }
};

export {
    RicosViewerNext as
    default
};
//# sourceMappingURL=RicosViewerNext.js.map