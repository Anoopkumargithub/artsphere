import React, {
    Component,
    Fragment,
    Children,
    Suspense
} from 'react';
import {
    getImagesData
} from './getImagesData.js';
import 'ricos-content/libs/extract';
import 'ricos-schema';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value
}) : obj[key] = value;
var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
        if (__hasOwnProp.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
            if (__propIsEnum.call(b, prop))
                __defNormalProp(a, prop, b[prop]);
        }
    return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
class FullscreenProvider extends Component {
    constructor(props) {
        super(props);
        this.onClose = () => this.setState({
            isExpanded: false
        });
        this.addExpand = (config) => {
            const {
                isModalSuspended
            } = this.props;
            if (isModalSuspended) {
                return config;
            }
            const onExpand = (blockKey, innerIndex = 0) => {
                const {
                    expandModeData,
                    FullscreenModal
                } = this.state;
                if (!FullscreenModal && !this._FullscreenModal) {
                    return false;
                }
                if (!FullscreenModal && this._FullscreenModal) {
                    this.renderFullScreenModal();
                }
                this.setState({
                    isExpanded: true,
                    // if expandModeData is not defined - expand the first image
                    index: expandModeData ? expandModeData.imageMap[blockKey] + innerIndex : 0
                });
            };
            const imageConfig = config["wix-draft-plugin-image"];
            const galleryConfig = config["wix-draft-plugin-gallery"];
            if (imageConfig && !imageConfig.onExpand) {
                config["wix-draft-plugin-image"] = __spreadProps(__spreadValues({}, imageConfig), {
                    onExpand
                });
            }
            if (galleryConfig && !galleryConfig.onExpand) {
                config["wix-draft-plugin-gallery"] = __spreadProps(__spreadValues({}, galleryConfig), {
                    onExpand
                });
            }
            return config;
        };
        this.onChildHover = () => {
            const {
                FullscreenModal
            } = this.state;
            if (!FullscreenModal && this._FullscreenModal) {
                this.renderFullScreenModal();
            }
        };
        this.state = {
            isExpanded: false,
            index: 0
        };
    }
    componentDidMount() {
        var _a;
        const {
            experiments,
            content
        } = this.props;
        if (content) {
            const imagesData = getImagesData(content);
            if (imagesData.images.length > 0) {
                this.setState({
                    expandModeData: imagesData
                });
                this.lazyLoadFullscreen();
                if (this.props.isMobile) {
                    const timeout = parseInt(((_a = experiments == null ? void 0 : experiments.optimizeFullScreenModal) == null ? void 0 : _a.value) || "0");
                    this._renderFullscreenInterval = setTimeout(() => {
                        this.renderFullScreenModal();
                    }, timeout);
                }
            }
        }
    }
    renderFullScreenModal() {
        this.setState({
            FullscreenModal: this._FullscreenModal
        });
    }
    componentWillReceiveProps(nextProps) {
        if (nextProps.content !== this.props.content) {
            if (nextProps.content) {
                const imagesData = getImagesData(nextProps.content);
                if (!this._FullscreenModal && imagesData.images.length > 0) {
                    this.lazyLoadFullscreen();
                }
                this.setState({
                    expandModeData: imagesData
                });
            }
        }
    }
    componentWillUnmount() {
        clearTimeout(this._renderFullscreenInterval);
    }
    lazyLoadFullscreen() {
        const FullscreenModal = React.lazy(
            () =>
            import (
                /* webpackChunkName: "ricos_FullscreenModalViewer"  */
                './FullscreenModal.js'
            )
        );
        this._FullscreenModal = FullscreenModal;
    }
    render() {
        const {
            isExpanded,
            index,
            expandModeData,
            FullscreenModal
        } = this.state;
        const {
            children,
            isModalSuspended,
            isMobile,
            fullscreenProps
        } = this.props;
        const config = this.addExpand(children.props.config);
        return /* @__PURE__ */ React.createElement(Fragment, null, Children.only(React.cloneElement(children, {
            config,
            onHover: this.onChildHover
        })), FullscreenModal && /* @__PURE__ */ React.createElement(Suspense, {
            fallback: /* @__PURE__ */ React.createElement("div", null)
        }, /* @__PURE__ */ React.createElement(
            FullscreenModal,
            __spreadValues({
                dataHook: "RicosFullScreen",
                isOpen: isExpanded && !isModalSuspended,
                images: (expandModeData == null ? void 0 : expandModeData.images) || [],
                onClose: this.onClose,
                index,
                isMobile
            }, fullscreenProps)
        )));
    }
}

export {
    FullscreenProvider as
    default
};
//# sourceMappingURL=FullscreenProvider.js.map