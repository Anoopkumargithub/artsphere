import {
    extract
} from 'ricos-content/libs/extract';
import {
    Node_Type
} from 'ricos-schema';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value
}) : obj[key] = value;
var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
        if (__hasOwnProp.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
            if (__propIsEnum.call(b, prop))
                __defNormalProp(a, prop, b[prop]);
        }
    return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));

function convertDataToGalleryItems(type, data) {
    var _a;
    switch (type) {
        case Node_Type.IMAGE:
            return ((_a = data.image) == null ? void 0 : _a.src) && !(data == null ? void 0 : data.disableExpand) ? [{
                image: {
                    media: __spreadValues({}, data.image)
                },
                disableDownload: data.disableDownload
            }] : [];
        case Node_Type.GALLERY:
            {
                return (data == null ? void 0 : data.disableExpand) ? [] : data.items.map((item) => {
                    return __spreadProps(__spreadValues({}, item), {
                        disableDownload: data.disableDownload
                    });
                });
            }
        default:
            return [];
    }
}

function getImagesData(content) {
    const imagesData = {
        images: [],
        imageMap: {}
    };
    let index = 0;
    return extract(content.nodes).filter((node) => [Node_Type.IMAGE, Node_Type.GALLERY].includes(node.type)).map((node) => ({
        data: node[`${node.type.toLowerCase()}Data`],
        type: node.type,
        id: node.id
    })).get().reduce((items, {
        data,
        type,
        id
    }) => {
        const {
            images,
            imageMap
        } = items;
        const galleryItems = convertDataToGalleryItems(type, data);
        const currentIndex = index;
        index += galleryItems.length;
        return {
            images: [...images, ...galleryItems],
            imageMap: __spreadProps(__spreadValues({}, imageMap), {
                [id]: currentIndex
            })
        };
    }, imagesData);
}

export {
    getImagesData
};
//# sourceMappingURL=getImagesData.js.map